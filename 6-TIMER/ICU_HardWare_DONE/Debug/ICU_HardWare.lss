
ICU_HardWare.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000025b6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000020  00800060  000025b6  0000264a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001a  00800080  00800080  0000266a  2**0
                  ALLOC
  3 .stab         00002130  00000000  00000000  0000266c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000fca  00000000  00000000  0000479c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  00005766  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  000058c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  00005a55  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  00007a9a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  00008b9b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  00009b20  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  00009ca0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  00009f62  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000a7f0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 89 11 	jmp	0x2312	; 0x2312 <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 ec 10 	jmp	0x21d8	; 0x21d8 <__vector_10>
      2c:	0c 94 56 11 	jmp	0x22ac	; 0x22ac <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 eb       	ldi	r30, 0xB6	; 182
      68:	f5 e2       	ldi	r31, 0x25	; 37
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 38       	cpi	r26, 0x80	; 128
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a0 e8       	ldi	r26, 0x80	; 128
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	aa 39       	cpi	r26, 0x9A	; 154
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 bc 11 	call	0x2378	; 0x2378 <main>
      8a:	0c 94 d9 12 	jmp	0x25b2	; 0x25b2 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 a2 12 	jmp	0x2544	; 0x2544 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a8 e7       	ldi	r26, 0x78	; 120
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 be 12 	jmp	0x257c	; 0x257c <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 ae 12 	jmp	0x255c	; 0x255c <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 ca 12 	jmp	0x2594	; 0x2594 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 ae 12 	jmp	0x255c	; 0x255c <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 ca 12 	jmp	0x2594	; 0x2594 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 a2 12 	jmp	0x2544	; 0x2544 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	88 e7       	ldi	r24, 0x78	; 120
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 be 12 	jmp	0x257c	; 0x257c <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 aa 12 	jmp	0x2554	; 0x2554 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	68 e7       	ldi	r22, 0x78	; 120
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 c6 12 	jmp	0x258c	; 0x258c <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 ae 12 	jmp	0x255c	; 0x255c <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 ca 12 	jmp	0x2594	; 0x2594 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 ae 12 	jmp	0x255c	; 0x255c <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 ca 12 	jmp	0x2594	; 0x2594 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 ae 12 	jmp	0x255c	; 0x255c <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 ca 12 	jmp	0x2594	; 0x2594 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 b2 12 	jmp	0x2564	; 0x2564 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 ce 12 	jmp	0x259c	; 0x259c <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <CLCD_voidSendCommand>:
#include "CLCD_interface.h"
#include "CLCD_private.h"


void CLCD_voidSendCommand(u8 Copy_u8Command)
{
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	cd b7       	in	r28, 0x3d	; 61
     ca4:	de b7       	in	r29, 0x3e	; 62
     ca6:	6d 97       	sbiw	r28, 0x1d	; 29
     ca8:	0f b6       	in	r0, 0x3f	; 63
     caa:	f8 94       	cli
     cac:	de bf       	out	0x3e, r29	; 62
     cae:	0f be       	out	0x3f, r0	; 63
     cb0:	cd bf       	out	0x3d, r28	; 61
     cb2:	8d 8f       	std	Y+29, r24	; 0x1d
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_HIGH);
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);
#elif MODE==FOUR_BIT
	/*set RS pin to low ----> Command*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RS_PIN,DIO_u8PIN_LOW);
     cb4:	81 e0       	ldi	r24, 0x01	; 1
     cb6:	60 e0       	ldi	r22, 0x00	; 0
     cb8:	40 e0       	ldi	r20, 0x00	; 0
     cba:	0e 94 9b 0c 	call	0x1936	; 0x1936 <DIO_u8SetPinValue>
	/*set R/W pin to low TO write (instruction write operaion (write instruction code in IR)*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RW_PIN,DIO_u8PIN_LOW);
     cbe:	81 e0       	ldi	r24, 0x01	; 1
     cc0:	61 e0       	ldi	r22, 0x01	; 1
     cc2:	40 e0       	ldi	r20, 0x00	; 0
     cc4:	0e 94 9b 0c 	call	0x1936	; 0x1936 <DIO_u8SetPinValue>
	/*SEND MSB OF COMMAND*/
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_DataPin4,(Copy_u8Command&0b00010000)>>4);
     cc8:	8d 8d       	ldd	r24, Y+29	; 0x1d
     cca:	88 2f       	mov	r24, r24
     ccc:	90 e0       	ldi	r25, 0x00	; 0
     cce:	80 71       	andi	r24, 0x10	; 16
     cd0:	90 70       	andi	r25, 0x00	; 0
     cd2:	95 95       	asr	r25
     cd4:	87 95       	ror	r24
     cd6:	95 95       	asr	r25
     cd8:	87 95       	ror	r24
     cda:	95 95       	asr	r25
     cdc:	87 95       	ror	r24
     cde:	95 95       	asr	r25
     ce0:	87 95       	ror	r24
     ce2:	98 2f       	mov	r25, r24
     ce4:	80 e0       	ldi	r24, 0x00	; 0
     ce6:	64 e0       	ldi	r22, 0x04	; 4
     ce8:	49 2f       	mov	r20, r25
     cea:	0e 94 9b 0c 	call	0x1936	; 0x1936 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_DataPin5,(Copy_u8Command&0b00100000)>>5);
     cee:	8d 8d       	ldd	r24, Y+29	; 0x1d
     cf0:	88 2f       	mov	r24, r24
     cf2:	90 e0       	ldi	r25, 0x00	; 0
     cf4:	80 72       	andi	r24, 0x20	; 32
     cf6:	90 70       	andi	r25, 0x00	; 0
     cf8:	95 95       	asr	r25
     cfa:	87 95       	ror	r24
     cfc:	95 95       	asr	r25
     cfe:	87 95       	ror	r24
     d00:	95 95       	asr	r25
     d02:	87 95       	ror	r24
     d04:	95 95       	asr	r25
     d06:	87 95       	ror	r24
     d08:	95 95       	asr	r25
     d0a:	87 95       	ror	r24
     d0c:	98 2f       	mov	r25, r24
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	65 e0       	ldi	r22, 0x05	; 5
     d12:	49 2f       	mov	r20, r25
     d14:	0e 94 9b 0c 	call	0x1936	; 0x1936 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_DataPin6,(Copy_u8Command&0b01000000)>>6);
     d18:	8d 8d       	ldd	r24, Y+29	; 0x1d
     d1a:	88 2f       	mov	r24, r24
     d1c:	90 e0       	ldi	r25, 0x00	; 0
     d1e:	80 74       	andi	r24, 0x40	; 64
     d20:	90 70       	andi	r25, 0x00	; 0
     d22:	08 2e       	mov	r0, r24
     d24:	89 2f       	mov	r24, r25
     d26:	00 0c       	add	r0, r0
     d28:	88 1f       	adc	r24, r24
     d2a:	99 0b       	sbc	r25, r25
     d2c:	00 0c       	add	r0, r0
     d2e:	88 1f       	adc	r24, r24
     d30:	99 1f       	adc	r25, r25
     d32:	98 2f       	mov	r25, r24
     d34:	80 e0       	ldi	r24, 0x00	; 0
     d36:	66 e0       	ldi	r22, 0x06	; 6
     d38:	49 2f       	mov	r20, r25
     d3a:	0e 94 9b 0c 	call	0x1936	; 0x1936 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_DataPin7,(Copy_u8Command&0b10000000)>>7);
     d3e:	8d 8d       	ldd	r24, Y+29	; 0x1d
     d40:	98 2f       	mov	r25, r24
     d42:	99 1f       	adc	r25, r25
     d44:	99 27       	eor	r25, r25
     d46:	99 1f       	adc	r25, r25
     d48:	80 e0       	ldi	r24, 0x00	; 0
     d4a:	67 e0       	ldi	r22, 0x07	; 7
     d4c:	49 2f       	mov	r20, r25
     d4e:	0e 94 9b 0c 	call	0x1936	; 0x1936 <DIO_u8SetPinValue>

	/*set enable pulse*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_HIGH);
     d52:	81 e0       	ldi	r24, 0x01	; 1
     d54:	62 e0       	ldi	r22, 0x02	; 2
     d56:	41 e0       	ldi	r20, 0x01	; 1
     d58:	0e 94 9b 0c 	call	0x1936	; 0x1936 <DIO_u8SetPinValue>
     d5c:	80 e0       	ldi	r24, 0x00	; 0
     d5e:	90 e0       	ldi	r25, 0x00	; 0
     d60:	a0 e8       	ldi	r26, 0x80	; 128
     d62:	bf e3       	ldi	r27, 0x3F	; 63
     d64:	89 8f       	std	Y+25, r24	; 0x19
     d66:	9a 8f       	std	Y+26, r25	; 0x1a
     d68:	ab 8f       	std	Y+27, r26	; 0x1b
     d6a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d6c:	69 8d       	ldd	r22, Y+25	; 0x19
     d6e:	7a 8d       	ldd	r23, Y+26	; 0x1a
     d70:	8b 8d       	ldd	r24, Y+27	; 0x1b
     d72:	9c 8d       	ldd	r25, Y+28	; 0x1c
     d74:	20 e0       	ldi	r18, 0x00	; 0
     d76:	30 e0       	ldi	r19, 0x00	; 0
     d78:	4a ef       	ldi	r20, 0xFA	; 250
     d7a:	54 e4       	ldi	r21, 0x44	; 68
     d7c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d80:	dc 01       	movw	r26, r24
     d82:	cb 01       	movw	r24, r22
     d84:	8d 8b       	std	Y+21, r24	; 0x15
     d86:	9e 8b       	std	Y+22, r25	; 0x16
     d88:	af 8b       	std	Y+23, r26	; 0x17
     d8a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     d8c:	6d 89       	ldd	r22, Y+21	; 0x15
     d8e:	7e 89       	ldd	r23, Y+22	; 0x16
     d90:	8f 89       	ldd	r24, Y+23	; 0x17
     d92:	98 8d       	ldd	r25, Y+24	; 0x18
     d94:	20 e0       	ldi	r18, 0x00	; 0
     d96:	30 e0       	ldi	r19, 0x00	; 0
     d98:	40 e8       	ldi	r20, 0x80	; 128
     d9a:	5f e3       	ldi	r21, 0x3F	; 63
     d9c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     da0:	88 23       	and	r24, r24
     da2:	2c f4       	brge	.+10     	; 0xdae <CLCD_voidSendCommand+0x110>
		__ticks = 1;
     da4:	81 e0       	ldi	r24, 0x01	; 1
     da6:	90 e0       	ldi	r25, 0x00	; 0
     da8:	9c 8b       	std	Y+20, r25	; 0x14
     daa:	8b 8b       	std	Y+19, r24	; 0x13
     dac:	3f c0       	rjmp	.+126    	; 0xe2c <CLCD_voidSendCommand+0x18e>
	else if (__tmp > 65535)
     dae:	6d 89       	ldd	r22, Y+21	; 0x15
     db0:	7e 89       	ldd	r23, Y+22	; 0x16
     db2:	8f 89       	ldd	r24, Y+23	; 0x17
     db4:	98 8d       	ldd	r25, Y+24	; 0x18
     db6:	20 e0       	ldi	r18, 0x00	; 0
     db8:	3f ef       	ldi	r19, 0xFF	; 255
     dba:	4f e7       	ldi	r20, 0x7F	; 127
     dbc:	57 e4       	ldi	r21, 0x47	; 71
     dbe:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     dc2:	18 16       	cp	r1, r24
     dc4:	4c f5       	brge	.+82     	; 0xe18 <CLCD_voidSendCommand+0x17a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     dc6:	69 8d       	ldd	r22, Y+25	; 0x19
     dc8:	7a 8d       	ldd	r23, Y+26	; 0x1a
     dca:	8b 8d       	ldd	r24, Y+27	; 0x1b
     dcc:	9c 8d       	ldd	r25, Y+28	; 0x1c
     dce:	20 e0       	ldi	r18, 0x00	; 0
     dd0:	30 e0       	ldi	r19, 0x00	; 0
     dd2:	40 e2       	ldi	r20, 0x20	; 32
     dd4:	51 e4       	ldi	r21, 0x41	; 65
     dd6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     dda:	dc 01       	movw	r26, r24
     ddc:	cb 01       	movw	r24, r22
     dde:	bc 01       	movw	r22, r24
     de0:	cd 01       	movw	r24, r26
     de2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     de6:	dc 01       	movw	r26, r24
     de8:	cb 01       	movw	r24, r22
     dea:	9c 8b       	std	Y+20, r25	; 0x14
     dec:	8b 8b       	std	Y+19, r24	; 0x13
     dee:	0f c0       	rjmp	.+30     	; 0xe0e <CLCD_voidSendCommand+0x170>
     df0:	88 ec       	ldi	r24, 0xC8	; 200
     df2:	90 e0       	ldi	r25, 0x00	; 0
     df4:	9a 8b       	std	Y+18, r25	; 0x12
     df6:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     df8:	89 89       	ldd	r24, Y+17	; 0x11
     dfa:	9a 89       	ldd	r25, Y+18	; 0x12
     dfc:	01 97       	sbiw	r24, 0x01	; 1
     dfe:	f1 f7       	brne	.-4      	; 0xdfc <CLCD_voidSendCommand+0x15e>
     e00:	9a 8b       	std	Y+18, r25	; 0x12
     e02:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e04:	8b 89       	ldd	r24, Y+19	; 0x13
     e06:	9c 89       	ldd	r25, Y+20	; 0x14
     e08:	01 97       	sbiw	r24, 0x01	; 1
     e0a:	9c 8b       	std	Y+20, r25	; 0x14
     e0c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e0e:	8b 89       	ldd	r24, Y+19	; 0x13
     e10:	9c 89       	ldd	r25, Y+20	; 0x14
     e12:	00 97       	sbiw	r24, 0x00	; 0
     e14:	69 f7       	brne	.-38     	; 0xdf0 <CLCD_voidSendCommand+0x152>
     e16:	14 c0       	rjmp	.+40     	; 0xe40 <CLCD_voidSendCommand+0x1a2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e18:	6d 89       	ldd	r22, Y+21	; 0x15
     e1a:	7e 89       	ldd	r23, Y+22	; 0x16
     e1c:	8f 89       	ldd	r24, Y+23	; 0x17
     e1e:	98 8d       	ldd	r25, Y+24	; 0x18
     e20:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e24:	dc 01       	movw	r26, r24
     e26:	cb 01       	movw	r24, r22
     e28:	9c 8b       	std	Y+20, r25	; 0x14
     e2a:	8b 8b       	std	Y+19, r24	; 0x13
     e2c:	8b 89       	ldd	r24, Y+19	; 0x13
     e2e:	9c 89       	ldd	r25, Y+20	; 0x14
     e30:	98 8b       	std	Y+16, r25	; 0x10
     e32:	8f 87       	std	Y+15, r24	; 0x0f
     e34:	8f 85       	ldd	r24, Y+15	; 0x0f
     e36:	98 89       	ldd	r25, Y+16	; 0x10
     e38:	01 97       	sbiw	r24, 0x01	; 1
     e3a:	f1 f7       	brne	.-4      	; 0xe38 <CLCD_voidSendCommand+0x19a>
     e3c:	98 8b       	std	Y+16, r25	; 0x10
     e3e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);
     e40:	81 e0       	ldi	r24, 0x01	; 1
     e42:	62 e0       	ldi	r22, 0x02	; 2
     e44:	40 e0       	ldi	r20, 0x00	; 0
     e46:	0e 94 9b 0c 	call	0x1936	; 0x1936 <DIO_u8SetPinValue>


	/*SEND LSB OF COMMAND*/

	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_DataPin4,(Copy_u8Command&0b00000001));
     e4a:	8d 8d       	ldd	r24, Y+29	; 0x1d
     e4c:	98 2f       	mov	r25, r24
     e4e:	91 70       	andi	r25, 0x01	; 1
     e50:	80 e0       	ldi	r24, 0x00	; 0
     e52:	64 e0       	ldi	r22, 0x04	; 4
     e54:	49 2f       	mov	r20, r25
     e56:	0e 94 9b 0c 	call	0x1936	; 0x1936 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_DataPin5,(Copy_u8Command&0b00000010)>>1);
     e5a:	8d 8d       	ldd	r24, Y+29	; 0x1d
     e5c:	88 2f       	mov	r24, r24
     e5e:	90 e0       	ldi	r25, 0x00	; 0
     e60:	82 70       	andi	r24, 0x02	; 2
     e62:	90 70       	andi	r25, 0x00	; 0
     e64:	95 95       	asr	r25
     e66:	87 95       	ror	r24
     e68:	98 2f       	mov	r25, r24
     e6a:	80 e0       	ldi	r24, 0x00	; 0
     e6c:	65 e0       	ldi	r22, 0x05	; 5
     e6e:	49 2f       	mov	r20, r25
     e70:	0e 94 9b 0c 	call	0x1936	; 0x1936 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_DataPin6,(Copy_u8Command&0b00000100)>>2);
     e74:	8d 8d       	ldd	r24, Y+29	; 0x1d
     e76:	88 2f       	mov	r24, r24
     e78:	90 e0       	ldi	r25, 0x00	; 0
     e7a:	84 70       	andi	r24, 0x04	; 4
     e7c:	90 70       	andi	r25, 0x00	; 0
     e7e:	95 95       	asr	r25
     e80:	87 95       	ror	r24
     e82:	95 95       	asr	r25
     e84:	87 95       	ror	r24
     e86:	98 2f       	mov	r25, r24
     e88:	80 e0       	ldi	r24, 0x00	; 0
     e8a:	66 e0       	ldi	r22, 0x06	; 6
     e8c:	49 2f       	mov	r20, r25
     e8e:	0e 94 9b 0c 	call	0x1936	; 0x1936 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_DataPin7,(Copy_u8Command&0b00001000)>>3);
     e92:	8d 8d       	ldd	r24, Y+29	; 0x1d
     e94:	88 2f       	mov	r24, r24
     e96:	90 e0       	ldi	r25, 0x00	; 0
     e98:	88 70       	andi	r24, 0x08	; 8
     e9a:	90 70       	andi	r25, 0x00	; 0
     e9c:	95 95       	asr	r25
     e9e:	87 95       	ror	r24
     ea0:	95 95       	asr	r25
     ea2:	87 95       	ror	r24
     ea4:	95 95       	asr	r25
     ea6:	87 95       	ror	r24
     ea8:	98 2f       	mov	r25, r24
     eaa:	80 e0       	ldi	r24, 0x00	; 0
     eac:	67 e0       	ldi	r22, 0x07	; 7
     eae:	49 2f       	mov	r20, r25
     eb0:	0e 94 9b 0c 	call	0x1936	; 0x1936 <DIO_u8SetPinValue>

	/*set enable pulse*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_HIGH);
     eb4:	81 e0       	ldi	r24, 0x01	; 1
     eb6:	62 e0       	ldi	r22, 0x02	; 2
     eb8:	41 e0       	ldi	r20, 0x01	; 1
     eba:	0e 94 9b 0c 	call	0x1936	; 0x1936 <DIO_u8SetPinValue>
     ebe:	80 e0       	ldi	r24, 0x00	; 0
     ec0:	90 e0       	ldi	r25, 0x00	; 0
     ec2:	a0 e8       	ldi	r26, 0x80	; 128
     ec4:	bf e3       	ldi	r27, 0x3F	; 63
     ec6:	8b 87       	std	Y+11, r24	; 0x0b
     ec8:	9c 87       	std	Y+12, r25	; 0x0c
     eca:	ad 87       	std	Y+13, r26	; 0x0d
     ecc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ece:	6b 85       	ldd	r22, Y+11	; 0x0b
     ed0:	7c 85       	ldd	r23, Y+12	; 0x0c
     ed2:	8d 85       	ldd	r24, Y+13	; 0x0d
     ed4:	9e 85       	ldd	r25, Y+14	; 0x0e
     ed6:	20 e0       	ldi	r18, 0x00	; 0
     ed8:	30 e0       	ldi	r19, 0x00	; 0
     eda:	4a ef       	ldi	r20, 0xFA	; 250
     edc:	54 e4       	ldi	r21, 0x44	; 68
     ede:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ee2:	dc 01       	movw	r26, r24
     ee4:	cb 01       	movw	r24, r22
     ee6:	8f 83       	std	Y+7, r24	; 0x07
     ee8:	98 87       	std	Y+8, r25	; 0x08
     eea:	a9 87       	std	Y+9, r26	; 0x09
     eec:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     eee:	6f 81       	ldd	r22, Y+7	; 0x07
     ef0:	78 85       	ldd	r23, Y+8	; 0x08
     ef2:	89 85       	ldd	r24, Y+9	; 0x09
     ef4:	9a 85       	ldd	r25, Y+10	; 0x0a
     ef6:	20 e0       	ldi	r18, 0x00	; 0
     ef8:	30 e0       	ldi	r19, 0x00	; 0
     efa:	40 e8       	ldi	r20, 0x80	; 128
     efc:	5f e3       	ldi	r21, 0x3F	; 63
     efe:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     f02:	88 23       	and	r24, r24
     f04:	2c f4       	brge	.+10     	; 0xf10 <CLCD_voidSendCommand+0x272>
		__ticks = 1;
     f06:	81 e0       	ldi	r24, 0x01	; 1
     f08:	90 e0       	ldi	r25, 0x00	; 0
     f0a:	9e 83       	std	Y+6, r25	; 0x06
     f0c:	8d 83       	std	Y+5, r24	; 0x05
     f0e:	3f c0       	rjmp	.+126    	; 0xf8e <CLCD_voidSendCommand+0x2f0>
	else if (__tmp > 65535)
     f10:	6f 81       	ldd	r22, Y+7	; 0x07
     f12:	78 85       	ldd	r23, Y+8	; 0x08
     f14:	89 85       	ldd	r24, Y+9	; 0x09
     f16:	9a 85       	ldd	r25, Y+10	; 0x0a
     f18:	20 e0       	ldi	r18, 0x00	; 0
     f1a:	3f ef       	ldi	r19, 0xFF	; 255
     f1c:	4f e7       	ldi	r20, 0x7F	; 127
     f1e:	57 e4       	ldi	r21, 0x47	; 71
     f20:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     f24:	18 16       	cp	r1, r24
     f26:	4c f5       	brge	.+82     	; 0xf7a <CLCD_voidSendCommand+0x2dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f28:	6b 85       	ldd	r22, Y+11	; 0x0b
     f2a:	7c 85       	ldd	r23, Y+12	; 0x0c
     f2c:	8d 85       	ldd	r24, Y+13	; 0x0d
     f2e:	9e 85       	ldd	r25, Y+14	; 0x0e
     f30:	20 e0       	ldi	r18, 0x00	; 0
     f32:	30 e0       	ldi	r19, 0x00	; 0
     f34:	40 e2       	ldi	r20, 0x20	; 32
     f36:	51 e4       	ldi	r21, 0x41	; 65
     f38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f3c:	dc 01       	movw	r26, r24
     f3e:	cb 01       	movw	r24, r22
     f40:	bc 01       	movw	r22, r24
     f42:	cd 01       	movw	r24, r26
     f44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f48:	dc 01       	movw	r26, r24
     f4a:	cb 01       	movw	r24, r22
     f4c:	9e 83       	std	Y+6, r25	; 0x06
     f4e:	8d 83       	std	Y+5, r24	; 0x05
     f50:	0f c0       	rjmp	.+30     	; 0xf70 <CLCD_voidSendCommand+0x2d2>
     f52:	88 ec       	ldi	r24, 0xC8	; 200
     f54:	90 e0       	ldi	r25, 0x00	; 0
     f56:	9c 83       	std	Y+4, r25	; 0x04
     f58:	8b 83       	std	Y+3, r24	; 0x03
     f5a:	8b 81       	ldd	r24, Y+3	; 0x03
     f5c:	9c 81       	ldd	r25, Y+4	; 0x04
     f5e:	01 97       	sbiw	r24, 0x01	; 1
     f60:	f1 f7       	brne	.-4      	; 0xf5e <CLCD_voidSendCommand+0x2c0>
     f62:	9c 83       	std	Y+4, r25	; 0x04
     f64:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f66:	8d 81       	ldd	r24, Y+5	; 0x05
     f68:	9e 81       	ldd	r25, Y+6	; 0x06
     f6a:	01 97       	sbiw	r24, 0x01	; 1
     f6c:	9e 83       	std	Y+6, r25	; 0x06
     f6e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f70:	8d 81       	ldd	r24, Y+5	; 0x05
     f72:	9e 81       	ldd	r25, Y+6	; 0x06
     f74:	00 97       	sbiw	r24, 0x00	; 0
     f76:	69 f7       	brne	.-38     	; 0xf52 <CLCD_voidSendCommand+0x2b4>
     f78:	14 c0       	rjmp	.+40     	; 0xfa2 <CLCD_voidSendCommand+0x304>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f7a:	6f 81       	ldd	r22, Y+7	; 0x07
     f7c:	78 85       	ldd	r23, Y+8	; 0x08
     f7e:	89 85       	ldd	r24, Y+9	; 0x09
     f80:	9a 85       	ldd	r25, Y+10	; 0x0a
     f82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f86:	dc 01       	movw	r26, r24
     f88:	cb 01       	movw	r24, r22
     f8a:	9e 83       	std	Y+6, r25	; 0x06
     f8c:	8d 83       	std	Y+5, r24	; 0x05
     f8e:	8d 81       	ldd	r24, Y+5	; 0x05
     f90:	9e 81       	ldd	r25, Y+6	; 0x06
     f92:	9a 83       	std	Y+2, r25	; 0x02
     f94:	89 83       	std	Y+1, r24	; 0x01
     f96:	89 81       	ldd	r24, Y+1	; 0x01
     f98:	9a 81       	ldd	r25, Y+2	; 0x02
     f9a:	01 97       	sbiw	r24, 0x01	; 1
     f9c:	f1 f7       	brne	.-4      	; 0xf9a <CLCD_voidSendCommand+0x2fc>
     f9e:	9a 83       	std	Y+2, r25	; 0x02
     fa0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);
     fa2:	81 e0       	ldi	r24, 0x01	; 1
     fa4:	62 e0       	ldi	r22, 0x02	; 2
     fa6:	40 e0       	ldi	r20, 0x00	; 0
     fa8:	0e 94 9b 0c 	call	0x1936	; 0x1936 <DIO_u8SetPinValue>
#endif
}
     fac:	6d 96       	adiw	r28, 0x1d	; 29
     fae:	0f b6       	in	r0, 0x3f	; 63
     fb0:	f8 94       	cli
     fb2:	de bf       	out	0x3e, r29	; 62
     fb4:	0f be       	out	0x3f, r0	; 63
     fb6:	cd bf       	out	0x3d, r28	; 61
     fb8:	cf 91       	pop	r28
     fba:	df 91       	pop	r29
     fbc:	08 95       	ret

00000fbe <CLCD_voidSendData>:

void CLCD_voidSendData(u8 Copy_u8Data)
{
     fbe:	df 93       	push	r29
     fc0:	cf 93       	push	r28
     fc2:	cd b7       	in	r28, 0x3d	; 61
     fc4:	de b7       	in	r29, 0x3e	; 62
     fc6:	6d 97       	sbiw	r28, 0x1d	; 29
     fc8:	0f b6       	in	r0, 0x3f	; 63
     fca:	f8 94       	cli
     fcc:	de bf       	out	0x3e, r29	; 62
     fce:	0f be       	out	0x3f, r0	; 63
     fd0:	cd bf       	out	0x3d, r28	; 61
     fd2:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);

#elif MODE==FOUR_BIT
	/*set RS pin to high ----> data*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RS_PIN,DIO_u8PIN_HIGH);
     fd4:	81 e0       	ldi	r24, 0x01	; 1
     fd6:	60 e0       	ldi	r22, 0x00	; 0
     fd8:	41 e0       	ldi	r20, 0x01	; 1
     fda:	0e 94 9b 0c 	call	0x1936	; 0x1936 <DIO_u8SetPinValue>
	/*set R/W pin to low TO write (instruction write operaion (write instruction code in IR)*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RW_PIN,DIO_u8PIN_LOW);
     fde:	81 e0       	ldi	r24, 0x01	; 1
     fe0:	61 e0       	ldi	r22, 0x01	; 1
     fe2:	40 e0       	ldi	r20, 0x00	; 0
     fe4:	0e 94 9b 0c 	call	0x1936	; 0x1936 <DIO_u8SetPinValue>
	/*SEND MSB OF COMMAND*/
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_DataPin4,(Copy_u8Data&0b00010000)>>4);
     fe8:	8d 8d       	ldd	r24, Y+29	; 0x1d
     fea:	88 2f       	mov	r24, r24
     fec:	90 e0       	ldi	r25, 0x00	; 0
     fee:	80 71       	andi	r24, 0x10	; 16
     ff0:	90 70       	andi	r25, 0x00	; 0
     ff2:	95 95       	asr	r25
     ff4:	87 95       	ror	r24
     ff6:	95 95       	asr	r25
     ff8:	87 95       	ror	r24
     ffa:	95 95       	asr	r25
     ffc:	87 95       	ror	r24
     ffe:	95 95       	asr	r25
    1000:	87 95       	ror	r24
    1002:	98 2f       	mov	r25, r24
    1004:	80 e0       	ldi	r24, 0x00	; 0
    1006:	64 e0       	ldi	r22, 0x04	; 4
    1008:	49 2f       	mov	r20, r25
    100a:	0e 94 9b 0c 	call	0x1936	; 0x1936 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_DataPin5,(Copy_u8Data&0b00100000)>>5);
    100e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1010:	88 2f       	mov	r24, r24
    1012:	90 e0       	ldi	r25, 0x00	; 0
    1014:	80 72       	andi	r24, 0x20	; 32
    1016:	90 70       	andi	r25, 0x00	; 0
    1018:	95 95       	asr	r25
    101a:	87 95       	ror	r24
    101c:	95 95       	asr	r25
    101e:	87 95       	ror	r24
    1020:	95 95       	asr	r25
    1022:	87 95       	ror	r24
    1024:	95 95       	asr	r25
    1026:	87 95       	ror	r24
    1028:	95 95       	asr	r25
    102a:	87 95       	ror	r24
    102c:	98 2f       	mov	r25, r24
    102e:	80 e0       	ldi	r24, 0x00	; 0
    1030:	65 e0       	ldi	r22, 0x05	; 5
    1032:	49 2f       	mov	r20, r25
    1034:	0e 94 9b 0c 	call	0x1936	; 0x1936 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_DataPin6,(Copy_u8Data&0b01000000)>>6);
    1038:	8d 8d       	ldd	r24, Y+29	; 0x1d
    103a:	88 2f       	mov	r24, r24
    103c:	90 e0       	ldi	r25, 0x00	; 0
    103e:	80 74       	andi	r24, 0x40	; 64
    1040:	90 70       	andi	r25, 0x00	; 0
    1042:	08 2e       	mov	r0, r24
    1044:	89 2f       	mov	r24, r25
    1046:	00 0c       	add	r0, r0
    1048:	88 1f       	adc	r24, r24
    104a:	99 0b       	sbc	r25, r25
    104c:	00 0c       	add	r0, r0
    104e:	88 1f       	adc	r24, r24
    1050:	99 1f       	adc	r25, r25
    1052:	98 2f       	mov	r25, r24
    1054:	80 e0       	ldi	r24, 0x00	; 0
    1056:	66 e0       	ldi	r22, 0x06	; 6
    1058:	49 2f       	mov	r20, r25
    105a:	0e 94 9b 0c 	call	0x1936	; 0x1936 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_DataPin7,(Copy_u8Data&0b10000000)>>7);
    105e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1060:	98 2f       	mov	r25, r24
    1062:	99 1f       	adc	r25, r25
    1064:	99 27       	eor	r25, r25
    1066:	99 1f       	adc	r25, r25
    1068:	80 e0       	ldi	r24, 0x00	; 0
    106a:	67 e0       	ldi	r22, 0x07	; 7
    106c:	49 2f       	mov	r20, r25
    106e:	0e 94 9b 0c 	call	0x1936	; 0x1936 <DIO_u8SetPinValue>

	/*set enable pulse*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_HIGH);
    1072:	81 e0       	ldi	r24, 0x01	; 1
    1074:	62 e0       	ldi	r22, 0x02	; 2
    1076:	41 e0       	ldi	r20, 0x01	; 1
    1078:	0e 94 9b 0c 	call	0x1936	; 0x1936 <DIO_u8SetPinValue>
    107c:	80 e0       	ldi	r24, 0x00	; 0
    107e:	90 e0       	ldi	r25, 0x00	; 0
    1080:	a0 e8       	ldi	r26, 0x80	; 128
    1082:	bf e3       	ldi	r27, 0x3F	; 63
    1084:	89 8f       	std	Y+25, r24	; 0x19
    1086:	9a 8f       	std	Y+26, r25	; 0x1a
    1088:	ab 8f       	std	Y+27, r26	; 0x1b
    108a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    108c:	69 8d       	ldd	r22, Y+25	; 0x19
    108e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1090:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1092:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1094:	20 e0       	ldi	r18, 0x00	; 0
    1096:	30 e0       	ldi	r19, 0x00	; 0
    1098:	4a ef       	ldi	r20, 0xFA	; 250
    109a:	54 e4       	ldi	r21, 0x44	; 68
    109c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10a0:	dc 01       	movw	r26, r24
    10a2:	cb 01       	movw	r24, r22
    10a4:	8d 8b       	std	Y+21, r24	; 0x15
    10a6:	9e 8b       	std	Y+22, r25	; 0x16
    10a8:	af 8b       	std	Y+23, r26	; 0x17
    10aa:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    10ac:	6d 89       	ldd	r22, Y+21	; 0x15
    10ae:	7e 89       	ldd	r23, Y+22	; 0x16
    10b0:	8f 89       	ldd	r24, Y+23	; 0x17
    10b2:	98 8d       	ldd	r25, Y+24	; 0x18
    10b4:	20 e0       	ldi	r18, 0x00	; 0
    10b6:	30 e0       	ldi	r19, 0x00	; 0
    10b8:	40 e8       	ldi	r20, 0x80	; 128
    10ba:	5f e3       	ldi	r21, 0x3F	; 63
    10bc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    10c0:	88 23       	and	r24, r24
    10c2:	2c f4       	brge	.+10     	; 0x10ce <CLCD_voidSendData+0x110>
		__ticks = 1;
    10c4:	81 e0       	ldi	r24, 0x01	; 1
    10c6:	90 e0       	ldi	r25, 0x00	; 0
    10c8:	9c 8b       	std	Y+20, r25	; 0x14
    10ca:	8b 8b       	std	Y+19, r24	; 0x13
    10cc:	3f c0       	rjmp	.+126    	; 0x114c <CLCD_voidSendData+0x18e>
	else if (__tmp > 65535)
    10ce:	6d 89       	ldd	r22, Y+21	; 0x15
    10d0:	7e 89       	ldd	r23, Y+22	; 0x16
    10d2:	8f 89       	ldd	r24, Y+23	; 0x17
    10d4:	98 8d       	ldd	r25, Y+24	; 0x18
    10d6:	20 e0       	ldi	r18, 0x00	; 0
    10d8:	3f ef       	ldi	r19, 0xFF	; 255
    10da:	4f e7       	ldi	r20, 0x7F	; 127
    10dc:	57 e4       	ldi	r21, 0x47	; 71
    10de:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    10e2:	18 16       	cp	r1, r24
    10e4:	4c f5       	brge	.+82     	; 0x1138 <CLCD_voidSendData+0x17a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10e6:	69 8d       	ldd	r22, Y+25	; 0x19
    10e8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    10ea:	8b 8d       	ldd	r24, Y+27	; 0x1b
    10ec:	9c 8d       	ldd	r25, Y+28	; 0x1c
    10ee:	20 e0       	ldi	r18, 0x00	; 0
    10f0:	30 e0       	ldi	r19, 0x00	; 0
    10f2:	40 e2       	ldi	r20, 0x20	; 32
    10f4:	51 e4       	ldi	r21, 0x41	; 65
    10f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10fa:	dc 01       	movw	r26, r24
    10fc:	cb 01       	movw	r24, r22
    10fe:	bc 01       	movw	r22, r24
    1100:	cd 01       	movw	r24, r26
    1102:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1106:	dc 01       	movw	r26, r24
    1108:	cb 01       	movw	r24, r22
    110a:	9c 8b       	std	Y+20, r25	; 0x14
    110c:	8b 8b       	std	Y+19, r24	; 0x13
    110e:	0f c0       	rjmp	.+30     	; 0x112e <CLCD_voidSendData+0x170>
    1110:	88 ec       	ldi	r24, 0xC8	; 200
    1112:	90 e0       	ldi	r25, 0x00	; 0
    1114:	9a 8b       	std	Y+18, r25	; 0x12
    1116:	89 8b       	std	Y+17, r24	; 0x11
    1118:	89 89       	ldd	r24, Y+17	; 0x11
    111a:	9a 89       	ldd	r25, Y+18	; 0x12
    111c:	01 97       	sbiw	r24, 0x01	; 1
    111e:	f1 f7       	brne	.-4      	; 0x111c <CLCD_voidSendData+0x15e>
    1120:	9a 8b       	std	Y+18, r25	; 0x12
    1122:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1124:	8b 89       	ldd	r24, Y+19	; 0x13
    1126:	9c 89       	ldd	r25, Y+20	; 0x14
    1128:	01 97       	sbiw	r24, 0x01	; 1
    112a:	9c 8b       	std	Y+20, r25	; 0x14
    112c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    112e:	8b 89       	ldd	r24, Y+19	; 0x13
    1130:	9c 89       	ldd	r25, Y+20	; 0x14
    1132:	00 97       	sbiw	r24, 0x00	; 0
    1134:	69 f7       	brne	.-38     	; 0x1110 <CLCD_voidSendData+0x152>
    1136:	14 c0       	rjmp	.+40     	; 0x1160 <CLCD_voidSendData+0x1a2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1138:	6d 89       	ldd	r22, Y+21	; 0x15
    113a:	7e 89       	ldd	r23, Y+22	; 0x16
    113c:	8f 89       	ldd	r24, Y+23	; 0x17
    113e:	98 8d       	ldd	r25, Y+24	; 0x18
    1140:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1144:	dc 01       	movw	r26, r24
    1146:	cb 01       	movw	r24, r22
    1148:	9c 8b       	std	Y+20, r25	; 0x14
    114a:	8b 8b       	std	Y+19, r24	; 0x13
    114c:	8b 89       	ldd	r24, Y+19	; 0x13
    114e:	9c 89       	ldd	r25, Y+20	; 0x14
    1150:	98 8b       	std	Y+16, r25	; 0x10
    1152:	8f 87       	std	Y+15, r24	; 0x0f
    1154:	8f 85       	ldd	r24, Y+15	; 0x0f
    1156:	98 89       	ldd	r25, Y+16	; 0x10
    1158:	01 97       	sbiw	r24, 0x01	; 1
    115a:	f1 f7       	brne	.-4      	; 0x1158 <CLCD_voidSendData+0x19a>
    115c:	98 8b       	std	Y+16, r25	; 0x10
    115e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);
    1160:	81 e0       	ldi	r24, 0x01	; 1
    1162:	62 e0       	ldi	r22, 0x02	; 2
    1164:	40 e0       	ldi	r20, 0x00	; 0
    1166:	0e 94 9b 0c 	call	0x1936	; 0x1936 <DIO_u8SetPinValue>


	/*SEND LSB OF COMMAND*/

	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_DataPin4,(Copy_u8Data&0b00000001));
    116a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    116c:	98 2f       	mov	r25, r24
    116e:	91 70       	andi	r25, 0x01	; 1
    1170:	80 e0       	ldi	r24, 0x00	; 0
    1172:	64 e0       	ldi	r22, 0x04	; 4
    1174:	49 2f       	mov	r20, r25
    1176:	0e 94 9b 0c 	call	0x1936	; 0x1936 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_DataPin5,(Copy_u8Data&0b00000010)>>1);
    117a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    117c:	88 2f       	mov	r24, r24
    117e:	90 e0       	ldi	r25, 0x00	; 0
    1180:	82 70       	andi	r24, 0x02	; 2
    1182:	90 70       	andi	r25, 0x00	; 0
    1184:	95 95       	asr	r25
    1186:	87 95       	ror	r24
    1188:	98 2f       	mov	r25, r24
    118a:	80 e0       	ldi	r24, 0x00	; 0
    118c:	65 e0       	ldi	r22, 0x05	; 5
    118e:	49 2f       	mov	r20, r25
    1190:	0e 94 9b 0c 	call	0x1936	; 0x1936 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_DataPin6,(Copy_u8Data&0b00000100)>>2);
    1194:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1196:	88 2f       	mov	r24, r24
    1198:	90 e0       	ldi	r25, 0x00	; 0
    119a:	84 70       	andi	r24, 0x04	; 4
    119c:	90 70       	andi	r25, 0x00	; 0
    119e:	95 95       	asr	r25
    11a0:	87 95       	ror	r24
    11a2:	95 95       	asr	r25
    11a4:	87 95       	ror	r24
    11a6:	98 2f       	mov	r25, r24
    11a8:	80 e0       	ldi	r24, 0x00	; 0
    11aa:	66 e0       	ldi	r22, 0x06	; 6
    11ac:	49 2f       	mov	r20, r25
    11ae:	0e 94 9b 0c 	call	0x1936	; 0x1936 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_DataPin7,(Copy_u8Data&0b00001000)>>3);
    11b2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    11b4:	88 2f       	mov	r24, r24
    11b6:	90 e0       	ldi	r25, 0x00	; 0
    11b8:	88 70       	andi	r24, 0x08	; 8
    11ba:	90 70       	andi	r25, 0x00	; 0
    11bc:	95 95       	asr	r25
    11be:	87 95       	ror	r24
    11c0:	95 95       	asr	r25
    11c2:	87 95       	ror	r24
    11c4:	95 95       	asr	r25
    11c6:	87 95       	ror	r24
    11c8:	98 2f       	mov	r25, r24
    11ca:	80 e0       	ldi	r24, 0x00	; 0
    11cc:	67 e0       	ldi	r22, 0x07	; 7
    11ce:	49 2f       	mov	r20, r25
    11d0:	0e 94 9b 0c 	call	0x1936	; 0x1936 <DIO_u8SetPinValue>

	/*set enable pulse*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_HIGH);
    11d4:	81 e0       	ldi	r24, 0x01	; 1
    11d6:	62 e0       	ldi	r22, 0x02	; 2
    11d8:	41 e0       	ldi	r20, 0x01	; 1
    11da:	0e 94 9b 0c 	call	0x1936	; 0x1936 <DIO_u8SetPinValue>
    11de:	80 e0       	ldi	r24, 0x00	; 0
    11e0:	90 e0       	ldi	r25, 0x00	; 0
    11e2:	a0 e8       	ldi	r26, 0x80	; 128
    11e4:	bf e3       	ldi	r27, 0x3F	; 63
    11e6:	8b 87       	std	Y+11, r24	; 0x0b
    11e8:	9c 87       	std	Y+12, r25	; 0x0c
    11ea:	ad 87       	std	Y+13, r26	; 0x0d
    11ec:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11ee:	6b 85       	ldd	r22, Y+11	; 0x0b
    11f0:	7c 85       	ldd	r23, Y+12	; 0x0c
    11f2:	8d 85       	ldd	r24, Y+13	; 0x0d
    11f4:	9e 85       	ldd	r25, Y+14	; 0x0e
    11f6:	20 e0       	ldi	r18, 0x00	; 0
    11f8:	30 e0       	ldi	r19, 0x00	; 0
    11fa:	4a ef       	ldi	r20, 0xFA	; 250
    11fc:	54 e4       	ldi	r21, 0x44	; 68
    11fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1202:	dc 01       	movw	r26, r24
    1204:	cb 01       	movw	r24, r22
    1206:	8f 83       	std	Y+7, r24	; 0x07
    1208:	98 87       	std	Y+8, r25	; 0x08
    120a:	a9 87       	std	Y+9, r26	; 0x09
    120c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    120e:	6f 81       	ldd	r22, Y+7	; 0x07
    1210:	78 85       	ldd	r23, Y+8	; 0x08
    1212:	89 85       	ldd	r24, Y+9	; 0x09
    1214:	9a 85       	ldd	r25, Y+10	; 0x0a
    1216:	20 e0       	ldi	r18, 0x00	; 0
    1218:	30 e0       	ldi	r19, 0x00	; 0
    121a:	40 e8       	ldi	r20, 0x80	; 128
    121c:	5f e3       	ldi	r21, 0x3F	; 63
    121e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1222:	88 23       	and	r24, r24
    1224:	2c f4       	brge	.+10     	; 0x1230 <CLCD_voidSendData+0x272>
		__ticks = 1;
    1226:	81 e0       	ldi	r24, 0x01	; 1
    1228:	90 e0       	ldi	r25, 0x00	; 0
    122a:	9e 83       	std	Y+6, r25	; 0x06
    122c:	8d 83       	std	Y+5, r24	; 0x05
    122e:	3f c0       	rjmp	.+126    	; 0x12ae <CLCD_voidSendData+0x2f0>
	else if (__tmp > 65535)
    1230:	6f 81       	ldd	r22, Y+7	; 0x07
    1232:	78 85       	ldd	r23, Y+8	; 0x08
    1234:	89 85       	ldd	r24, Y+9	; 0x09
    1236:	9a 85       	ldd	r25, Y+10	; 0x0a
    1238:	20 e0       	ldi	r18, 0x00	; 0
    123a:	3f ef       	ldi	r19, 0xFF	; 255
    123c:	4f e7       	ldi	r20, 0x7F	; 127
    123e:	57 e4       	ldi	r21, 0x47	; 71
    1240:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1244:	18 16       	cp	r1, r24
    1246:	4c f5       	brge	.+82     	; 0x129a <CLCD_voidSendData+0x2dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1248:	6b 85       	ldd	r22, Y+11	; 0x0b
    124a:	7c 85       	ldd	r23, Y+12	; 0x0c
    124c:	8d 85       	ldd	r24, Y+13	; 0x0d
    124e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1250:	20 e0       	ldi	r18, 0x00	; 0
    1252:	30 e0       	ldi	r19, 0x00	; 0
    1254:	40 e2       	ldi	r20, 0x20	; 32
    1256:	51 e4       	ldi	r21, 0x41	; 65
    1258:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    125c:	dc 01       	movw	r26, r24
    125e:	cb 01       	movw	r24, r22
    1260:	bc 01       	movw	r22, r24
    1262:	cd 01       	movw	r24, r26
    1264:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1268:	dc 01       	movw	r26, r24
    126a:	cb 01       	movw	r24, r22
    126c:	9e 83       	std	Y+6, r25	; 0x06
    126e:	8d 83       	std	Y+5, r24	; 0x05
    1270:	0f c0       	rjmp	.+30     	; 0x1290 <CLCD_voidSendData+0x2d2>
    1272:	88 ec       	ldi	r24, 0xC8	; 200
    1274:	90 e0       	ldi	r25, 0x00	; 0
    1276:	9c 83       	std	Y+4, r25	; 0x04
    1278:	8b 83       	std	Y+3, r24	; 0x03
    127a:	8b 81       	ldd	r24, Y+3	; 0x03
    127c:	9c 81       	ldd	r25, Y+4	; 0x04
    127e:	01 97       	sbiw	r24, 0x01	; 1
    1280:	f1 f7       	brne	.-4      	; 0x127e <CLCD_voidSendData+0x2c0>
    1282:	9c 83       	std	Y+4, r25	; 0x04
    1284:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1286:	8d 81       	ldd	r24, Y+5	; 0x05
    1288:	9e 81       	ldd	r25, Y+6	; 0x06
    128a:	01 97       	sbiw	r24, 0x01	; 1
    128c:	9e 83       	std	Y+6, r25	; 0x06
    128e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1290:	8d 81       	ldd	r24, Y+5	; 0x05
    1292:	9e 81       	ldd	r25, Y+6	; 0x06
    1294:	00 97       	sbiw	r24, 0x00	; 0
    1296:	69 f7       	brne	.-38     	; 0x1272 <CLCD_voidSendData+0x2b4>
    1298:	14 c0       	rjmp	.+40     	; 0x12c2 <CLCD_voidSendData+0x304>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    129a:	6f 81       	ldd	r22, Y+7	; 0x07
    129c:	78 85       	ldd	r23, Y+8	; 0x08
    129e:	89 85       	ldd	r24, Y+9	; 0x09
    12a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    12a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12a6:	dc 01       	movw	r26, r24
    12a8:	cb 01       	movw	r24, r22
    12aa:	9e 83       	std	Y+6, r25	; 0x06
    12ac:	8d 83       	std	Y+5, r24	; 0x05
    12ae:	8d 81       	ldd	r24, Y+5	; 0x05
    12b0:	9e 81       	ldd	r25, Y+6	; 0x06
    12b2:	9a 83       	std	Y+2, r25	; 0x02
    12b4:	89 83       	std	Y+1, r24	; 0x01
    12b6:	89 81       	ldd	r24, Y+1	; 0x01
    12b8:	9a 81       	ldd	r25, Y+2	; 0x02
    12ba:	01 97       	sbiw	r24, 0x01	; 1
    12bc:	f1 f7       	brne	.-4      	; 0x12ba <CLCD_voidSendData+0x2fc>
    12be:	9a 83       	std	Y+2, r25	; 0x02
    12c0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);
    12c2:	81 e0       	ldi	r24, 0x01	; 1
    12c4:	62 e0       	ldi	r22, 0x02	; 2
    12c6:	40 e0       	ldi	r20, 0x00	; 0
    12c8:	0e 94 9b 0c 	call	0x1936	; 0x1936 <DIO_u8SetPinValue>

#endif
}
    12cc:	6d 96       	adiw	r28, 0x1d	; 29
    12ce:	0f b6       	in	r0, 0x3f	; 63
    12d0:	f8 94       	cli
    12d2:	de bf       	out	0x3e, r29	; 62
    12d4:	0f be       	out	0x3f, r0	; 63
    12d6:	cd bf       	out	0x3d, r28	; 61
    12d8:	cf 91       	pop	r28
    12da:	df 91       	pop	r29
    12dc:	08 95       	ret

000012de <CLCD_voidsendstring>:


void CLCD_voidsendstring(const char * copy_pcstring)//ascii so char
{
    12de:	df 93       	push	r29
    12e0:	cf 93       	push	r28
    12e2:	00 d0       	rcall	.+0      	; 0x12e4 <CLCD_voidsendstring+0x6>
    12e4:	0f 92       	push	r0
    12e6:	cd b7       	in	r28, 0x3d	; 61
    12e8:	de b7       	in	r29, 0x3e	; 62
    12ea:	9b 83       	std	Y+3, r25	; 0x03
    12ec:	8a 83       	std	Y+2, r24	; 0x02
	u8 i=0 ;
    12ee:	19 82       	std	Y+1, r1	; 0x01
    12f0:	15 c0       	rjmp	.+42     	; 0x131c <CLCD_voidsendstring+0x3e>

	/*set command for data pins*/
	while(copy_pcstring[i] !='\0')
	{
		if (i==16)  //to move to the second row
    12f2:	89 81       	ldd	r24, Y+1	; 0x01
    12f4:	80 31       	cpi	r24, 0x10	; 16
    12f6:	21 f4       	brne	.+8      	; 0x1300 <CLCD_voidsendstring+0x22>
		{
			CLCD_voidGoToXY(1,0);
    12f8:	81 e0       	ldi	r24, 0x01	; 1
    12fa:	60 e0       	ldi	r22, 0x00	; 0
    12fc:	0e 94 09 0b 	call	0x1612	; 0x1612 <CLCD_voidGoToXY>
		}
		CLCD_voidSendData(copy_pcstring[i]);
    1300:	89 81       	ldd	r24, Y+1	; 0x01
    1302:	28 2f       	mov	r18, r24
    1304:	30 e0       	ldi	r19, 0x00	; 0
    1306:	8a 81       	ldd	r24, Y+2	; 0x02
    1308:	9b 81       	ldd	r25, Y+3	; 0x03
    130a:	fc 01       	movw	r30, r24
    130c:	e2 0f       	add	r30, r18
    130e:	f3 1f       	adc	r31, r19
    1310:	80 81       	ld	r24, Z
    1312:	0e 94 df 07 	call	0xfbe	; 0xfbe <CLCD_voidSendData>
		i++;
    1316:	89 81       	ldd	r24, Y+1	; 0x01
    1318:	8f 5f       	subi	r24, 0xFF	; 255
    131a:	89 83       	std	Y+1, r24	; 0x01
void CLCD_voidsendstring(const char * copy_pcstring)//ascii so char
{
	u8 i=0 ;

	/*set command for data pins*/
	while(copy_pcstring[i] !='\0')
    131c:	89 81       	ldd	r24, Y+1	; 0x01
    131e:	28 2f       	mov	r18, r24
    1320:	30 e0       	ldi	r19, 0x00	; 0
    1322:	8a 81       	ldd	r24, Y+2	; 0x02
    1324:	9b 81       	ldd	r25, Y+3	; 0x03
    1326:	fc 01       	movw	r30, r24
    1328:	e2 0f       	add	r30, r18
    132a:	f3 1f       	adc	r31, r19
    132c:	80 81       	ld	r24, Z
    132e:	88 23       	and	r24, r24
    1330:	01 f7       	brne	.-64     	; 0x12f2 <CLCD_voidsendstring+0x14>
			CLCD_voidGoToXY(1,0);
		}
		CLCD_voidSendData(copy_pcstring[i]);
		i++;
	}
}
    1332:	0f 90       	pop	r0
    1334:	0f 90       	pop	r0
    1336:	0f 90       	pop	r0
    1338:	cf 91       	pop	r28
    133a:	df 91       	pop	r29
    133c:	08 95       	ret

0000133e <CLCD_voidInit_BitMode>:
void CLCD_voidInit_BitMode(void)
{
    133e:	df 93       	push	r29
    1340:	cf 93       	push	r28
    1342:	cd b7       	in	r28, 0x3d	; 61
    1344:	de b7       	in	r29, 0x3e	; 62
    1346:	a6 97       	sbiw	r28, 0x26	; 38
    1348:	0f b6       	in	r0, 0x3f	; 63
    134a:	f8 94       	cli
    134c:	de bf       	out	0x3e, r29	; 62
    134e:	0f be       	out	0x3f, r0	; 63
    1350:	cd bf       	out	0x3d, r28	; 61
    1352:	80 e0       	ldi	r24, 0x00	; 0
    1354:	90 e0       	ldi	r25, 0x00	; 0
    1356:	a0 e2       	ldi	r26, 0x20	; 32
    1358:	b2 e4       	ldi	r27, 0x42	; 66
    135a:	8b a3       	std	Y+35, r24	; 0x23
    135c:	9c a3       	std	Y+36, r25	; 0x24
    135e:	ad a3       	std	Y+37, r26	; 0x25
    1360:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1362:	6b a1       	ldd	r22, Y+35	; 0x23
    1364:	7c a1       	ldd	r23, Y+36	; 0x24
    1366:	8d a1       	ldd	r24, Y+37	; 0x25
    1368:	9e a1       	ldd	r25, Y+38	; 0x26
    136a:	20 e0       	ldi	r18, 0x00	; 0
    136c:	30 e0       	ldi	r19, 0x00	; 0
    136e:	4a ef       	ldi	r20, 0xFA	; 250
    1370:	54 e4       	ldi	r21, 0x44	; 68
    1372:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1376:	dc 01       	movw	r26, r24
    1378:	cb 01       	movw	r24, r22
    137a:	8f 8f       	std	Y+31, r24	; 0x1f
    137c:	98 a3       	std	Y+32, r25	; 0x20
    137e:	a9 a3       	std	Y+33, r26	; 0x21
    1380:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    1382:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1384:	78 a1       	ldd	r23, Y+32	; 0x20
    1386:	89 a1       	ldd	r24, Y+33	; 0x21
    1388:	9a a1       	ldd	r25, Y+34	; 0x22
    138a:	20 e0       	ldi	r18, 0x00	; 0
    138c:	30 e0       	ldi	r19, 0x00	; 0
    138e:	40 e8       	ldi	r20, 0x80	; 128
    1390:	5f e3       	ldi	r21, 0x3F	; 63
    1392:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1396:	88 23       	and	r24, r24
    1398:	2c f4       	brge	.+10     	; 0x13a4 <CLCD_voidInit_BitMode+0x66>
		__ticks = 1;
    139a:	81 e0       	ldi	r24, 0x01	; 1
    139c:	90 e0       	ldi	r25, 0x00	; 0
    139e:	9e 8f       	std	Y+30, r25	; 0x1e
    13a0:	8d 8f       	std	Y+29, r24	; 0x1d
    13a2:	3f c0       	rjmp	.+126    	; 0x1422 <CLCD_voidInit_BitMode+0xe4>
	else if (__tmp > 65535)
    13a4:	6f 8d       	ldd	r22, Y+31	; 0x1f
    13a6:	78 a1       	ldd	r23, Y+32	; 0x20
    13a8:	89 a1       	ldd	r24, Y+33	; 0x21
    13aa:	9a a1       	ldd	r25, Y+34	; 0x22
    13ac:	20 e0       	ldi	r18, 0x00	; 0
    13ae:	3f ef       	ldi	r19, 0xFF	; 255
    13b0:	4f e7       	ldi	r20, 0x7F	; 127
    13b2:	57 e4       	ldi	r21, 0x47	; 71
    13b4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    13b8:	18 16       	cp	r1, r24
    13ba:	4c f5       	brge	.+82     	; 0x140e <CLCD_voidInit_BitMode+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13bc:	6b a1       	ldd	r22, Y+35	; 0x23
    13be:	7c a1       	ldd	r23, Y+36	; 0x24
    13c0:	8d a1       	ldd	r24, Y+37	; 0x25
    13c2:	9e a1       	ldd	r25, Y+38	; 0x26
    13c4:	20 e0       	ldi	r18, 0x00	; 0
    13c6:	30 e0       	ldi	r19, 0x00	; 0
    13c8:	40 e2       	ldi	r20, 0x20	; 32
    13ca:	51 e4       	ldi	r21, 0x41	; 65
    13cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13d0:	dc 01       	movw	r26, r24
    13d2:	cb 01       	movw	r24, r22
    13d4:	bc 01       	movw	r22, r24
    13d6:	cd 01       	movw	r24, r26
    13d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13dc:	dc 01       	movw	r26, r24
    13de:	cb 01       	movw	r24, r22
    13e0:	9e 8f       	std	Y+30, r25	; 0x1e
    13e2:	8d 8f       	std	Y+29, r24	; 0x1d
    13e4:	0f c0       	rjmp	.+30     	; 0x1404 <CLCD_voidInit_BitMode+0xc6>
    13e6:	88 ec       	ldi	r24, 0xC8	; 200
    13e8:	90 e0       	ldi	r25, 0x00	; 0
    13ea:	9c 8f       	std	Y+28, r25	; 0x1c
    13ec:	8b 8f       	std	Y+27, r24	; 0x1b
    13ee:	8b 8d       	ldd	r24, Y+27	; 0x1b
    13f0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    13f2:	01 97       	sbiw	r24, 0x01	; 1
    13f4:	f1 f7       	brne	.-4      	; 0x13f2 <CLCD_voidInit_BitMode+0xb4>
    13f6:	9c 8f       	std	Y+28, r25	; 0x1c
    13f8:	8b 8f       	std	Y+27, r24	; 0x1b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13fa:	8d 8d       	ldd	r24, Y+29	; 0x1d
    13fc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    13fe:	01 97       	sbiw	r24, 0x01	; 1
    1400:	9e 8f       	std	Y+30, r25	; 0x1e
    1402:	8d 8f       	std	Y+29, r24	; 0x1d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1404:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1406:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1408:	00 97       	sbiw	r24, 0x00	; 0
    140a:	69 f7       	brne	.-38     	; 0x13e6 <CLCD_voidInit_BitMode+0xa8>
    140c:	14 c0       	rjmp	.+40     	; 0x1436 <CLCD_voidInit_BitMode+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    140e:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1410:	78 a1       	ldd	r23, Y+32	; 0x20
    1412:	89 a1       	ldd	r24, Y+33	; 0x21
    1414:	9a a1       	ldd	r25, Y+34	; 0x22
    1416:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    141a:	dc 01       	movw	r26, r24
    141c:	cb 01       	movw	r24, r22
    141e:	9e 8f       	std	Y+30, r25	; 0x1e
    1420:	8d 8f       	std	Y+29, r24	; 0x1d
    1422:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1424:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1426:	9a 8f       	std	Y+26, r25	; 0x1a
    1428:	89 8f       	std	Y+25, r24	; 0x19
    142a:	89 8d       	ldd	r24, Y+25	; 0x19
    142c:	9a 8d       	ldd	r25, Y+26	; 0x1a
    142e:	01 97       	sbiw	r24, 0x01	; 1
    1430:	f1 f7       	brne	.-4      	; 0x142e <CLCD_voidInit_BitMode+0xf0>
    1432:	9a 8f       	std	Y+26, r25	; 0x1a
    1434:	89 8f       	std	Y+25, r24	; 0x19
	CLCD_voidSendCommand(1);
#endif

#if MODE == FOUR_BIT
	/*Function set command : 2 lines , 5*8 font size*/
	CLCD_voidSendCommand(0b00100010);
    1436:	82 e2       	ldi	r24, 0x22	; 34
    1438:	0e 94 4f 06 	call	0xc9e	; 0xc9e <CLCD_voidSendCommand>
	//CLCD_voidSendCommand(0b10000000);
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_DataPin4,0);
    143c:	80 e0       	ldi	r24, 0x00	; 0
    143e:	64 e0       	ldi	r22, 0x04	; 4
    1440:	40 e0       	ldi	r20, 0x00	; 0
    1442:	0e 94 9b 0c 	call	0x1936	; 0x1936 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_DataPin5,0);
    1446:	80 e0       	ldi	r24, 0x00	; 0
    1448:	65 e0       	ldi	r22, 0x05	; 5
    144a:	40 e0       	ldi	r20, 0x00	; 0
    144c:	0e 94 9b 0c 	call	0x1936	; 0x1936 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_DataPin6,0);
    1450:	80 e0       	ldi	r24, 0x00	; 0
    1452:	66 e0       	ldi	r22, 0x06	; 6
    1454:	40 e0       	ldi	r20, 0x00	; 0
    1456:	0e 94 9b 0c 	call	0x1936	; 0x1936 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_DataPin7,1);
    145a:	80 e0       	ldi	r24, 0x00	; 0
    145c:	67 e0       	ldi	r22, 0x07	; 7
    145e:	41 e0       	ldi	r20, 0x01	; 1
    1460:	0e 94 9b 0c 	call	0x1936	; 0x1936 <DIO_u8SetPinValue>

	//set enable pulse
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_HIGH);
    1464:	81 e0       	ldi	r24, 0x01	; 1
    1466:	62 e0       	ldi	r22, 0x02	; 2
    1468:	41 e0       	ldi	r20, 0x01	; 1
    146a:	0e 94 9b 0c 	call	0x1936	; 0x1936 <DIO_u8SetPinValue>
    146e:	80 e0       	ldi	r24, 0x00	; 0
    1470:	90 e0       	ldi	r25, 0x00	; 0
    1472:	a0 e2       	ldi	r26, 0x20	; 32
    1474:	b2 e4       	ldi	r27, 0x42	; 66
    1476:	8d 8b       	std	Y+21, r24	; 0x15
    1478:	9e 8b       	std	Y+22, r25	; 0x16
    147a:	af 8b       	std	Y+23, r26	; 0x17
    147c:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    147e:	6d 89       	ldd	r22, Y+21	; 0x15
    1480:	7e 89       	ldd	r23, Y+22	; 0x16
    1482:	8f 89       	ldd	r24, Y+23	; 0x17
    1484:	98 8d       	ldd	r25, Y+24	; 0x18
    1486:	2b ea       	ldi	r18, 0xAB	; 171
    1488:	3a ea       	ldi	r19, 0xAA	; 170
    148a:	4a e2       	ldi	r20, 0x2A	; 42
    148c:	50 e4       	ldi	r21, 0x40	; 64
    148e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1492:	dc 01       	movw	r26, r24
    1494:	cb 01       	movw	r24, r22
    1496:	89 8b       	std	Y+17, r24	; 0x11
    1498:	9a 8b       	std	Y+18, r25	; 0x12
    149a:	ab 8b       	std	Y+19, r26	; 0x13
    149c:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    149e:	69 89       	ldd	r22, Y+17	; 0x11
    14a0:	7a 89       	ldd	r23, Y+18	; 0x12
    14a2:	8b 89       	ldd	r24, Y+19	; 0x13
    14a4:	9c 89       	ldd	r25, Y+20	; 0x14
    14a6:	20 e0       	ldi	r18, 0x00	; 0
    14a8:	30 e0       	ldi	r19, 0x00	; 0
    14aa:	40 e8       	ldi	r20, 0x80	; 128
    14ac:	5f e3       	ldi	r21, 0x3F	; 63
    14ae:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    14b2:	88 23       	and	r24, r24
    14b4:	1c f4       	brge	.+6      	; 0x14bc <CLCD_voidInit_BitMode+0x17e>
		__ticks = 1;
    14b6:	81 e0       	ldi	r24, 0x01	; 1
    14b8:	88 8b       	std	Y+16, r24	; 0x10
    14ba:	91 c0       	rjmp	.+290    	; 0x15de <CLCD_voidInit_BitMode+0x2a0>
	else if (__tmp > 255)
    14bc:	69 89       	ldd	r22, Y+17	; 0x11
    14be:	7a 89       	ldd	r23, Y+18	; 0x12
    14c0:	8b 89       	ldd	r24, Y+19	; 0x13
    14c2:	9c 89       	ldd	r25, Y+20	; 0x14
    14c4:	20 e0       	ldi	r18, 0x00	; 0
    14c6:	30 e0       	ldi	r19, 0x00	; 0
    14c8:	4f e7       	ldi	r20, 0x7F	; 127
    14ca:	53 e4       	ldi	r21, 0x43	; 67
    14cc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    14d0:	18 16       	cp	r1, r24
    14d2:	0c f0       	brlt	.+2      	; 0x14d6 <CLCD_voidInit_BitMode+0x198>
    14d4:	7b c0       	rjmp	.+246    	; 0x15cc <CLCD_voidInit_BitMode+0x28e>
	{
		_delay_ms(__us / 1000.0);
    14d6:	6d 89       	ldd	r22, Y+21	; 0x15
    14d8:	7e 89       	ldd	r23, Y+22	; 0x16
    14da:	8f 89       	ldd	r24, Y+23	; 0x17
    14dc:	98 8d       	ldd	r25, Y+24	; 0x18
    14de:	20 e0       	ldi	r18, 0x00	; 0
    14e0:	30 e0       	ldi	r19, 0x00	; 0
    14e2:	4a e7       	ldi	r20, 0x7A	; 122
    14e4:	54 e4       	ldi	r21, 0x44	; 68
    14e6:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    14ea:	dc 01       	movw	r26, r24
    14ec:	cb 01       	movw	r24, r22
    14ee:	8c 87       	std	Y+12, r24	; 0x0c
    14f0:	9d 87       	std	Y+13, r25	; 0x0d
    14f2:	ae 87       	std	Y+14, r26	; 0x0e
    14f4:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14f6:	6c 85       	ldd	r22, Y+12	; 0x0c
    14f8:	7d 85       	ldd	r23, Y+13	; 0x0d
    14fa:	8e 85       	ldd	r24, Y+14	; 0x0e
    14fc:	9f 85       	ldd	r25, Y+15	; 0x0f
    14fe:	20 e0       	ldi	r18, 0x00	; 0
    1500:	30 e0       	ldi	r19, 0x00	; 0
    1502:	4a ef       	ldi	r20, 0xFA	; 250
    1504:	54 e4       	ldi	r21, 0x44	; 68
    1506:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    150a:	dc 01       	movw	r26, r24
    150c:	cb 01       	movw	r24, r22
    150e:	88 87       	std	Y+8, r24	; 0x08
    1510:	99 87       	std	Y+9, r25	; 0x09
    1512:	aa 87       	std	Y+10, r26	; 0x0a
    1514:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1516:	68 85       	ldd	r22, Y+8	; 0x08
    1518:	79 85       	ldd	r23, Y+9	; 0x09
    151a:	8a 85       	ldd	r24, Y+10	; 0x0a
    151c:	9b 85       	ldd	r25, Y+11	; 0x0b
    151e:	20 e0       	ldi	r18, 0x00	; 0
    1520:	30 e0       	ldi	r19, 0x00	; 0
    1522:	40 e8       	ldi	r20, 0x80	; 128
    1524:	5f e3       	ldi	r21, 0x3F	; 63
    1526:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    152a:	88 23       	and	r24, r24
    152c:	2c f4       	brge	.+10     	; 0x1538 <CLCD_voidInit_BitMode+0x1fa>
		__ticks = 1;
    152e:	81 e0       	ldi	r24, 0x01	; 1
    1530:	90 e0       	ldi	r25, 0x00	; 0
    1532:	9f 83       	std	Y+7, r25	; 0x07
    1534:	8e 83       	std	Y+6, r24	; 0x06
    1536:	3f c0       	rjmp	.+126    	; 0x15b6 <CLCD_voidInit_BitMode+0x278>
	else if (__tmp > 65535)
    1538:	68 85       	ldd	r22, Y+8	; 0x08
    153a:	79 85       	ldd	r23, Y+9	; 0x09
    153c:	8a 85       	ldd	r24, Y+10	; 0x0a
    153e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1540:	20 e0       	ldi	r18, 0x00	; 0
    1542:	3f ef       	ldi	r19, 0xFF	; 255
    1544:	4f e7       	ldi	r20, 0x7F	; 127
    1546:	57 e4       	ldi	r21, 0x47	; 71
    1548:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    154c:	18 16       	cp	r1, r24
    154e:	4c f5       	brge	.+82     	; 0x15a2 <CLCD_voidInit_BitMode+0x264>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1550:	6c 85       	ldd	r22, Y+12	; 0x0c
    1552:	7d 85       	ldd	r23, Y+13	; 0x0d
    1554:	8e 85       	ldd	r24, Y+14	; 0x0e
    1556:	9f 85       	ldd	r25, Y+15	; 0x0f
    1558:	20 e0       	ldi	r18, 0x00	; 0
    155a:	30 e0       	ldi	r19, 0x00	; 0
    155c:	40 e2       	ldi	r20, 0x20	; 32
    155e:	51 e4       	ldi	r21, 0x41	; 65
    1560:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1564:	dc 01       	movw	r26, r24
    1566:	cb 01       	movw	r24, r22
    1568:	bc 01       	movw	r22, r24
    156a:	cd 01       	movw	r24, r26
    156c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1570:	dc 01       	movw	r26, r24
    1572:	cb 01       	movw	r24, r22
    1574:	9f 83       	std	Y+7, r25	; 0x07
    1576:	8e 83       	std	Y+6, r24	; 0x06
    1578:	0f c0       	rjmp	.+30     	; 0x1598 <CLCD_voidInit_BitMode+0x25a>
    157a:	88 ec       	ldi	r24, 0xC8	; 200
    157c:	90 e0       	ldi	r25, 0x00	; 0
    157e:	9d 83       	std	Y+5, r25	; 0x05
    1580:	8c 83       	std	Y+4, r24	; 0x04
    1582:	8c 81       	ldd	r24, Y+4	; 0x04
    1584:	9d 81       	ldd	r25, Y+5	; 0x05
    1586:	01 97       	sbiw	r24, 0x01	; 1
    1588:	f1 f7       	brne	.-4      	; 0x1586 <CLCD_voidInit_BitMode+0x248>
    158a:	9d 83       	std	Y+5, r25	; 0x05
    158c:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    158e:	8e 81       	ldd	r24, Y+6	; 0x06
    1590:	9f 81       	ldd	r25, Y+7	; 0x07
    1592:	01 97       	sbiw	r24, 0x01	; 1
    1594:	9f 83       	std	Y+7, r25	; 0x07
    1596:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1598:	8e 81       	ldd	r24, Y+6	; 0x06
    159a:	9f 81       	ldd	r25, Y+7	; 0x07
    159c:	00 97       	sbiw	r24, 0x00	; 0
    159e:	69 f7       	brne	.-38     	; 0x157a <CLCD_voidInit_BitMode+0x23c>
    15a0:	24 c0       	rjmp	.+72     	; 0x15ea <CLCD_voidInit_BitMode+0x2ac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15a2:	68 85       	ldd	r22, Y+8	; 0x08
    15a4:	79 85       	ldd	r23, Y+9	; 0x09
    15a6:	8a 85       	ldd	r24, Y+10	; 0x0a
    15a8:	9b 85       	ldd	r25, Y+11	; 0x0b
    15aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15ae:	dc 01       	movw	r26, r24
    15b0:	cb 01       	movw	r24, r22
    15b2:	9f 83       	std	Y+7, r25	; 0x07
    15b4:	8e 83       	std	Y+6, r24	; 0x06
    15b6:	8e 81       	ldd	r24, Y+6	; 0x06
    15b8:	9f 81       	ldd	r25, Y+7	; 0x07
    15ba:	9b 83       	std	Y+3, r25	; 0x03
    15bc:	8a 83       	std	Y+2, r24	; 0x02
    15be:	8a 81       	ldd	r24, Y+2	; 0x02
    15c0:	9b 81       	ldd	r25, Y+3	; 0x03
    15c2:	01 97       	sbiw	r24, 0x01	; 1
    15c4:	f1 f7       	brne	.-4      	; 0x15c2 <CLCD_voidInit_BitMode+0x284>
    15c6:	9b 83       	std	Y+3, r25	; 0x03
    15c8:	8a 83       	std	Y+2, r24	; 0x02
    15ca:	0f c0       	rjmp	.+30     	; 0x15ea <CLCD_voidInit_BitMode+0x2ac>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    15cc:	69 89       	ldd	r22, Y+17	; 0x11
    15ce:	7a 89       	ldd	r23, Y+18	; 0x12
    15d0:	8b 89       	ldd	r24, Y+19	; 0x13
    15d2:	9c 89       	ldd	r25, Y+20	; 0x14
    15d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15d8:	dc 01       	movw	r26, r24
    15da:	cb 01       	movw	r24, r22
    15dc:	88 8b       	std	Y+16, r24	; 0x10
    15de:	88 89       	ldd	r24, Y+16	; 0x10
    15e0:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    15e2:	89 81       	ldd	r24, Y+1	; 0x01
    15e4:	8a 95       	dec	r24
    15e6:	f1 f7       	brne	.-4      	; 0x15e4 <CLCD_voidInit_BitMode+0x2a6>
    15e8:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(40);
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);
    15ea:	81 e0       	ldi	r24, 0x01	; 1
    15ec:	62 e0       	ldi	r22, 0x02	; 2
    15ee:	40 e0       	ldi	r20, 0x00	; 0
    15f0:	0e 94 9b 0c 	call	0x1936	; 0x1936 <DIO_u8SetPinValue>
#if Cursor == Cursor_ON
	CLCD_voidSendCommand(0b00001111);

#elif Cursor == Cursor_OFF

	CLCD_voidSendCommand(0b00001100);
    15f4:	8c e0       	ldi	r24, 0x0C	; 12
    15f6:	0e 94 4f 06 	call	0xc9e	; 0xc9e <CLCD_voidSendCommand>

#endif
	/*Clear display*/
	CLCD_voidSendCommand(1);
    15fa:	81 e0       	ldi	r24, 0x01	; 1
    15fc:	0e 94 4f 06 	call	0xc9e	; 0xc9e <CLCD_voidSendCommand>

#endif
}
    1600:	a6 96       	adiw	r28, 0x26	; 38
    1602:	0f b6       	in	r0, 0x3f	; 63
    1604:	f8 94       	cli
    1606:	de bf       	out	0x3e, r29	; 62
    1608:	0f be       	out	0x3f, r0	; 63
    160a:	cd bf       	out	0x3d, r28	; 61
    160c:	cf 91       	pop	r28
    160e:	df 91       	pop	r29
    1610:	08 95       	ret

00001612 <CLCD_voidGoToXY>:


void CLCD_voidGoToXY(u8 Copy_u8Xpos, u8 Copy_u8Ypos)
{
    1612:	df 93       	push	r29
    1614:	cf 93       	push	r28
    1616:	00 d0       	rcall	.+0      	; 0x1618 <CLCD_voidGoToXY+0x6>
    1618:	0f 92       	push	r0
    161a:	cd b7       	in	r28, 0x3d	; 61
    161c:	de b7       	in	r29, 0x3e	; 62
    161e:	8a 83       	std	Y+2, r24	; 0x02
    1620:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8adress;
	if(Copy_u8Xpos==0)
    1622:	8a 81       	ldd	r24, Y+2	; 0x02
    1624:	88 23       	and	r24, r24
    1626:	19 f4       	brne	.+6      	; 0x162e <CLCD_voidGoToXY+0x1c>
	{
		/*location for first line*/
		Local_u8adress=Copy_u8Ypos;
    1628:	8b 81       	ldd	r24, Y+3	; 0x03
    162a:	89 83       	std	Y+1, r24	; 0x01
    162c:	06 c0       	rjmp	.+12     	; 0x163a <CLCD_voidGoToXY+0x28>
	}
	else if (Copy_u8Xpos==1)
    162e:	8a 81       	ldd	r24, Y+2	; 0x02
    1630:	81 30       	cpi	r24, 0x01	; 1
    1632:	19 f4       	brne	.+6      	; 0x163a <CLCD_voidGoToXY+0x28>
	{
		/*location for second line*/
		Local_u8adress=Copy_u8Ypos+0x40;
    1634:	8b 81       	ldd	r24, Y+3	; 0x03
    1636:	80 5c       	subi	r24, 0xC0	; 192
    1638:	89 83       	std	Y+1, r24	; 0x01
	}
	CLCD_voidSendCommand(Local_u8adress+128);//to make the 8 bit = 1 in DDRAM Address Command data sheet page 16
    163a:	89 81       	ldd	r24, Y+1	; 0x01
    163c:	80 58       	subi	r24, 0x80	; 128
    163e:	0e 94 4f 06 	call	0xc9e	; 0xc9e <CLCD_voidSendCommand>
}
    1642:	0f 90       	pop	r0
    1644:	0f 90       	pop	r0
    1646:	0f 90       	pop	r0
    1648:	cf 91       	pop	r28
    164a:	df 91       	pop	r29
    164c:	08 95       	ret

0000164e <CLCD_voidWriteSpecialCharacter>:

void CLCD_voidWriteSpecialCharacter(u8 * copy_pu8pattern,u8 copy_u8patternNumber,u8 copy_u8XPos,u8 copy_u8YPos)
{
    164e:	df 93       	push	r29
    1650:	cf 93       	push	r28
    1652:	cd b7       	in	r28, 0x3d	; 61
    1654:	de b7       	in	r29, 0x3e	; 62
    1656:	27 97       	sbiw	r28, 0x07	; 7
    1658:	0f b6       	in	r0, 0x3f	; 63
    165a:	f8 94       	cli
    165c:	de bf       	out	0x3e, r29	; 62
    165e:	0f be       	out	0x3f, r0	; 63
    1660:	cd bf       	out	0x3d, r28	; 61
    1662:	9c 83       	std	Y+4, r25	; 0x04
    1664:	8b 83       	std	Y+3, r24	; 0x03
    1666:	6d 83       	std	Y+5, r22	; 0x05
    1668:	4e 83       	std	Y+6, r20	; 0x06
    166a:	2f 83       	std	Y+7, r18	; 0x07

	/*calculate CGRAM address whose each block is 8 bytes*/
	u8 Local_u8CGRAMaddress , Local_u8Iterator;
	Local_u8CGRAMaddress=copy_u8patternNumber*8;
    166c:	8d 81       	ldd	r24, Y+5	; 0x05
    166e:	88 2f       	mov	r24, r24
    1670:	90 e0       	ldi	r25, 0x00	; 0
    1672:	88 0f       	add	r24, r24
    1674:	99 1f       	adc	r25, r25
    1676:	88 0f       	add	r24, r24
    1678:	99 1f       	adc	r25, r25
    167a:	88 0f       	add	r24, r24
    167c:	99 1f       	adc	r25, r25
    167e:	8a 83       	std	Y+2, r24	; 0x02
	/*send CGRAM address command to LCD,with setting set 6 , clearing bit 7 */
	CLCD_voidSendCommand(Local_u8CGRAMaddress+64);
    1680:	8a 81       	ldd	r24, Y+2	; 0x02
    1682:	80 5c       	subi	r24, 0xC0	; 192
    1684:	0e 94 4f 06 	call	0xc9e	; 0xc9e <CLCD_voidSendCommand>

	/*write the pattern into CGRAM*/
	for (Local_u8Iterator=0;Local_u8Iterator<8;Local_u8Iterator++)
    1688:	19 82       	std	Y+1, r1	; 0x01
    168a:	0e c0       	rjmp	.+28     	; 0x16a8 <CLCD_voidWriteSpecialCharacter+0x5a>
	{

		CLCD_voidSendData(copy_pu8pattern[Local_u8Iterator]);
    168c:	89 81       	ldd	r24, Y+1	; 0x01
    168e:	28 2f       	mov	r18, r24
    1690:	30 e0       	ldi	r19, 0x00	; 0
    1692:	8b 81       	ldd	r24, Y+3	; 0x03
    1694:	9c 81       	ldd	r25, Y+4	; 0x04
    1696:	fc 01       	movw	r30, r24
    1698:	e2 0f       	add	r30, r18
    169a:	f3 1f       	adc	r31, r19
    169c:	80 81       	ld	r24, Z
    169e:	0e 94 df 07 	call	0xfbe	; 0xfbe <CLCD_voidSendData>
	Local_u8CGRAMaddress=copy_u8patternNumber*8;
	/*send CGRAM address command to LCD,with setting set 6 , clearing bit 7 */
	CLCD_voidSendCommand(Local_u8CGRAMaddress+64);

	/*write the pattern into CGRAM*/
	for (Local_u8Iterator=0;Local_u8Iterator<8;Local_u8Iterator++)
    16a2:	89 81       	ldd	r24, Y+1	; 0x01
    16a4:	8f 5f       	subi	r24, 0xFF	; 255
    16a6:	89 83       	std	Y+1, r24	; 0x01
    16a8:	89 81       	ldd	r24, Y+1	; 0x01
    16aa:	88 30       	cpi	r24, 0x08	; 8
    16ac:	78 f3       	brcs	.-34     	; 0x168c <CLCD_voidWriteSpecialCharacter+0x3e>

		CLCD_voidSendData(copy_pu8pattern[Local_u8Iterator]);
	}

	/*go back to the DDRAM to display the pattern*/
	CLCD_voidGoToXY(copy_u8XPos,copy_u8YPos);
    16ae:	8e 81       	ldd	r24, Y+6	; 0x06
    16b0:	6f 81       	ldd	r22, Y+7	; 0x07
    16b2:	0e 94 09 0b 	call	0x1612	; 0x1612 <CLCD_voidGoToXY>

	/*display  the pattern written in the CGRAM */
	CLCD_voidSendData(copy_u8patternNumber/*value from 0 to 7 will make DDRAM understand that she must get a value from CGRAM*/);
    16b6:	8d 81       	ldd	r24, Y+5	; 0x05
    16b8:	0e 94 df 07 	call	0xfbe	; 0xfbe <CLCD_voidSendData>
}
    16bc:	27 96       	adiw	r28, 0x07	; 7
    16be:	0f b6       	in	r0, 0x3f	; 63
    16c0:	f8 94       	cli
    16c2:	de bf       	out	0x3e, r29	; 62
    16c4:	0f be       	out	0x3f, r0	; 63
    16c6:	cd bf       	out	0x3d, r28	; 61
    16c8:	cf 91       	pop	r28
    16ca:	df 91       	pop	r29
    16cc:	08 95       	ret

000016ce <CLCD_voidwriteNumber>:


void CLCD_voidwriteNumber(u32 copy_u32Number)
{
    16ce:	0f 93       	push	r16
    16d0:	1f 93       	push	r17
    16d2:	df 93       	push	r29
    16d4:	cf 93       	push	r28
    16d6:	cd b7       	in	r28, 0x3d	; 61
    16d8:	de b7       	in	r29, 0x3e	; 62
    16da:	60 97       	sbiw	r28, 0x10	; 16
    16dc:	0f b6       	in	r0, 0x3f	; 63
    16de:	f8 94       	cli
    16e0:	de bf       	out	0x3e, r29	; 62
    16e2:	0f be       	out	0x3f, r0	; 63
    16e4:	cd bf       	out	0x3d, r28	; 61
    16e6:	6b 87       	std	Y+11, r22	; 0x0b
    16e8:	7c 87       	std	Y+12, r23	; 0x0c
    16ea:	8d 87       	std	Y+13, r24	; 0x0d
    16ec:	9e 87       	std	Y+14, r25	; 0x0e
	u8 arr[8],i,Local_u8Iterator;

	i=7;
    16ee:	87 e0       	ldi	r24, 0x07	; 7
    16f0:	8a 83       	std	Y+2, r24	; 0x02
	for (Local_u8Iterator=0;Local_u8Iterator<8;Local_u8Iterator++)
    16f2:	19 82       	std	Y+1, r1	; 0x01
    16f4:	5b c0       	rjmp	.+182    	; 0x17ac <CLCD_voidwriteNumber+0xde>
	{
		if (copy_u32Number<10)
    16f6:	8b 85       	ldd	r24, Y+11	; 0x0b
    16f8:	9c 85       	ldd	r25, Y+12	; 0x0c
    16fa:	ad 85       	ldd	r26, Y+13	; 0x0d
    16fc:	be 85       	ldd	r27, Y+14	; 0x0e
    16fe:	8a 30       	cpi	r24, 0x0A	; 10
    1700:	91 05       	cpc	r25, r1
    1702:	a1 05       	cpc	r26, r1
    1704:	b1 05       	cpc	r27, r1
    1706:	58 f4       	brcc	.+22     	; 0x171e <CLCD_voidwriteNumber+0x50>
		{
			arr[i]=copy_u32Number;
    1708:	8a 81       	ldd	r24, Y+2	; 0x02
    170a:	28 2f       	mov	r18, r24
    170c:	30 e0       	ldi	r19, 0x00	; 0
    170e:	4b 85       	ldd	r20, Y+11	; 0x0b
    1710:	ce 01       	movw	r24, r28
    1712:	03 96       	adiw	r24, 0x03	; 3
    1714:	fc 01       	movw	r30, r24
    1716:	e2 0f       	add	r30, r18
    1718:	f3 1f       	adc	r31, r19
    171a:	40 83       	st	Z, r20
    171c:	4b c0       	rjmp	.+150    	; 0x17b4 <CLCD_voidwriteNumber+0xe6>
			break;
		}
		arr[i]=copy_u32Number%10;
    171e:	8a 81       	ldd	r24, Y+2	; 0x02
    1720:	08 2f       	mov	r16, r24
    1722:	10 e0       	ldi	r17, 0x00	; 0
    1724:	8b 85       	ldd	r24, Y+11	; 0x0b
    1726:	9c 85       	ldd	r25, Y+12	; 0x0c
    1728:	ad 85       	ldd	r26, Y+13	; 0x0d
    172a:	be 85       	ldd	r27, Y+14	; 0x0e
    172c:	2a e0       	ldi	r18, 0x0A	; 10
    172e:	30 e0       	ldi	r19, 0x00	; 0
    1730:	40 e0       	ldi	r20, 0x00	; 0
    1732:	50 e0       	ldi	r21, 0x00	; 0
    1734:	bc 01       	movw	r22, r24
    1736:	cd 01       	movw	r24, r26
    1738:	0e 94 6c 12 	call	0x24d8	; 0x24d8 <__udivmodsi4>
    173c:	dc 01       	movw	r26, r24
    173e:	cb 01       	movw	r24, r22
    1740:	28 2f       	mov	r18, r24
    1742:	ce 01       	movw	r24, r28
    1744:	03 96       	adiw	r24, 0x03	; 3
    1746:	fc 01       	movw	r30, r24
    1748:	e0 0f       	add	r30, r16
    174a:	f1 1f       	adc	r31, r17
    174c:	20 83       	st	Z, r18
		copy_u32Number/=10;
    174e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1750:	9c 85       	ldd	r25, Y+12	; 0x0c
    1752:	ad 85       	ldd	r26, Y+13	; 0x0d
    1754:	be 85       	ldd	r27, Y+14	; 0x0e
    1756:	2a e0       	ldi	r18, 0x0A	; 10
    1758:	30 e0       	ldi	r19, 0x00	; 0
    175a:	40 e0       	ldi	r20, 0x00	; 0
    175c:	50 e0       	ldi	r21, 0x00	; 0
    175e:	bc 01       	movw	r22, r24
    1760:	cd 01       	movw	r24, r26
    1762:	0e 94 6c 12 	call	0x24d8	; 0x24d8 <__udivmodsi4>
    1766:	da 01       	movw	r26, r20
    1768:	c9 01       	movw	r24, r18
    176a:	8b 87       	std	Y+11, r24	; 0x0b
    176c:	9c 87       	std	Y+12, r25	; 0x0c
    176e:	ad 87       	std	Y+13, r26	; 0x0d
    1770:	be 87       	std	Y+14, r27	; 0x0e
		if (copy_u32Number<10)
    1772:	8b 85       	ldd	r24, Y+11	; 0x0b
    1774:	9c 85       	ldd	r25, Y+12	; 0x0c
    1776:	ad 85       	ldd	r26, Y+13	; 0x0d
    1778:	be 85       	ldd	r27, Y+14	; 0x0e
    177a:	8a 30       	cpi	r24, 0x0A	; 10
    177c:	91 05       	cpc	r25, r1
    177e:	a1 05       	cpc	r26, r1
    1780:	b1 05       	cpc	r27, r1
    1782:	70 f4       	brcc	.+28     	; 0x17a0 <CLCD_voidwriteNumber+0xd2>
		{
			i--;
    1784:	8a 81       	ldd	r24, Y+2	; 0x02
    1786:	81 50       	subi	r24, 0x01	; 1
    1788:	8a 83       	std	Y+2, r24	; 0x02
			arr[i]=copy_u32Number;
    178a:	8a 81       	ldd	r24, Y+2	; 0x02
    178c:	28 2f       	mov	r18, r24
    178e:	30 e0       	ldi	r19, 0x00	; 0
    1790:	4b 85       	ldd	r20, Y+11	; 0x0b
    1792:	ce 01       	movw	r24, r28
    1794:	03 96       	adiw	r24, 0x03	; 3
    1796:	fc 01       	movw	r30, r24
    1798:	e2 0f       	add	r30, r18
    179a:	f3 1f       	adc	r31, r19
    179c:	40 83       	st	Z, r20
    179e:	0a c0       	rjmp	.+20     	; 0x17b4 <CLCD_voidwriteNumber+0xe6>
			break;
		}
		i--;
    17a0:	8a 81       	ldd	r24, Y+2	; 0x02
    17a2:	81 50       	subi	r24, 0x01	; 1
    17a4:	8a 83       	std	Y+2, r24	; 0x02
void CLCD_voidwriteNumber(u32 copy_u32Number)
{
	u8 arr[8],i,Local_u8Iterator;

	i=7;
	for (Local_u8Iterator=0;Local_u8Iterator<8;Local_u8Iterator++)
    17a6:	89 81       	ldd	r24, Y+1	; 0x01
    17a8:	8f 5f       	subi	r24, 0xFF	; 255
    17aa:	89 83       	std	Y+1, r24	; 0x01
    17ac:	89 81       	ldd	r24, Y+1	; 0x01
    17ae:	88 30       	cpi	r24, 0x08	; 8
    17b0:	08 f4       	brcc	.+2      	; 0x17b4 <CLCD_voidwriteNumber+0xe6>
    17b2:	a1 cf       	rjmp	.-190    	; 0x16f6 <CLCD_voidwriteNumber+0x28>
			arr[i]=copy_u32Number;
			break;
		}
		i--;
	}
	for (Local_u8Iterator=i;Local_u8Iterator<8;Local_u8Iterator++)
    17b4:	8a 81       	ldd	r24, Y+2	; 0x02
    17b6:	89 83       	std	Y+1, r24	; 0x01
    17b8:	7c c0       	rjmp	.+248    	; 0x18b2 <CLCD_voidwriteNumber+0x1e4>
	{

		switch (arr[Local_u8Iterator])
    17ba:	89 81       	ldd	r24, Y+1	; 0x01
    17bc:	28 2f       	mov	r18, r24
    17be:	30 e0       	ldi	r19, 0x00	; 0
    17c0:	ce 01       	movw	r24, r28
    17c2:	03 96       	adiw	r24, 0x03	; 3
    17c4:	fc 01       	movw	r30, r24
    17c6:	e2 0f       	add	r30, r18
    17c8:	f3 1f       	adc	r31, r19
    17ca:	80 81       	ld	r24, Z
    17cc:	28 2f       	mov	r18, r24
    17ce:	30 e0       	ldi	r19, 0x00	; 0
    17d0:	38 8b       	std	Y+16, r19	; 0x10
    17d2:	2f 87       	std	Y+15, r18	; 0x0f
    17d4:	8f 85       	ldd	r24, Y+15	; 0x0f
    17d6:	98 89       	ldd	r25, Y+16	; 0x10
    17d8:	84 30       	cpi	r24, 0x04	; 4
    17da:	91 05       	cpc	r25, r1
    17dc:	09 f4       	brne	.+2      	; 0x17e0 <CLCD_voidwriteNumber+0x112>
    17de:	4f c0       	rjmp	.+158    	; 0x187e <CLCD_voidwriteNumber+0x1b0>
    17e0:	2f 85       	ldd	r18, Y+15	; 0x0f
    17e2:	38 89       	ldd	r19, Y+16	; 0x10
    17e4:	25 30       	cpi	r18, 0x05	; 5
    17e6:	31 05       	cpc	r19, r1
    17e8:	d4 f4       	brge	.+52     	; 0x181e <CLCD_voidwriteNumber+0x150>
    17ea:	8f 85       	ldd	r24, Y+15	; 0x0f
    17ec:	98 89       	ldd	r25, Y+16	; 0x10
    17ee:	81 30       	cpi	r24, 0x01	; 1
    17f0:	91 05       	cpc	r25, r1
    17f2:	c9 f1       	breq	.+114    	; 0x1866 <CLCD_voidwriteNumber+0x198>
    17f4:	2f 85       	ldd	r18, Y+15	; 0x0f
    17f6:	38 89       	ldd	r19, Y+16	; 0x10
    17f8:	22 30       	cpi	r18, 0x02	; 2
    17fa:	31 05       	cpc	r19, r1
    17fc:	2c f4       	brge	.+10     	; 0x1808 <CLCD_voidwriteNumber+0x13a>
    17fe:	8f 85       	ldd	r24, Y+15	; 0x0f
    1800:	98 89       	ldd	r25, Y+16	; 0x10
    1802:	00 97       	sbiw	r24, 0x00	; 0
    1804:	61 f1       	breq	.+88     	; 0x185e <CLCD_voidwriteNumber+0x190>
    1806:	52 c0       	rjmp	.+164    	; 0x18ac <CLCD_voidwriteNumber+0x1de>
    1808:	2f 85       	ldd	r18, Y+15	; 0x0f
    180a:	38 89       	ldd	r19, Y+16	; 0x10
    180c:	22 30       	cpi	r18, 0x02	; 2
    180e:	31 05       	cpc	r19, r1
    1810:	71 f1       	breq	.+92     	; 0x186e <CLCD_voidwriteNumber+0x1a0>
    1812:	8f 85       	ldd	r24, Y+15	; 0x0f
    1814:	98 89       	ldd	r25, Y+16	; 0x10
    1816:	83 30       	cpi	r24, 0x03	; 3
    1818:	91 05       	cpc	r25, r1
    181a:	69 f1       	breq	.+90     	; 0x1876 <CLCD_voidwriteNumber+0x1a8>
    181c:	47 c0       	rjmp	.+142    	; 0x18ac <CLCD_voidwriteNumber+0x1de>
    181e:	2f 85       	ldd	r18, Y+15	; 0x0f
    1820:	38 89       	ldd	r19, Y+16	; 0x10
    1822:	27 30       	cpi	r18, 0x07	; 7
    1824:	31 05       	cpc	r19, r1
    1826:	b9 f1       	breq	.+110    	; 0x1896 <CLCD_voidwriteNumber+0x1c8>
    1828:	8f 85       	ldd	r24, Y+15	; 0x0f
    182a:	98 89       	ldd	r25, Y+16	; 0x10
    182c:	88 30       	cpi	r24, 0x08	; 8
    182e:	91 05       	cpc	r25, r1
    1830:	5c f4       	brge	.+22     	; 0x1848 <CLCD_voidwriteNumber+0x17a>
    1832:	2f 85       	ldd	r18, Y+15	; 0x0f
    1834:	38 89       	ldd	r19, Y+16	; 0x10
    1836:	25 30       	cpi	r18, 0x05	; 5
    1838:	31 05       	cpc	r19, r1
    183a:	29 f1       	breq	.+74     	; 0x1886 <CLCD_voidwriteNumber+0x1b8>
    183c:	8f 85       	ldd	r24, Y+15	; 0x0f
    183e:	98 89       	ldd	r25, Y+16	; 0x10
    1840:	86 30       	cpi	r24, 0x06	; 6
    1842:	91 05       	cpc	r25, r1
    1844:	21 f1       	breq	.+72     	; 0x188e <CLCD_voidwriteNumber+0x1c0>
    1846:	32 c0       	rjmp	.+100    	; 0x18ac <CLCD_voidwriteNumber+0x1de>
    1848:	2f 85       	ldd	r18, Y+15	; 0x0f
    184a:	38 89       	ldd	r19, Y+16	; 0x10
    184c:	28 30       	cpi	r18, 0x08	; 8
    184e:	31 05       	cpc	r19, r1
    1850:	31 f1       	breq	.+76     	; 0x189e <CLCD_voidwriteNumber+0x1d0>
    1852:	8f 85       	ldd	r24, Y+15	; 0x0f
    1854:	98 89       	ldd	r25, Y+16	; 0x10
    1856:	89 30       	cpi	r24, 0x09	; 9
    1858:	91 05       	cpc	r25, r1
    185a:	29 f1       	breq	.+74     	; 0x18a6 <CLCD_voidwriteNumber+0x1d8>
    185c:	27 c0       	rjmp	.+78     	; 0x18ac <CLCD_voidwriteNumber+0x1de>
		{
		case 0 : CLCD_voidSendData('0');break;
    185e:	80 e3       	ldi	r24, 0x30	; 48
    1860:	0e 94 df 07 	call	0xfbe	; 0xfbe <CLCD_voidSendData>
    1864:	23 c0       	rjmp	.+70     	; 0x18ac <CLCD_voidwriteNumber+0x1de>
		case 1 : CLCD_voidSendData('1');break;
    1866:	81 e3       	ldi	r24, 0x31	; 49
    1868:	0e 94 df 07 	call	0xfbe	; 0xfbe <CLCD_voidSendData>
    186c:	1f c0       	rjmp	.+62     	; 0x18ac <CLCD_voidwriteNumber+0x1de>
		case 2 : CLCD_voidSendData('2');break;
    186e:	82 e3       	ldi	r24, 0x32	; 50
    1870:	0e 94 df 07 	call	0xfbe	; 0xfbe <CLCD_voidSendData>
    1874:	1b c0       	rjmp	.+54     	; 0x18ac <CLCD_voidwriteNumber+0x1de>
		case 3 : CLCD_voidSendData('3');break;
    1876:	83 e3       	ldi	r24, 0x33	; 51
    1878:	0e 94 df 07 	call	0xfbe	; 0xfbe <CLCD_voidSendData>
    187c:	17 c0       	rjmp	.+46     	; 0x18ac <CLCD_voidwriteNumber+0x1de>
		case 4 : CLCD_voidSendData('4');break;
    187e:	84 e3       	ldi	r24, 0x34	; 52
    1880:	0e 94 df 07 	call	0xfbe	; 0xfbe <CLCD_voidSendData>
    1884:	13 c0       	rjmp	.+38     	; 0x18ac <CLCD_voidwriteNumber+0x1de>
		case 5 : CLCD_voidSendData('5');break;
    1886:	85 e3       	ldi	r24, 0x35	; 53
    1888:	0e 94 df 07 	call	0xfbe	; 0xfbe <CLCD_voidSendData>
    188c:	0f c0       	rjmp	.+30     	; 0x18ac <CLCD_voidwriteNumber+0x1de>
		case 6 : CLCD_voidSendData('6');break;
    188e:	86 e3       	ldi	r24, 0x36	; 54
    1890:	0e 94 df 07 	call	0xfbe	; 0xfbe <CLCD_voidSendData>
    1894:	0b c0       	rjmp	.+22     	; 0x18ac <CLCD_voidwriteNumber+0x1de>
		case 7 : CLCD_voidSendData('7');break;
    1896:	87 e3       	ldi	r24, 0x37	; 55
    1898:	0e 94 df 07 	call	0xfbe	; 0xfbe <CLCD_voidSendData>
    189c:	07 c0       	rjmp	.+14     	; 0x18ac <CLCD_voidwriteNumber+0x1de>
		case 8 : CLCD_voidSendData('8');break;
    189e:	88 e3       	ldi	r24, 0x38	; 56
    18a0:	0e 94 df 07 	call	0xfbe	; 0xfbe <CLCD_voidSendData>
    18a4:	03 c0       	rjmp	.+6      	; 0x18ac <CLCD_voidwriteNumber+0x1de>
		case 9 : CLCD_voidSendData('9');break;
    18a6:	89 e3       	ldi	r24, 0x39	; 57
    18a8:	0e 94 df 07 	call	0xfbe	; 0xfbe <CLCD_voidSendData>
			arr[i]=copy_u32Number;
			break;
		}
		i--;
	}
	for (Local_u8Iterator=i;Local_u8Iterator<8;Local_u8Iterator++)
    18ac:	89 81       	ldd	r24, Y+1	; 0x01
    18ae:	8f 5f       	subi	r24, 0xFF	; 255
    18b0:	89 83       	std	Y+1, r24	; 0x01
    18b2:	89 81       	ldd	r24, Y+1	; 0x01
    18b4:	88 30       	cpi	r24, 0x08	; 8
    18b6:	08 f4       	brcc	.+2      	; 0x18ba <CLCD_voidwriteNumber+0x1ec>
    18b8:	80 cf       	rjmp	.-256    	; 0x17ba <CLCD_voidwriteNumber+0xec>
		case 9 : CLCD_voidSendData('9');break;
		}
	}


}
    18ba:	60 96       	adiw	r28, 0x10	; 16
    18bc:	0f b6       	in	r0, 0x3f	; 63
    18be:	f8 94       	cli
    18c0:	de bf       	out	0x3e, r29	; 62
    18c2:	0f be       	out	0x3f, r0	; 63
    18c4:	cd bf       	out	0x3d, r28	; 61
    18c6:	cf 91       	pop	r28
    18c8:	df 91       	pop	r29
    18ca:	1f 91       	pop	r17
    18cc:	0f 91       	pop	r16
    18ce:	08 95       	ret

000018d0 <CLCD_voidSaveSpecialCharacterToCGRAM>:



void CLCD_voidSaveSpecialCharacterToCGRAM(u8 * copy_pu8pattern,u8 copy_u8patternNumber)
{
    18d0:	df 93       	push	r29
    18d2:	cf 93       	push	r28
    18d4:	00 d0       	rcall	.+0      	; 0x18d6 <CLCD_voidSaveSpecialCharacterToCGRAM+0x6>
    18d6:	00 d0       	rcall	.+0      	; 0x18d8 <CLCD_voidSaveSpecialCharacterToCGRAM+0x8>
    18d8:	0f 92       	push	r0
    18da:	cd b7       	in	r28, 0x3d	; 61
    18dc:	de b7       	in	r29, 0x3e	; 62
    18de:	9c 83       	std	Y+4, r25	; 0x04
    18e0:	8b 83       	std	Y+3, r24	; 0x03
    18e2:	6d 83       	std	Y+5, r22	; 0x05

	/*calculate CGRAM address whose each block is 8 bytes*/
	u8 Local_u8CGRAMaddress , Local_u8Iterator;
	Local_u8CGRAMaddress=copy_u8patternNumber*8;
    18e4:	8d 81       	ldd	r24, Y+5	; 0x05
    18e6:	88 2f       	mov	r24, r24
    18e8:	90 e0       	ldi	r25, 0x00	; 0
    18ea:	88 0f       	add	r24, r24
    18ec:	99 1f       	adc	r25, r25
    18ee:	88 0f       	add	r24, r24
    18f0:	99 1f       	adc	r25, r25
    18f2:	88 0f       	add	r24, r24
    18f4:	99 1f       	adc	r25, r25
    18f6:	8a 83       	std	Y+2, r24	; 0x02
	/*send CGRAM address command to LCD,with setting set 6 , clearing bit 7 */
	CLCD_voidSendCommand(Local_u8CGRAMaddress+64);
    18f8:	8a 81       	ldd	r24, Y+2	; 0x02
    18fa:	80 5c       	subi	r24, 0xC0	; 192
    18fc:	0e 94 4f 06 	call	0xc9e	; 0xc9e <CLCD_voidSendCommand>

	/*write the pattern into CGRAM*/
	for (Local_u8Iterator=0;Local_u8Iterator<8;Local_u8Iterator++)
    1900:	19 82       	std	Y+1, r1	; 0x01
    1902:	0e c0       	rjmp	.+28     	; 0x1920 <CLCD_voidSaveSpecialCharacterToCGRAM+0x50>
	{

		CLCD_voidSendData(copy_pu8pattern[Local_u8Iterator]);
    1904:	89 81       	ldd	r24, Y+1	; 0x01
    1906:	28 2f       	mov	r18, r24
    1908:	30 e0       	ldi	r19, 0x00	; 0
    190a:	8b 81       	ldd	r24, Y+3	; 0x03
    190c:	9c 81       	ldd	r25, Y+4	; 0x04
    190e:	fc 01       	movw	r30, r24
    1910:	e2 0f       	add	r30, r18
    1912:	f3 1f       	adc	r31, r19
    1914:	80 81       	ld	r24, Z
    1916:	0e 94 df 07 	call	0xfbe	; 0xfbe <CLCD_voidSendData>
	Local_u8CGRAMaddress=copy_u8patternNumber*8;
	/*send CGRAM address command to LCD,with setting set 6 , clearing bit 7 */
	CLCD_voidSendCommand(Local_u8CGRAMaddress+64);

	/*write the pattern into CGRAM*/
	for (Local_u8Iterator=0;Local_u8Iterator<8;Local_u8Iterator++)
    191a:	89 81       	ldd	r24, Y+1	; 0x01
    191c:	8f 5f       	subi	r24, 0xFF	; 255
    191e:	89 83       	std	Y+1, r24	; 0x01
    1920:	89 81       	ldd	r24, Y+1	; 0x01
    1922:	88 30       	cpi	r24, 0x08	; 8
    1924:	78 f3       	brcs	.-34     	; 0x1904 <CLCD_voidSaveSpecialCharacterToCGRAM+0x34>
	{

		CLCD_voidSendData(copy_pu8pattern[Local_u8Iterator]);
	}
}
    1926:	0f 90       	pop	r0
    1928:	0f 90       	pop	r0
    192a:	0f 90       	pop	r0
    192c:	0f 90       	pop	r0
    192e:	0f 90       	pop	r0
    1930:	cf 91       	pop	r28
    1932:	df 91       	pop	r29
    1934:	08 95       	ret

00001936 <DIO_u8SetPinValue>:

*/
/***********************************************************************/

u8 DIO_u8SetPinValue(u8 Copy_u8Port,u8 Copy_u8Pin,u8 Copy_u8Value)
{
    1936:	df 93       	push	r29
    1938:	cf 93       	push	r28
    193a:	cd b7       	in	r28, 0x3d	; 61
    193c:	de b7       	in	r29, 0x3e	; 62
    193e:	28 97       	sbiw	r28, 0x08	; 8
    1940:	0f b6       	in	r0, 0x3f	; 63
    1942:	f8 94       	cli
    1944:	de bf       	out	0x3e, r29	; 62
    1946:	0f be       	out	0x3f, r0	; 63
    1948:	cd bf       	out	0x3d, r28	; 61
    194a:	8a 83       	std	Y+2, r24	; 0x02
    194c:	6b 83       	std	Y+3, r22	; 0x03
    194e:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;
    1950:	19 82       	std	Y+1, r1	; 0x01
	if (Copy_u8Pin<=DIO_u8PIN7)
    1952:	8b 81       	ldd	r24, Y+3	; 0x03
    1954:	88 30       	cpi	r24, 0x08	; 8
    1956:	08 f0       	brcs	.+2      	; 0x195a <DIO_u8SetPinValue+0x24>
    1958:	f4 c0       	rjmp	.+488    	; 0x1b42 <DIO_u8SetPinValue+0x20c>
	{
		if (Copy_u8Value==DIO_u8PIN_LOW)
    195a:	8c 81       	ldd	r24, Y+4	; 0x04
    195c:	88 23       	and	r24, r24
    195e:	09 f0       	breq	.+2      	; 0x1962 <DIO_u8SetPinValue+0x2c>
    1960:	77 c0       	rjmp	.+238    	; 0x1a50 <DIO_u8SetPinValue+0x11a>
		{
			switch(Copy_u8Port)
    1962:	8a 81       	ldd	r24, Y+2	; 0x02
    1964:	28 2f       	mov	r18, r24
    1966:	30 e0       	ldi	r19, 0x00	; 0
    1968:	38 87       	std	Y+8, r19	; 0x08
    196a:	2f 83       	std	Y+7, r18	; 0x07
    196c:	8f 81       	ldd	r24, Y+7	; 0x07
    196e:	98 85       	ldd	r25, Y+8	; 0x08
    1970:	81 30       	cpi	r24, 0x01	; 1
    1972:	91 05       	cpc	r25, r1
    1974:	59 f1       	breq	.+86     	; 0x19cc <DIO_u8SetPinValue+0x96>
    1976:	2f 81       	ldd	r18, Y+7	; 0x07
    1978:	38 85       	ldd	r19, Y+8	; 0x08
    197a:	22 30       	cpi	r18, 0x02	; 2
    197c:	31 05       	cpc	r19, r1
    197e:	2c f4       	brge	.+10     	; 0x198a <DIO_u8SetPinValue+0x54>
    1980:	8f 81       	ldd	r24, Y+7	; 0x07
    1982:	98 85       	ldd	r25, Y+8	; 0x08
    1984:	00 97       	sbiw	r24, 0x00	; 0
    1986:	69 f0       	breq	.+26     	; 0x19a2 <DIO_u8SetPinValue+0x6c>
    1988:	60 c0       	rjmp	.+192    	; 0x1a4a <DIO_u8SetPinValue+0x114>
    198a:	2f 81       	ldd	r18, Y+7	; 0x07
    198c:	38 85       	ldd	r19, Y+8	; 0x08
    198e:	22 30       	cpi	r18, 0x02	; 2
    1990:	31 05       	cpc	r19, r1
    1992:	89 f1       	breq	.+98     	; 0x19f6 <DIO_u8SetPinValue+0xc0>
    1994:	8f 81       	ldd	r24, Y+7	; 0x07
    1996:	98 85       	ldd	r25, Y+8	; 0x08
    1998:	83 30       	cpi	r24, 0x03	; 3
    199a:	91 05       	cpc	r25, r1
    199c:	09 f4       	brne	.+2      	; 0x19a0 <DIO_u8SetPinValue+0x6a>
    199e:	40 c0       	rjmp	.+128    	; 0x1a20 <DIO_u8SetPinValue+0xea>
    19a0:	54 c0       	rjmp	.+168    	; 0x1a4a <DIO_u8SetPinValue+0x114>
			{
			case DIO_u8PORTA : CLR_BIT(PORTA,Copy_u8Pin); break;
    19a2:	ab e3       	ldi	r26, 0x3B	; 59
    19a4:	b0 e0       	ldi	r27, 0x00	; 0
    19a6:	eb e3       	ldi	r30, 0x3B	; 59
    19a8:	f0 e0       	ldi	r31, 0x00	; 0
    19aa:	80 81       	ld	r24, Z
    19ac:	48 2f       	mov	r20, r24
    19ae:	8b 81       	ldd	r24, Y+3	; 0x03
    19b0:	28 2f       	mov	r18, r24
    19b2:	30 e0       	ldi	r19, 0x00	; 0
    19b4:	81 e0       	ldi	r24, 0x01	; 1
    19b6:	90 e0       	ldi	r25, 0x00	; 0
    19b8:	02 2e       	mov	r0, r18
    19ba:	02 c0       	rjmp	.+4      	; 0x19c0 <DIO_u8SetPinValue+0x8a>
    19bc:	88 0f       	add	r24, r24
    19be:	99 1f       	adc	r25, r25
    19c0:	0a 94       	dec	r0
    19c2:	e2 f7       	brpl	.-8      	; 0x19bc <DIO_u8SetPinValue+0x86>
    19c4:	80 95       	com	r24
    19c6:	84 23       	and	r24, r20
    19c8:	8c 93       	st	X, r24
    19ca:	bd c0       	rjmp	.+378    	; 0x1b46 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTB : CLR_BIT(PORTB,Copy_u8Pin); break;
    19cc:	a8 e3       	ldi	r26, 0x38	; 56
    19ce:	b0 e0       	ldi	r27, 0x00	; 0
    19d0:	e8 e3       	ldi	r30, 0x38	; 56
    19d2:	f0 e0       	ldi	r31, 0x00	; 0
    19d4:	80 81       	ld	r24, Z
    19d6:	48 2f       	mov	r20, r24
    19d8:	8b 81       	ldd	r24, Y+3	; 0x03
    19da:	28 2f       	mov	r18, r24
    19dc:	30 e0       	ldi	r19, 0x00	; 0
    19de:	81 e0       	ldi	r24, 0x01	; 1
    19e0:	90 e0       	ldi	r25, 0x00	; 0
    19e2:	02 2e       	mov	r0, r18
    19e4:	02 c0       	rjmp	.+4      	; 0x19ea <DIO_u8SetPinValue+0xb4>
    19e6:	88 0f       	add	r24, r24
    19e8:	99 1f       	adc	r25, r25
    19ea:	0a 94       	dec	r0
    19ec:	e2 f7       	brpl	.-8      	; 0x19e6 <DIO_u8SetPinValue+0xb0>
    19ee:	80 95       	com	r24
    19f0:	84 23       	and	r24, r20
    19f2:	8c 93       	st	X, r24
    19f4:	a8 c0       	rjmp	.+336    	; 0x1b46 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTC : CLR_BIT(PORTC,Copy_u8Pin); break;
    19f6:	a5 e3       	ldi	r26, 0x35	; 53
    19f8:	b0 e0       	ldi	r27, 0x00	; 0
    19fa:	e5 e3       	ldi	r30, 0x35	; 53
    19fc:	f0 e0       	ldi	r31, 0x00	; 0
    19fe:	80 81       	ld	r24, Z
    1a00:	48 2f       	mov	r20, r24
    1a02:	8b 81       	ldd	r24, Y+3	; 0x03
    1a04:	28 2f       	mov	r18, r24
    1a06:	30 e0       	ldi	r19, 0x00	; 0
    1a08:	81 e0       	ldi	r24, 0x01	; 1
    1a0a:	90 e0       	ldi	r25, 0x00	; 0
    1a0c:	02 2e       	mov	r0, r18
    1a0e:	02 c0       	rjmp	.+4      	; 0x1a14 <DIO_u8SetPinValue+0xde>
    1a10:	88 0f       	add	r24, r24
    1a12:	99 1f       	adc	r25, r25
    1a14:	0a 94       	dec	r0
    1a16:	e2 f7       	brpl	.-8      	; 0x1a10 <DIO_u8SetPinValue+0xda>
    1a18:	80 95       	com	r24
    1a1a:	84 23       	and	r24, r20
    1a1c:	8c 93       	st	X, r24
    1a1e:	93 c0       	rjmp	.+294    	; 0x1b46 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTD : CLR_BIT(PORTD,Copy_u8Pin); break;
    1a20:	a2 e3       	ldi	r26, 0x32	; 50
    1a22:	b0 e0       	ldi	r27, 0x00	; 0
    1a24:	e2 e3       	ldi	r30, 0x32	; 50
    1a26:	f0 e0       	ldi	r31, 0x00	; 0
    1a28:	80 81       	ld	r24, Z
    1a2a:	48 2f       	mov	r20, r24
    1a2c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a2e:	28 2f       	mov	r18, r24
    1a30:	30 e0       	ldi	r19, 0x00	; 0
    1a32:	81 e0       	ldi	r24, 0x01	; 1
    1a34:	90 e0       	ldi	r25, 0x00	; 0
    1a36:	02 2e       	mov	r0, r18
    1a38:	02 c0       	rjmp	.+4      	; 0x1a3e <DIO_u8SetPinValue+0x108>
    1a3a:	88 0f       	add	r24, r24
    1a3c:	99 1f       	adc	r25, r25
    1a3e:	0a 94       	dec	r0
    1a40:	e2 f7       	brpl	.-8      	; 0x1a3a <DIO_u8SetPinValue+0x104>
    1a42:	80 95       	com	r24
    1a44:	84 23       	and	r24, r20
    1a46:	8c 93       	st	X, r24
    1a48:	7e c0       	rjmp	.+252    	; 0x1b46 <DIO_u8SetPinValue+0x210>
			default : Local_u8ErrorState=1;break;
    1a4a:	81 e0       	ldi	r24, 0x01	; 1
    1a4c:	89 83       	std	Y+1, r24	; 0x01
    1a4e:	7b c0       	rjmp	.+246    	; 0x1b46 <DIO_u8SetPinValue+0x210>
			}
		}
		else if (Copy_u8Value==DIO_u8PIN_HIGH)
    1a50:	8c 81       	ldd	r24, Y+4	; 0x04
    1a52:	81 30       	cpi	r24, 0x01	; 1
    1a54:	09 f0       	breq	.+2      	; 0x1a58 <DIO_u8SetPinValue+0x122>
    1a56:	72 c0       	rjmp	.+228    	; 0x1b3c <DIO_u8SetPinValue+0x206>
		{
			switch(Copy_u8Port)
    1a58:	8a 81       	ldd	r24, Y+2	; 0x02
    1a5a:	28 2f       	mov	r18, r24
    1a5c:	30 e0       	ldi	r19, 0x00	; 0
    1a5e:	3e 83       	std	Y+6, r19	; 0x06
    1a60:	2d 83       	std	Y+5, r18	; 0x05
    1a62:	8d 81       	ldd	r24, Y+5	; 0x05
    1a64:	9e 81       	ldd	r25, Y+6	; 0x06
    1a66:	81 30       	cpi	r24, 0x01	; 1
    1a68:	91 05       	cpc	r25, r1
    1a6a:	49 f1       	breq	.+82     	; 0x1abe <DIO_u8SetPinValue+0x188>
    1a6c:	2d 81       	ldd	r18, Y+5	; 0x05
    1a6e:	3e 81       	ldd	r19, Y+6	; 0x06
    1a70:	22 30       	cpi	r18, 0x02	; 2
    1a72:	31 05       	cpc	r19, r1
    1a74:	2c f4       	brge	.+10     	; 0x1a80 <DIO_u8SetPinValue+0x14a>
    1a76:	8d 81       	ldd	r24, Y+5	; 0x05
    1a78:	9e 81       	ldd	r25, Y+6	; 0x06
    1a7a:	00 97       	sbiw	r24, 0x00	; 0
    1a7c:	61 f0       	breq	.+24     	; 0x1a96 <DIO_u8SetPinValue+0x160>
    1a7e:	5b c0       	rjmp	.+182    	; 0x1b36 <DIO_u8SetPinValue+0x200>
    1a80:	2d 81       	ldd	r18, Y+5	; 0x05
    1a82:	3e 81       	ldd	r19, Y+6	; 0x06
    1a84:	22 30       	cpi	r18, 0x02	; 2
    1a86:	31 05       	cpc	r19, r1
    1a88:	71 f1       	breq	.+92     	; 0x1ae6 <DIO_u8SetPinValue+0x1b0>
    1a8a:	8d 81       	ldd	r24, Y+5	; 0x05
    1a8c:	9e 81       	ldd	r25, Y+6	; 0x06
    1a8e:	83 30       	cpi	r24, 0x03	; 3
    1a90:	91 05       	cpc	r25, r1
    1a92:	e9 f1       	breq	.+122    	; 0x1b0e <DIO_u8SetPinValue+0x1d8>
    1a94:	50 c0       	rjmp	.+160    	; 0x1b36 <DIO_u8SetPinValue+0x200>
			{
			case DIO_u8PORTA : SET_BIT(PORTA,Copy_u8Pin); break;
    1a96:	ab e3       	ldi	r26, 0x3B	; 59
    1a98:	b0 e0       	ldi	r27, 0x00	; 0
    1a9a:	eb e3       	ldi	r30, 0x3B	; 59
    1a9c:	f0 e0       	ldi	r31, 0x00	; 0
    1a9e:	80 81       	ld	r24, Z
    1aa0:	48 2f       	mov	r20, r24
    1aa2:	8b 81       	ldd	r24, Y+3	; 0x03
    1aa4:	28 2f       	mov	r18, r24
    1aa6:	30 e0       	ldi	r19, 0x00	; 0
    1aa8:	81 e0       	ldi	r24, 0x01	; 1
    1aaa:	90 e0       	ldi	r25, 0x00	; 0
    1aac:	02 2e       	mov	r0, r18
    1aae:	02 c0       	rjmp	.+4      	; 0x1ab4 <DIO_u8SetPinValue+0x17e>
    1ab0:	88 0f       	add	r24, r24
    1ab2:	99 1f       	adc	r25, r25
    1ab4:	0a 94       	dec	r0
    1ab6:	e2 f7       	brpl	.-8      	; 0x1ab0 <DIO_u8SetPinValue+0x17a>
    1ab8:	84 2b       	or	r24, r20
    1aba:	8c 93       	st	X, r24
    1abc:	44 c0       	rjmp	.+136    	; 0x1b46 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTB : SET_BIT(PORTB,Copy_u8Pin); break;
    1abe:	a8 e3       	ldi	r26, 0x38	; 56
    1ac0:	b0 e0       	ldi	r27, 0x00	; 0
    1ac2:	e8 e3       	ldi	r30, 0x38	; 56
    1ac4:	f0 e0       	ldi	r31, 0x00	; 0
    1ac6:	80 81       	ld	r24, Z
    1ac8:	48 2f       	mov	r20, r24
    1aca:	8b 81       	ldd	r24, Y+3	; 0x03
    1acc:	28 2f       	mov	r18, r24
    1ace:	30 e0       	ldi	r19, 0x00	; 0
    1ad0:	81 e0       	ldi	r24, 0x01	; 1
    1ad2:	90 e0       	ldi	r25, 0x00	; 0
    1ad4:	02 2e       	mov	r0, r18
    1ad6:	02 c0       	rjmp	.+4      	; 0x1adc <DIO_u8SetPinValue+0x1a6>
    1ad8:	88 0f       	add	r24, r24
    1ada:	99 1f       	adc	r25, r25
    1adc:	0a 94       	dec	r0
    1ade:	e2 f7       	brpl	.-8      	; 0x1ad8 <DIO_u8SetPinValue+0x1a2>
    1ae0:	84 2b       	or	r24, r20
    1ae2:	8c 93       	st	X, r24
    1ae4:	30 c0       	rjmp	.+96     	; 0x1b46 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTC : SET_BIT(PORTC,Copy_u8Pin); break;
    1ae6:	a5 e3       	ldi	r26, 0x35	; 53
    1ae8:	b0 e0       	ldi	r27, 0x00	; 0
    1aea:	e5 e3       	ldi	r30, 0x35	; 53
    1aec:	f0 e0       	ldi	r31, 0x00	; 0
    1aee:	80 81       	ld	r24, Z
    1af0:	48 2f       	mov	r20, r24
    1af2:	8b 81       	ldd	r24, Y+3	; 0x03
    1af4:	28 2f       	mov	r18, r24
    1af6:	30 e0       	ldi	r19, 0x00	; 0
    1af8:	81 e0       	ldi	r24, 0x01	; 1
    1afa:	90 e0       	ldi	r25, 0x00	; 0
    1afc:	02 2e       	mov	r0, r18
    1afe:	02 c0       	rjmp	.+4      	; 0x1b04 <DIO_u8SetPinValue+0x1ce>
    1b00:	88 0f       	add	r24, r24
    1b02:	99 1f       	adc	r25, r25
    1b04:	0a 94       	dec	r0
    1b06:	e2 f7       	brpl	.-8      	; 0x1b00 <DIO_u8SetPinValue+0x1ca>
    1b08:	84 2b       	or	r24, r20
    1b0a:	8c 93       	st	X, r24
    1b0c:	1c c0       	rjmp	.+56     	; 0x1b46 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTD : SET_BIT(PORTD,Copy_u8Pin); break;
    1b0e:	a2 e3       	ldi	r26, 0x32	; 50
    1b10:	b0 e0       	ldi	r27, 0x00	; 0
    1b12:	e2 e3       	ldi	r30, 0x32	; 50
    1b14:	f0 e0       	ldi	r31, 0x00	; 0
    1b16:	80 81       	ld	r24, Z
    1b18:	48 2f       	mov	r20, r24
    1b1a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b1c:	28 2f       	mov	r18, r24
    1b1e:	30 e0       	ldi	r19, 0x00	; 0
    1b20:	81 e0       	ldi	r24, 0x01	; 1
    1b22:	90 e0       	ldi	r25, 0x00	; 0
    1b24:	02 2e       	mov	r0, r18
    1b26:	02 c0       	rjmp	.+4      	; 0x1b2c <DIO_u8SetPinValue+0x1f6>
    1b28:	88 0f       	add	r24, r24
    1b2a:	99 1f       	adc	r25, r25
    1b2c:	0a 94       	dec	r0
    1b2e:	e2 f7       	brpl	.-8      	; 0x1b28 <DIO_u8SetPinValue+0x1f2>
    1b30:	84 2b       	or	r24, r20
    1b32:	8c 93       	st	X, r24
    1b34:	08 c0       	rjmp	.+16     	; 0x1b46 <DIO_u8SetPinValue+0x210>
			default : Local_u8ErrorState=1;break;
    1b36:	81 e0       	ldi	r24, 0x01	; 1
    1b38:	89 83       	std	Y+1, r24	; 0x01
    1b3a:	05 c0       	rjmp	.+10     	; 0x1b46 <DIO_u8SetPinValue+0x210>
			}
		}
		else
		{
			Local_u8ErrorState=1;
    1b3c:	81 e0       	ldi	r24, 0x01	; 1
    1b3e:	89 83       	std	Y+1, r24	; 0x01
    1b40:	02 c0       	rjmp	.+4      	; 0x1b46 <DIO_u8SetPinValue+0x210>
		}
	}
	else
	{
		Local_u8ErrorState=1;
    1b42:	81 e0       	ldi	r24, 0x01	; 1
    1b44:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    1b46:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b48:	28 96       	adiw	r28, 0x08	; 8
    1b4a:	0f b6       	in	r0, 0x3f	; 63
    1b4c:	f8 94       	cli
    1b4e:	de bf       	out	0x3e, r29	; 62
    1b50:	0f be       	out	0x3f, r0	; 63
    1b52:	cd bf       	out	0x3d, r28	; 61
    1b54:	cf 91       	pop	r28
    1b56:	df 91       	pop	r29
    1b58:	08 95       	ret

00001b5a <DIO_u8SetPortValue>:

/***********************************************************************/

u8 DIO_u8SetPortValue(u8 Copy_u8Port,u8 Copy_u8Value)
{
    1b5a:	df 93       	push	r29
    1b5c:	cf 93       	push	r28
    1b5e:	00 d0       	rcall	.+0      	; 0x1b60 <DIO_u8SetPortValue+0x6>
    1b60:	00 d0       	rcall	.+0      	; 0x1b62 <DIO_u8SetPortValue+0x8>
    1b62:	0f 92       	push	r0
    1b64:	cd b7       	in	r28, 0x3d	; 61
    1b66:	de b7       	in	r29, 0x3e	; 62
    1b68:	8a 83       	std	Y+2, r24	; 0x02
    1b6a:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=0;
    1b6c:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8Port)
    1b6e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b70:	28 2f       	mov	r18, r24
    1b72:	30 e0       	ldi	r19, 0x00	; 0
    1b74:	3d 83       	std	Y+5, r19	; 0x05
    1b76:	2c 83       	std	Y+4, r18	; 0x04
    1b78:	8c 81       	ldd	r24, Y+4	; 0x04
    1b7a:	9d 81       	ldd	r25, Y+5	; 0x05
    1b7c:	81 30       	cpi	r24, 0x01	; 1
    1b7e:	91 05       	cpc	r25, r1
    1b80:	d1 f0       	breq	.+52     	; 0x1bb6 <DIO_u8SetPortValue+0x5c>
    1b82:	2c 81       	ldd	r18, Y+4	; 0x04
    1b84:	3d 81       	ldd	r19, Y+5	; 0x05
    1b86:	22 30       	cpi	r18, 0x02	; 2
    1b88:	31 05       	cpc	r19, r1
    1b8a:	2c f4       	brge	.+10     	; 0x1b96 <DIO_u8SetPortValue+0x3c>
    1b8c:	8c 81       	ldd	r24, Y+4	; 0x04
    1b8e:	9d 81       	ldd	r25, Y+5	; 0x05
    1b90:	00 97       	sbiw	r24, 0x00	; 0
    1b92:	61 f0       	breq	.+24     	; 0x1bac <DIO_u8SetPortValue+0x52>
    1b94:	1f c0       	rjmp	.+62     	; 0x1bd4 <DIO_u8SetPortValue+0x7a>
    1b96:	2c 81       	ldd	r18, Y+4	; 0x04
    1b98:	3d 81       	ldd	r19, Y+5	; 0x05
    1b9a:	22 30       	cpi	r18, 0x02	; 2
    1b9c:	31 05       	cpc	r19, r1
    1b9e:	81 f0       	breq	.+32     	; 0x1bc0 <DIO_u8SetPortValue+0x66>
    1ba0:	8c 81       	ldd	r24, Y+4	; 0x04
    1ba2:	9d 81       	ldd	r25, Y+5	; 0x05
    1ba4:	83 30       	cpi	r24, 0x03	; 3
    1ba6:	91 05       	cpc	r25, r1
    1ba8:	81 f0       	breq	.+32     	; 0x1bca <DIO_u8SetPortValue+0x70>
    1baa:	14 c0       	rjmp	.+40     	; 0x1bd4 <DIO_u8SetPortValue+0x7a>
	{
	case DIO_u8PORTA : PORTA=Copy_u8Value; break;
    1bac:	eb e3       	ldi	r30, 0x3B	; 59
    1bae:	f0 e0       	ldi	r31, 0x00	; 0
    1bb0:	8b 81       	ldd	r24, Y+3	; 0x03
    1bb2:	80 83       	st	Z, r24
    1bb4:	11 c0       	rjmp	.+34     	; 0x1bd8 <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTB : PORTB=Copy_u8Value; break;
    1bb6:	e8 e3       	ldi	r30, 0x38	; 56
    1bb8:	f0 e0       	ldi	r31, 0x00	; 0
    1bba:	8b 81       	ldd	r24, Y+3	; 0x03
    1bbc:	80 83       	st	Z, r24
    1bbe:	0c c0       	rjmp	.+24     	; 0x1bd8 <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTC : PORTC=Copy_u8Value; break;
    1bc0:	e5 e3       	ldi	r30, 0x35	; 53
    1bc2:	f0 e0       	ldi	r31, 0x00	; 0
    1bc4:	8b 81       	ldd	r24, Y+3	; 0x03
    1bc6:	80 83       	st	Z, r24
    1bc8:	07 c0       	rjmp	.+14     	; 0x1bd8 <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTD : PORTD=Copy_u8Value; break;
    1bca:	e2 e3       	ldi	r30, 0x32	; 50
    1bcc:	f0 e0       	ldi	r31, 0x00	; 0
    1bce:	8b 81       	ldd	r24, Y+3	; 0x03
    1bd0:	80 83       	st	Z, r24
    1bd2:	02 c0       	rjmp	.+4      	; 0x1bd8 <DIO_u8SetPortValue+0x7e>
	default : Local_u8ErrorState=1;break;
    1bd4:	81 e0       	ldi	r24, 0x01	; 1
    1bd6:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    1bd8:	89 81       	ldd	r24, Y+1	; 0x01
}
    1bda:	0f 90       	pop	r0
    1bdc:	0f 90       	pop	r0
    1bde:	0f 90       	pop	r0
    1be0:	0f 90       	pop	r0
    1be2:	0f 90       	pop	r0
    1be4:	cf 91       	pop	r28
    1be6:	df 91       	pop	r29
    1be8:	08 95       	ret

00001bea <DIO_u8GetPinValue>:
/***********************************************************************/

u8 DIO_u8GetPinValue(u8 Copy_u8Port,u8 Copy_u8Pin,u8 * Copy_Pu8Value)
{
    1bea:	df 93       	push	r29
    1bec:	cf 93       	push	r28
    1bee:	cd b7       	in	r28, 0x3d	; 61
    1bf0:	de b7       	in	r29, 0x3e	; 62
    1bf2:	27 97       	sbiw	r28, 0x07	; 7
    1bf4:	0f b6       	in	r0, 0x3f	; 63
    1bf6:	f8 94       	cli
    1bf8:	de bf       	out	0x3e, r29	; 62
    1bfa:	0f be       	out	0x3f, r0	; 63
    1bfc:	cd bf       	out	0x3d, r28	; 61
    1bfe:	8a 83       	std	Y+2, r24	; 0x02
    1c00:	6b 83       	std	Y+3, r22	; 0x03
    1c02:	5d 83       	std	Y+5, r21	; 0x05
    1c04:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;
    1c06:	19 82       	std	Y+1, r1	; 0x01
	if((Copy_Pu8Value!=NULL)&&(Copy_u8Pin<=DIO_u8PIN7))
    1c08:	8c 81       	ldd	r24, Y+4	; 0x04
    1c0a:	9d 81       	ldd	r25, Y+5	; 0x05
    1c0c:	00 97       	sbiw	r24, 0x00	; 0
    1c0e:	09 f4       	brne	.+2      	; 0x1c12 <DIO_u8GetPinValue+0x28>
    1c10:	78 c0       	rjmp	.+240    	; 0x1d02 <DIO_u8GetPinValue+0x118>
    1c12:	8b 81       	ldd	r24, Y+3	; 0x03
    1c14:	88 30       	cpi	r24, 0x08	; 8
    1c16:	08 f0       	brcs	.+2      	; 0x1c1a <DIO_u8GetPinValue+0x30>
    1c18:	74 c0       	rjmp	.+232    	; 0x1d02 <DIO_u8GetPinValue+0x118>
	{
		switch(Copy_u8Port)
    1c1a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c1c:	28 2f       	mov	r18, r24
    1c1e:	30 e0       	ldi	r19, 0x00	; 0
    1c20:	3f 83       	std	Y+7, r19	; 0x07
    1c22:	2e 83       	std	Y+6, r18	; 0x06
    1c24:	4e 81       	ldd	r20, Y+6	; 0x06
    1c26:	5f 81       	ldd	r21, Y+7	; 0x07
    1c28:	41 30       	cpi	r20, 0x01	; 1
    1c2a:	51 05       	cpc	r21, r1
    1c2c:	59 f1       	breq	.+86     	; 0x1c84 <DIO_u8GetPinValue+0x9a>
    1c2e:	8e 81       	ldd	r24, Y+6	; 0x06
    1c30:	9f 81       	ldd	r25, Y+7	; 0x07
    1c32:	82 30       	cpi	r24, 0x02	; 2
    1c34:	91 05       	cpc	r25, r1
    1c36:	34 f4       	brge	.+12     	; 0x1c44 <DIO_u8GetPinValue+0x5a>
    1c38:	2e 81       	ldd	r18, Y+6	; 0x06
    1c3a:	3f 81       	ldd	r19, Y+7	; 0x07
    1c3c:	21 15       	cp	r18, r1
    1c3e:	31 05       	cpc	r19, r1
    1c40:	69 f0       	breq	.+26     	; 0x1c5c <DIO_u8GetPinValue+0x72>
    1c42:	5c c0       	rjmp	.+184    	; 0x1cfc <DIO_u8GetPinValue+0x112>
    1c44:	4e 81       	ldd	r20, Y+6	; 0x06
    1c46:	5f 81       	ldd	r21, Y+7	; 0x07
    1c48:	42 30       	cpi	r20, 0x02	; 2
    1c4a:	51 05       	cpc	r21, r1
    1c4c:	79 f1       	breq	.+94     	; 0x1cac <DIO_u8GetPinValue+0xc2>
    1c4e:	8e 81       	ldd	r24, Y+6	; 0x06
    1c50:	9f 81       	ldd	r25, Y+7	; 0x07
    1c52:	83 30       	cpi	r24, 0x03	; 3
    1c54:	91 05       	cpc	r25, r1
    1c56:	09 f4       	brne	.+2      	; 0x1c5a <DIO_u8GetPinValue+0x70>
    1c58:	3d c0       	rjmp	.+122    	; 0x1cd4 <DIO_u8GetPinValue+0xea>
    1c5a:	50 c0       	rjmp	.+160    	; 0x1cfc <DIO_u8GetPinValue+0x112>
		{
		case DIO_u8PORTA:* Copy_Pu8Value=GET_BIT(PINA,Copy_u8Pin);break;
    1c5c:	e9 e3       	ldi	r30, 0x39	; 57
    1c5e:	f0 e0       	ldi	r31, 0x00	; 0
    1c60:	80 81       	ld	r24, Z
    1c62:	28 2f       	mov	r18, r24
    1c64:	30 e0       	ldi	r19, 0x00	; 0
    1c66:	8b 81       	ldd	r24, Y+3	; 0x03
    1c68:	88 2f       	mov	r24, r24
    1c6a:	90 e0       	ldi	r25, 0x00	; 0
    1c6c:	a9 01       	movw	r20, r18
    1c6e:	02 c0       	rjmp	.+4      	; 0x1c74 <DIO_u8GetPinValue+0x8a>
    1c70:	55 95       	asr	r21
    1c72:	47 95       	ror	r20
    1c74:	8a 95       	dec	r24
    1c76:	e2 f7       	brpl	.-8      	; 0x1c70 <DIO_u8GetPinValue+0x86>
    1c78:	ca 01       	movw	r24, r20
    1c7a:	81 70       	andi	r24, 0x01	; 1
    1c7c:	ec 81       	ldd	r30, Y+4	; 0x04
    1c7e:	fd 81       	ldd	r31, Y+5	; 0x05
    1c80:	80 83       	st	Z, r24
    1c82:	41 c0       	rjmp	.+130    	; 0x1d06 <DIO_u8GetPinValue+0x11c>
		case DIO_u8PORTB:* Copy_Pu8Value=GET_BIT(PINB,Copy_u8Pin);break;
    1c84:	e6 e3       	ldi	r30, 0x36	; 54
    1c86:	f0 e0       	ldi	r31, 0x00	; 0
    1c88:	80 81       	ld	r24, Z
    1c8a:	28 2f       	mov	r18, r24
    1c8c:	30 e0       	ldi	r19, 0x00	; 0
    1c8e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c90:	88 2f       	mov	r24, r24
    1c92:	90 e0       	ldi	r25, 0x00	; 0
    1c94:	a9 01       	movw	r20, r18
    1c96:	02 c0       	rjmp	.+4      	; 0x1c9c <DIO_u8GetPinValue+0xb2>
    1c98:	55 95       	asr	r21
    1c9a:	47 95       	ror	r20
    1c9c:	8a 95       	dec	r24
    1c9e:	e2 f7       	brpl	.-8      	; 0x1c98 <DIO_u8GetPinValue+0xae>
    1ca0:	ca 01       	movw	r24, r20
    1ca2:	81 70       	andi	r24, 0x01	; 1
    1ca4:	ec 81       	ldd	r30, Y+4	; 0x04
    1ca6:	fd 81       	ldd	r31, Y+5	; 0x05
    1ca8:	80 83       	st	Z, r24
    1caa:	2d c0       	rjmp	.+90     	; 0x1d06 <DIO_u8GetPinValue+0x11c>
		case DIO_u8PORTC:* Copy_Pu8Value=GET_BIT(PINC,Copy_u8Pin);break;
    1cac:	e3 e3       	ldi	r30, 0x33	; 51
    1cae:	f0 e0       	ldi	r31, 0x00	; 0
    1cb0:	80 81       	ld	r24, Z
    1cb2:	28 2f       	mov	r18, r24
    1cb4:	30 e0       	ldi	r19, 0x00	; 0
    1cb6:	8b 81       	ldd	r24, Y+3	; 0x03
    1cb8:	88 2f       	mov	r24, r24
    1cba:	90 e0       	ldi	r25, 0x00	; 0
    1cbc:	a9 01       	movw	r20, r18
    1cbe:	02 c0       	rjmp	.+4      	; 0x1cc4 <DIO_u8GetPinValue+0xda>
    1cc0:	55 95       	asr	r21
    1cc2:	47 95       	ror	r20
    1cc4:	8a 95       	dec	r24
    1cc6:	e2 f7       	brpl	.-8      	; 0x1cc0 <DIO_u8GetPinValue+0xd6>
    1cc8:	ca 01       	movw	r24, r20
    1cca:	81 70       	andi	r24, 0x01	; 1
    1ccc:	ec 81       	ldd	r30, Y+4	; 0x04
    1cce:	fd 81       	ldd	r31, Y+5	; 0x05
    1cd0:	80 83       	st	Z, r24
    1cd2:	19 c0       	rjmp	.+50     	; 0x1d06 <DIO_u8GetPinValue+0x11c>
		case DIO_u8PORTD:* Copy_Pu8Value=GET_BIT(PIND,Copy_u8Pin);break;
    1cd4:	e0 e3       	ldi	r30, 0x30	; 48
    1cd6:	f0 e0       	ldi	r31, 0x00	; 0
    1cd8:	80 81       	ld	r24, Z
    1cda:	28 2f       	mov	r18, r24
    1cdc:	30 e0       	ldi	r19, 0x00	; 0
    1cde:	8b 81       	ldd	r24, Y+3	; 0x03
    1ce0:	88 2f       	mov	r24, r24
    1ce2:	90 e0       	ldi	r25, 0x00	; 0
    1ce4:	a9 01       	movw	r20, r18
    1ce6:	02 c0       	rjmp	.+4      	; 0x1cec <DIO_u8GetPinValue+0x102>
    1ce8:	55 95       	asr	r21
    1cea:	47 95       	ror	r20
    1cec:	8a 95       	dec	r24
    1cee:	e2 f7       	brpl	.-8      	; 0x1ce8 <DIO_u8GetPinValue+0xfe>
    1cf0:	ca 01       	movw	r24, r20
    1cf2:	81 70       	andi	r24, 0x01	; 1
    1cf4:	ec 81       	ldd	r30, Y+4	; 0x04
    1cf6:	fd 81       	ldd	r31, Y+5	; 0x05
    1cf8:	80 83       	st	Z, r24
    1cfa:	05 c0       	rjmp	.+10     	; 0x1d06 <DIO_u8GetPinValue+0x11c>
		default : Local_u8ErrorState=1;
    1cfc:	81 e0       	ldi	r24, 0x01	; 1
    1cfe:	89 83       	std	Y+1, r24	; 0x01
    1d00:	02 c0       	rjmp	.+4      	; 0x1d06 <DIO_u8GetPinValue+0x11c>
		}
	}
	else
	{
		Local_u8ErrorState=1;
    1d02:	81 e0       	ldi	r24, 0x01	; 1
    1d04:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    1d06:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d08:	27 96       	adiw	r28, 0x07	; 7
    1d0a:	0f b6       	in	r0, 0x3f	; 63
    1d0c:	f8 94       	cli
    1d0e:	de bf       	out	0x3e, r29	; 62
    1d10:	0f be       	out	0x3f, r0	; 63
    1d12:	cd bf       	out	0x3d, r28	; 61
    1d14:	cf 91       	pop	r28
    1d16:	df 91       	pop	r29
    1d18:	08 95       	ret

00001d1a <GIE_voidEnable>:
#include "GIE_interface.h"
#include "GIE_register.h"


void GIE_voidEnable(void)
{
    1d1a:	df 93       	push	r29
    1d1c:	cf 93       	push	r28
    1d1e:	cd b7       	in	r28, 0x3d	; 61
    1d20:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,SREG_I);
    1d22:	af e5       	ldi	r26, 0x5F	; 95
    1d24:	b0 e0       	ldi	r27, 0x00	; 0
    1d26:	ef e5       	ldi	r30, 0x5F	; 95
    1d28:	f0 e0       	ldi	r31, 0x00	; 0
    1d2a:	80 81       	ld	r24, Z
    1d2c:	80 68       	ori	r24, 0x80	; 128
    1d2e:	8c 93       	st	X, r24
}
    1d30:	cf 91       	pop	r28
    1d32:	df 91       	pop	r29
    1d34:	08 95       	ret

00001d36 <GIE_voidDisable>:
void GIE_voidDisable(void)
{
    1d36:	df 93       	push	r29
    1d38:	cf 93       	push	r28
    1d3a:	cd b7       	in	r28, 0x3d	; 61
    1d3c:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,SREG_I);
    1d3e:	af e5       	ldi	r26, 0x5F	; 95
    1d40:	b0 e0       	ldi	r27, 0x00	; 0
    1d42:	ef e5       	ldi	r30, 0x5F	; 95
    1d44:	f0 e0       	ldi	r31, 0x00	; 0
    1d46:	80 81       	ld	r24, Z
    1d48:	8f 77       	andi	r24, 0x7F	; 127
    1d4a:	8c 93       	st	X, r24
}
    1d4c:	cf 91       	pop	r28
    1d4e:	df 91       	pop	r29
    1d50:	08 95       	ret

00001d52 <PORT_voidInit>:
#include "PORT_register.h"
#include "PORT_config.h"
#include "PORT_private.h"

void  PORT_voidInit(void)
{
    1d52:	df 93       	push	r29
    1d54:	cf 93       	push	r28
    1d56:	cd b7       	in	r28, 0x3d	; 61
    1d58:	de b7       	in	r29, 0x3e	; 62
	DDRA=PORTA_DIR;
    1d5a:	ea e3       	ldi	r30, 0x3A	; 58
    1d5c:	f0 e0       	ldi	r31, 0x00	; 0
    1d5e:	8f ef       	ldi	r24, 0xFF	; 255
    1d60:	80 83       	st	Z, r24
	DDRB=PORTB_DIR;
    1d62:	e7 e3       	ldi	r30, 0x37	; 55
    1d64:	f0 e0       	ldi	r31, 0x00	; 0
    1d66:	8f e0       	ldi	r24, 0x0F	; 15
    1d68:	80 83       	st	Z, r24
	DDRC=PORTC_DIR;
    1d6a:	e4 e3       	ldi	r30, 0x34	; 52
    1d6c:	f0 e0       	ldi	r31, 0x00	; 0
    1d6e:	8f ef       	ldi	r24, 0xFF	; 255
    1d70:	80 83       	st	Z, r24
	DDRD=PORTD_DIR;
    1d72:	e1 e3       	ldi	r30, 0x31	; 49
    1d74:	f0 e0       	ldi	r31, 0x00	; 0
    1d76:	10 82       	st	Z, r1
	
	PORTA=PORTA_InitialValue;
    1d78:	eb e3       	ldi	r30, 0x3B	; 59
    1d7a:	f0 e0       	ldi	r31, 0x00	; 0
    1d7c:	10 82       	st	Z, r1
	PORTB=PORTB_InitialValue;
    1d7e:	e8 e3       	ldi	r30, 0x38	; 56
    1d80:	f0 e0       	ldi	r31, 0x00	; 0
    1d82:	10 82       	st	Z, r1
	PORTC=PORTC_InitialValue;
    1d84:	e5 e3       	ldi	r30, 0x35	; 53
    1d86:	f0 e0       	ldi	r31, 0x00	; 0
    1d88:	10 82       	st	Z, r1
	PORTD=PORTD_InitialValue;
    1d8a:	e2 e3       	ldi	r30, 0x32	; 50
    1d8c:	f0 e0       	ldi	r31, 0x00	; 0
    1d8e:	10 82       	st	Z, r1
}
    1d90:	cf 91       	pop	r28
    1d92:	df 91       	pop	r29
    1d94:	08 95       	ret

00001d96 <TIMER0_voidInit>:
static u8 Checkperiodicity;

static void(*ICU_pvCallBackFunc)(void)=NULL;

void TIMER0_voidInit(void)
{
    1d96:	df 93       	push	r29
    1d98:	cf 93       	push	r28
    1d9a:	cd b7       	in	r28, 0x3d	; 61
    1d9c:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TCCR0,TCCR0_WGM00);//CTC mode
	SET_BIT(TCCR0,TCCR0_WGM01);
	SET_BIT(TIMSK,TIMSK_OCIE0);//compare match interrupt enable
#elif Operation_Mode == Fast_PWM
	//choose Fast PWM mode
	SET_BIT(TCCR0,TCCR0_WGM00);
    1d9e:	a3 e5       	ldi	r26, 0x53	; 83
    1da0:	b0 e0       	ldi	r27, 0x00	; 0
    1da2:	e3 e5       	ldi	r30, 0x53	; 83
    1da4:	f0 e0       	ldi	r31, 0x00	; 0
    1da6:	80 81       	ld	r24, Z
    1da8:	80 64       	ori	r24, 0x40	; 64
    1daa:	8c 93       	st	X, r24
	SET_BIT(TCCR0,TCCR0_WGM01);
    1dac:	a3 e5       	ldi	r26, 0x53	; 83
    1dae:	b0 e0       	ldi	r27, 0x00	; 0
    1db0:	e3 e5       	ldi	r30, 0x53	; 83
    1db2:	f0 e0       	ldi	r31, 0x00	; 0
    1db4:	80 81       	ld	r24, Z
    1db6:	88 60       	ori	r24, 0x08	; 8
    1db8:	8c 93       	st	X, r24
	// no interrupt in PWM
#if Fast_PWM_MODE == SOT_COC
	//Set on top  clear  on compare
	CLR_BIT(TCCR0,4);
    1dba:	a3 e5       	ldi	r26, 0x53	; 83
    1dbc:	b0 e0       	ldi	r27, 0x00	; 0
    1dbe:	e3 e5       	ldi	r30, 0x53	; 83
    1dc0:	f0 e0       	ldi	r31, 0x00	; 0
    1dc2:	80 81       	ld	r24, Z
    1dc4:	8f 7e       	andi	r24, 0xEF	; 239
    1dc6:	8c 93       	st	X, r24
	SET_BIT(TCCR0,5);
    1dc8:	a3 e5       	ldi	r26, 0x53	; 83
    1dca:	b0 e0       	ldi	r27, 0x00	; 0
    1dcc:	e3 e5       	ldi	r30, 0x53	; 83
    1dce:	f0 e0       	ldi	r31, 0x00	; 0
    1dd0:	80 81       	ld	r24, Z
    1dd2:	80 62       	ori	r24, 0x20	; 32
    1dd4:	8c 93       	st	X, r24
	SET_BIT(TCCR0,TCCR0_WGM00);
	CLR_BIT(TCCR0,TCCR0_WGM01);
	// no interrupt in phase correct

#endif
}
    1dd6:	cf 91       	pop	r28
    1dd8:	df 91       	pop	r29
    1dda:	08 95       	ret

00001ddc <TIMER0_voidSetPreLoadValue>:

void TIMER0_voidSetPreLoadValue(u8 Copy_u8Preload)
{
    1ddc:	df 93       	push	r29
    1dde:	cf 93       	push	r28
    1de0:	0f 92       	push	r0
    1de2:	cd b7       	in	r28, 0x3d	; 61
    1de4:	de b7       	in	r29, 0x3e	; 62
    1de6:	89 83       	std	Y+1, r24	; 0x01
	TCNT0=Copy_u8Preload;
    1de8:	e2 e5       	ldi	r30, 0x52	; 82
    1dea:	f0 e0       	ldi	r31, 0x00	; 0
    1dec:	89 81       	ldd	r24, Y+1	; 0x01
    1dee:	80 83       	st	Z, r24
}
    1df0:	0f 90       	pop	r0
    1df2:	cf 91       	pop	r28
    1df4:	df 91       	pop	r29
    1df6:	08 95       	ret

00001df8 <Duty_CycleFastPWM_SOT_COC>:


void Duty_CycleFastPWM_SOT_COC(u8 percentage)
{
    1df8:	df 93       	push	r29
    1dfa:	cf 93       	push	r28
    1dfc:	0f 92       	push	r0
    1dfe:	cd b7       	in	r28, 0x3d	; 61
    1e00:	de b7       	in	r29, 0x3e	; 62
    1e02:	89 83       	std	Y+1, r24	; 0x01
	OCR0=(256*percentage)/100;
    1e04:	ec e5       	ldi	r30, 0x5C	; 92
    1e06:	f0 e0       	ldi	r31, 0x00	; 0
    1e08:	89 81       	ldd	r24, Y+1	; 0x01
    1e0a:	88 2f       	mov	r24, r24
    1e0c:	90 e0       	ldi	r25, 0x00	; 0
    1e0e:	98 2f       	mov	r25, r24
    1e10:	88 27       	eor	r24, r24
    1e12:	24 e6       	ldi	r18, 0x64	; 100
    1e14:	30 e0       	ldi	r19, 0x00	; 0
    1e16:	b9 01       	movw	r22, r18
    1e18:	0e 94 59 12 	call	0x24b2	; 0x24b2 <__divmodhi4>
    1e1c:	cb 01       	movw	r24, r22
    1e1e:	80 83       	st	Z, r24
}
    1e20:	0f 90       	pop	r0
    1e22:	cf 91       	pop	r28
    1e24:	df 91       	pop	r29
    1e26:	08 95       	ret

00001e28 <TIMER0_voidSetCompareMatchValue>:

void TIMER0_voidSetCompareMatchValue(u8 Copy_u8Value)
{
    1e28:	df 93       	push	r29
    1e2a:	cf 93       	push	r28
    1e2c:	0f 92       	push	r0
    1e2e:	cd b7       	in	r28, 0x3d	; 61
    1e30:	de b7       	in	r29, 0x3e	; 62
    1e32:	89 83       	std	Y+1, r24	; 0x01
	OCR0=Copy_u8Value;
    1e34:	ec e5       	ldi	r30, 0x5C	; 92
    1e36:	f0 e0       	ldi	r31, 0x00	; 0
    1e38:	89 81       	ldd	r24, Y+1	; 0x01
    1e3a:	80 83       	st	Z, r24
}
    1e3c:	0f 90       	pop	r0
    1e3e:	cf 91       	pop	r28
    1e40:	df 91       	pop	r29
    1e42:	08 95       	ret

00001e44 <PreScalar>:



void PreScalar(void)
{
    1e44:	df 93       	push	r29
    1e46:	cf 93       	push	r28
    1e48:	cd b7       	in	r28, 0x3d	; 61
    1e4a:	de b7       	in	r29, 0x3e	; 62
	//Choose thePreScalar
	TCCR0&=0b11111000;
    1e4c:	a3 e5       	ldi	r26, 0x53	; 83
    1e4e:	b0 e0       	ldi	r27, 0x00	; 0
    1e50:	e3 e5       	ldi	r30, 0x53	; 83
    1e52:	f0 e0       	ldi	r31, 0x00	; 0
    1e54:	80 81       	ld	r24, Z
    1e56:	88 7f       	andi	r24, 0xF8	; 248
    1e58:	8c 93       	st	X, r24
	TCCR0|=PreScalar_Value;
    1e5a:	a3 e5       	ldi	r26, 0x53	; 83
    1e5c:	b0 e0       	ldi	r27, 0x00	; 0
    1e5e:	e3 e5       	ldi	r30, 0x53	; 83
    1e60:	f0 e0       	ldi	r31, 0x00	; 0
    1e62:	80 81       	ld	r24, Z
    1e64:	82 60       	ori	r24, 0x02	; 2
    1e66:	8c 93       	st	X, r24
}
    1e68:	cf 91       	pop	r28
    1e6a:	df 91       	pop	r29
    1e6c:	08 95       	ret

00001e6e <TIMER0_u8SetCallBack_CTC>:


u8 TIMER0_u8SetCallBack_CTC(void(*Copy_pvCallBackFUNC)(void))//Timer/Counter0 CompareMatch
{
    1e6e:	df 93       	push	r29
    1e70:	cf 93       	push	r28
    1e72:	00 d0       	rcall	.+0      	; 0x1e74 <TIMER0_u8SetCallBack_CTC+0x6>
    1e74:	0f 92       	push	r0
    1e76:	cd b7       	in	r28, 0x3d	; 61
    1e78:	de b7       	in	r29, 0x3e	; 62
    1e7a:	9b 83       	std	Y+3, r25	; 0x03
    1e7c:	8a 83       	std	Y+2, r24	; 0x02

	u8 Local_u8ErrorStatus=OK;
    1e7e:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pvCallBackFUNC!=NULL)
    1e80:	8a 81       	ldd	r24, Y+2	; 0x02
    1e82:	9b 81       	ldd	r25, Y+3	; 0x03
    1e84:	00 97       	sbiw	r24, 0x00	; 0
    1e86:	39 f0       	breq	.+14     	; 0x1e96 <TIMER0_u8SetCallBack_CTC+0x28>
	{
		TIMER0_pvCallBackFUNC_CompareMatch=Copy_pvCallBackFUNC;
    1e88:	8a 81       	ldd	r24, Y+2	; 0x02
    1e8a:	9b 81       	ldd	r25, Y+3	; 0x03
    1e8c:	90 93 83 00 	sts	0x0083, r25
    1e90:	80 93 82 00 	sts	0x0082, r24
    1e94:	02 c0       	rjmp	.+4      	; 0x1e9a <TIMER0_u8SetCallBack_CTC+0x2c>
	}
	else
	{
		Local_u8ErrorStatus=NULL_POINTER;
    1e96:	82 e0       	ldi	r24, 0x02	; 2
    1e98:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorStatus;
    1e9a:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e9c:	0f 90       	pop	r0
    1e9e:	0f 90       	pop	r0
    1ea0:	0f 90       	pop	r0
    1ea2:	cf 91       	pop	r28
    1ea4:	df 91       	pop	r29
    1ea6:	08 95       	ret

00001ea8 <TIMER0_u8SetCallBack_OF>:

u8 TIMER0_u8SetCallBack_OF(void(*Copy_pvCallBackFUNC)(void))//Timer/Counter0 Overflow
{
    1ea8:	df 93       	push	r29
    1eaa:	cf 93       	push	r28
    1eac:	00 d0       	rcall	.+0      	; 0x1eae <TIMER0_u8SetCallBack_OF+0x6>
    1eae:	0f 92       	push	r0
    1eb0:	cd b7       	in	r28, 0x3d	; 61
    1eb2:	de b7       	in	r29, 0x3e	; 62
    1eb4:	9b 83       	std	Y+3, r25	; 0x03
    1eb6:	8a 83       	std	Y+2, r24	; 0x02

	u8 Local_u8ErrorStatus=OK;
    1eb8:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pvCallBackFUNC!=NULL)
    1eba:	8a 81       	ldd	r24, Y+2	; 0x02
    1ebc:	9b 81       	ldd	r25, Y+3	; 0x03
    1ebe:	00 97       	sbiw	r24, 0x00	; 0
    1ec0:	39 f0       	breq	.+14     	; 0x1ed0 <TIMER0_u8SetCallBack_OF+0x28>
	{
		TIMER0_pvCallBackFUNC_OF=Copy_pvCallBackFUNC;
    1ec2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ec4:	9b 81       	ldd	r25, Y+3	; 0x03
    1ec6:	90 93 81 00 	sts	0x0081, r25
    1eca:	80 93 80 00 	sts	0x0080, r24
    1ece:	02 c0       	rjmp	.+4      	; 0x1ed4 <TIMER0_u8SetCallBack_OF+0x2c>
	}
	else
	{
		Local_u8ErrorStatus=NULL_POINTER;
    1ed0:	82 e0       	ldi	r24, 0x02	; 2
    1ed2:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorStatus;
    1ed4:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ed6:	0f 90       	pop	r0
    1ed8:	0f 90       	pop	r0
    1eda:	0f 90       	pop	r0
    1edc:	cf 91       	pop	r28
    1ede:	df 91       	pop	r29
    1ee0:	08 95       	ret

00001ee2 <TIMER0_Delay_ms>:

u8 TIMER0_Delay_ms(u32 Copy_u16Delay_ms,void(*fnafterdelay)(void),u8 periodicity)
{
    1ee2:	df 93       	push	r29
    1ee4:	cf 93       	push	r28
    1ee6:	cd b7       	in	r28, 0x3d	; 61
    1ee8:	de b7       	in	r29, 0x3e	; 62
    1eea:	28 97       	sbiw	r28, 0x08	; 8
    1eec:	0f b6       	in	r0, 0x3f	; 63
    1eee:	f8 94       	cli
    1ef0:	de bf       	out	0x3e, r29	; 62
    1ef2:	0f be       	out	0x3f, r0	; 63
    1ef4:	cd bf       	out	0x3d, r28	; 61
    1ef6:	6a 83       	std	Y+2, r22	; 0x02
    1ef8:	7b 83       	std	Y+3, r23	; 0x03
    1efa:	8c 83       	std	Y+4, r24	; 0x04
    1efc:	9d 83       	std	Y+5, r25	; 0x05
    1efe:	5f 83       	std	Y+7, r21	; 0x07
    1f00:	4e 83       	std	Y+6, r20	; 0x06
    1f02:	28 87       	std	Y+8, r18	; 0x08

	u8 Local_u8ErrorStatus=OK;
    1f04:	19 82       	std	Y+1, r1	; 0x01
	if(fnafterdelay!=NULL)
    1f06:	8e 81       	ldd	r24, Y+6	; 0x06
    1f08:	9f 81       	ldd	r25, Y+7	; 0x07
    1f0a:	00 97       	sbiw	r24, 0x00	; 0
    1f0c:	09 f4       	brne	.+2      	; 0x1f10 <TIMER0_Delay_ms+0x2e>
    1f0e:	45 c0       	rjmp	.+138    	; 0x1f9a <TIMER0_Delay_ms+0xb8>
	{

		CLR_BIT(TCCR0,TCCR0_WGM00);//CTC mode
    1f10:	a3 e5       	ldi	r26, 0x53	; 83
    1f12:	b0 e0       	ldi	r27, 0x00	; 0
    1f14:	e3 e5       	ldi	r30, 0x53	; 83
    1f16:	f0 e0       	ldi	r31, 0x00	; 0
    1f18:	80 81       	ld	r24, Z
    1f1a:	8f 7b       	andi	r24, 0xBF	; 191
    1f1c:	8c 93       	st	X, r24
		SET_BIT(TCCR0,TCCR0_WGM01);
    1f1e:	a3 e5       	ldi	r26, 0x53	; 83
    1f20:	b0 e0       	ldi	r27, 0x00	; 0
    1f22:	e3 e5       	ldi	r30, 0x53	; 83
    1f24:	f0 e0       	ldi	r31, 0x00	; 0
    1f26:	80 81       	ld	r24, Z
    1f28:	88 60       	ori	r24, 0x08	; 8
    1f2a:	8c 93       	st	X, r24
		SET_BIT(TIMSK,TIMSK_OCIE0);//compare match interrupt enable
    1f2c:	a9 e5       	ldi	r26, 0x59	; 89
    1f2e:	b0 e0       	ldi	r27, 0x00	; 0
    1f30:	e9 e5       	ldi	r30, 0x59	; 89
    1f32:	f0 e0       	ldi	r31, 0x00	; 0
    1f34:	80 81       	ld	r24, Z
    1f36:	82 60       	ori	r24, 0x02	; 2
    1f38:	8c 93       	st	X, r24
		OCR0=250;
    1f3a:	ec e5       	ldi	r30, 0x5C	; 92
    1f3c:	f0 e0       	ldi	r31, 0x00	; 0
    1f3e:	8a ef       	ldi	r24, 0xFA	; 250
    1f40:	80 83       	st	Z, r24
		TCCR0&=0b11111000;
    1f42:	a3 e5       	ldi	r26, 0x53	; 83
    1f44:	b0 e0       	ldi	r27, 0x00	; 0
    1f46:	e3 e5       	ldi	r30, 0x53	; 83
    1f48:	f0 e0       	ldi	r31, 0x00	; 0
    1f4a:	80 81       	ld	r24, Z
    1f4c:	88 7f       	andi	r24, 0xF8	; 248
    1f4e:	8c 93       	st	X, r24
		TCCR0|=2;
    1f50:	a3 e5       	ldi	r26, 0x53	; 83
    1f52:	b0 e0       	ldi	r27, 0x00	; 0
    1f54:	e3 e5       	ldi	r30, 0x53	; 83
    1f56:	f0 e0       	ldi	r31, 0x00	; 0
    1f58:	80 81       	ld	r24, Z
    1f5a:	82 60       	ori	r24, 0x02	; 2
    1f5c:	8c 93       	st	X, r24
		ExcuteFnAfterDelay=fnafterdelay;
    1f5e:	8e 81       	ldd	r24, Y+6	; 0x06
    1f60:	9f 81       	ldd	r25, Y+7	; 0x07
    1f62:	90 93 85 00 	sts	0x0085, r25
    1f66:	80 93 84 00 	sts	0x0084, r24
		Delay_ms=Copy_u16Delay_ms*4;
    1f6a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f6c:	9b 81       	ldd	r25, Y+3	; 0x03
    1f6e:	ac 81       	ldd	r26, Y+4	; 0x04
    1f70:	bd 81       	ldd	r27, Y+5	; 0x05
    1f72:	88 0f       	add	r24, r24
    1f74:	99 1f       	adc	r25, r25
    1f76:	aa 1f       	adc	r26, r26
    1f78:	bb 1f       	adc	r27, r27
    1f7a:	88 0f       	add	r24, r24
    1f7c:	99 1f       	adc	r25, r25
    1f7e:	aa 1f       	adc	r26, r26
    1f80:	bb 1f       	adc	r27, r27
    1f82:	80 93 8a 00 	sts	0x008A, r24
    1f86:	90 93 8b 00 	sts	0x008B, r25
    1f8a:	a0 93 8c 00 	sts	0x008C, r26
    1f8e:	b0 93 8d 00 	sts	0x008D, r27
		Checkperiodicity=periodicity;
    1f92:	88 85       	ldd	r24, Y+8	; 0x08
    1f94:	80 93 8e 00 	sts	0x008E, r24
    1f98:	02 c0       	rjmp	.+4      	; 0x1f9e <TIMER0_Delay_ms+0xbc>
	}
	else
	{
		Local_u8ErrorStatus=NULL_POINTER;
    1f9a:	82 e0       	ldi	r24, 0x02	; 2
    1f9c:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorStatus;
    1f9e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1fa0:	28 96       	adiw	r28, 0x08	; 8
    1fa2:	0f b6       	in	r0, 0x3f	; 63
    1fa4:	f8 94       	cli
    1fa6:	de bf       	out	0x3e, r29	; 62
    1fa8:	0f be       	out	0x3f, r0	; 63
    1faa:	cd bf       	out	0x3d, r28	; 61
    1fac:	cf 91       	pop	r28
    1fae:	df 91       	pop	r29
    1fb0:	08 95       	ret

00001fb2 <TIMER1_voidInit>:




void TIMER1_voidInit(void)
{
    1fb2:	df 93       	push	r29
    1fb4:	cf 93       	push	r28
    1fb6:	cd b7       	in	r28, 0x3d	; 61
    1fb8:	de b7       	in	r29, 0x3e	; 62
	//Setting the preScalar to be 8
	TCCR1B&=0b11111000;
    1fba:	ae e4       	ldi	r26, 0x4E	; 78
    1fbc:	b0 e0       	ldi	r27, 0x00	; 0
    1fbe:	ee e4       	ldi	r30, 0x4E	; 78
    1fc0:	f0 e0       	ldi	r31, 0x00	; 0
    1fc2:	80 81       	ld	r24, Z
    1fc4:	88 7f       	andi	r24, 0xF8	; 248
    1fc6:	8c 93       	st	X, r24
	TCCR1B|=2;
    1fc8:	ae e4       	ldi	r26, 0x4E	; 78
    1fca:	b0 e0       	ldi	r27, 0x00	; 0
    1fcc:	ee e4       	ldi	r30, 0x4E	; 78
    1fce:	f0 e0       	ldi	r31, 0x00	; 0
    1fd0:	80 81       	ld	r24, Z
    1fd2:	82 60       	ori	r24, 0x02	; 2
    1fd4:	8c 93       	st	X, r24
}
    1fd6:	cf 91       	pop	r28
    1fd8:	df 91       	pop	r29
    1fda:	08 95       	ret

00001fdc <TIMER1_ServoInit>:


void TIMER1_ServoInit(void)//enough (no timer1_init function)
{
    1fdc:	df 93       	push	r29
    1fde:	cf 93       	push	r28
    1fe0:	cd b7       	in	r28, 0x3d	; 61
    1fe2:	de b7       	in	r29, 0x3e	; 62
	//Mode 14 Required Top Value
	//Setting Fast FWM non inverting mode
	CLR_BIT(TCCR1A,TCCR1A_COM1A0);
    1fe4:	af e4       	ldi	r26, 0x4F	; 79
    1fe6:	b0 e0       	ldi	r27, 0x00	; 0
    1fe8:	ef e4       	ldi	r30, 0x4F	; 79
    1fea:	f0 e0       	ldi	r31, 0x00	; 0
    1fec:	80 81       	ld	r24, Z
    1fee:	8f 7b       	andi	r24, 0xBF	; 191
    1ff0:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,TCCR1A_COM1A1);
    1ff2:	af e4       	ldi	r26, 0x4F	; 79
    1ff4:	b0 e0       	ldi	r27, 0x00	; 0
    1ff6:	ef e4       	ldi	r30, 0x4F	; 79
    1ff8:	f0 e0       	ldi	r31, 0x00	; 0
    1ffa:	80 81       	ld	r24, Z
    1ffc:	80 68       	ori	r24, 0x80	; 128
    1ffe:	8c 93       	st	X, r24
	//setting waveform for Fast FWM
	CLR_BIT(TCCR1A,TCCR1A_WGM10);
    2000:	af e4       	ldi	r26, 0x4F	; 79
    2002:	b0 e0       	ldi	r27, 0x00	; 0
    2004:	ef e4       	ldi	r30, 0x4F	; 79
    2006:	f0 e0       	ldi	r31, 0x00	; 0
    2008:	80 81       	ld	r24, Z
    200a:	8e 7f       	andi	r24, 0xFE	; 254
    200c:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,TCCR1A_WGM11);
    200e:	af e4       	ldi	r26, 0x4F	; 79
    2010:	b0 e0       	ldi	r27, 0x00	; 0
    2012:	ef e4       	ldi	r30, 0x4F	; 79
    2014:	f0 e0       	ldi	r31, 0x00	; 0
    2016:	80 81       	ld	r24, Z
    2018:	82 60       	ori	r24, 0x02	; 2
    201a:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,TCCR1B_WGM12);
    201c:	ae e4       	ldi	r26, 0x4E	; 78
    201e:	b0 e0       	ldi	r27, 0x00	; 0
    2020:	ee e4       	ldi	r30, 0x4E	; 78
    2022:	f0 e0       	ldi	r31, 0x00	; 0
    2024:	80 81       	ld	r24, Z
    2026:	88 60       	ori	r24, 0x08	; 8
    2028:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,TCCR1B_WGM13);
    202a:	ae e4       	ldi	r26, 0x4E	; 78
    202c:	b0 e0       	ldi	r27, 0x00	; 0
    202e:	ee e4       	ldi	r30, 0x4E	; 78
    2030:	f0 e0       	ldi	r31, 0x00	; 0
    2032:	80 81       	ld	r24, Z
    2034:	80 61       	ori	r24, 0x10	; 16
    2036:	8c 93       	st	X, r24

	//Setting the preScalar
	TCCR1B&=0b11111000;
    2038:	ae e4       	ldi	r26, 0x4E	; 78
    203a:	b0 e0       	ldi	r27, 0x00	; 0
    203c:	ee e4       	ldi	r30, 0x4E	; 78
    203e:	f0 e0       	ldi	r31, 0x00	; 0
    2040:	80 81       	ld	r24, Z
    2042:	88 7f       	andi	r24, 0xF8	; 248
    2044:	8c 93       	st	X, r24
	TCCR1B|=2;
    2046:	ae e4       	ldi	r26, 0x4E	; 78
    2048:	b0 e0       	ldi	r27, 0x00	; 0
    204a:	ee e4       	ldi	r30, 0x4E	; 78
    204c:	f0 e0       	ldi	r31, 0x00	; 0
    204e:	80 81       	ld	r24, Z
    2050:	82 60       	ori	r24, 0x02	; 2
    2052:	8c 93       	st	X, r24

}
    2054:	cf 91       	pop	r28
    2056:	df 91       	pop	r29
    2058:	08 95       	ret

0000205a <TIMER1_voidSetTimerValue>:


void TIMER1_voidSetTimerValue(u16 Copy_u16value)
{
    205a:	df 93       	push	r29
    205c:	cf 93       	push	r28
    205e:	00 d0       	rcall	.+0      	; 0x2060 <TIMER1_voidSetTimerValue+0x6>
    2060:	cd b7       	in	r28, 0x3d	; 61
    2062:	de b7       	in	r29, 0x3e	; 62
    2064:	9a 83       	std	Y+2, r25	; 0x02
    2066:	89 83       	std	Y+1, r24	; 0x01
	TCNT1=Copy_u16value;
    2068:	ec e4       	ldi	r30, 0x4C	; 76
    206a:	f0 e0       	ldi	r31, 0x00	; 0
    206c:	89 81       	ldd	r24, Y+1	; 0x01
    206e:	9a 81       	ldd	r25, Y+2	; 0x02
    2070:	91 83       	std	Z+1, r25	; 0x01
    2072:	80 83       	st	Z, r24
}
    2074:	0f 90       	pop	r0
    2076:	0f 90       	pop	r0
    2078:	cf 91       	pop	r28
    207a:	df 91       	pop	r29
    207c:	08 95       	ret

0000207e <Timer1_u16ReadTimerValue>:

u16 Timer1_u16ReadTimerValue(void)
{
    207e:	df 93       	push	r29
    2080:	cf 93       	push	r28
    2082:	cd b7       	in	r28, 0x3d	; 61
    2084:	de b7       	in	r29, 0x3e	; 62
	return TCNT1;
    2086:	ec e4       	ldi	r30, 0x4C	; 76
    2088:	f0 e0       	ldi	r31, 0x00	; 0
    208a:	80 81       	ld	r24, Z
    208c:	91 81       	ldd	r25, Z+1	; 0x01
}
    208e:	cf 91       	pop	r28
    2090:	df 91       	pop	r29
    2092:	08 95       	ret

00002094 <Timer1_voidSetICR_TopValue>:

void Timer1_voidSetICR_TopValue(u16 Copy_u16TOP)
{
    2094:	df 93       	push	r29
    2096:	cf 93       	push	r28
    2098:	00 d0       	rcall	.+0      	; 0x209a <Timer1_voidSetICR_TopValue+0x6>
    209a:	cd b7       	in	r28, 0x3d	; 61
    209c:	de b7       	in	r29, 0x3e	; 62
    209e:	9a 83       	std	Y+2, r25	; 0x02
    20a0:	89 83       	std	Y+1, r24	; 0x01
	ICR1=Copy_u16TOP;
    20a2:	e6 e4       	ldi	r30, 0x46	; 70
    20a4:	f0 e0       	ldi	r31, 0x00	; 0
    20a6:	89 81       	ldd	r24, Y+1	; 0x01
    20a8:	9a 81       	ldd	r25, Y+2	; 0x02
    20aa:	91 83       	std	Z+1, r25	; 0x01
    20ac:	80 83       	st	Z, r24
}
    20ae:	0f 90       	pop	r0
    20b0:	0f 90       	pop	r0
    20b2:	cf 91       	pop	r28
    20b4:	df 91       	pop	r29
    20b6:	08 95       	ret

000020b8 <Timer1_voidSetChannelA_Compare_Match>:
void Timer1_voidSetChannelA_Compare_Match(u16 Copy_u16Compare_Match)
{
    20b8:	df 93       	push	r29
    20ba:	cf 93       	push	r28
    20bc:	00 d0       	rcall	.+0      	; 0x20be <Timer1_voidSetChannelA_Compare_Match+0x6>
    20be:	cd b7       	in	r28, 0x3d	; 61
    20c0:	de b7       	in	r29, 0x3e	; 62
    20c2:	9a 83       	std	Y+2, r25	; 0x02
    20c4:	89 83       	std	Y+1, r24	; 0x01
	OCR1A=Copy_u16Compare_Match;
    20c6:	ea e4       	ldi	r30, 0x4A	; 74
    20c8:	f0 e0       	ldi	r31, 0x00	; 0
    20ca:	89 81       	ldd	r24, Y+1	; 0x01
    20cc:	9a 81       	ldd	r25, Y+2	; 0x02
    20ce:	91 83       	std	Z+1, r25	; 0x01
    20d0:	80 83       	st	Z, r24
}
    20d2:	0f 90       	pop	r0
    20d4:	0f 90       	pop	r0
    20d6:	cf 91       	pop	r28
    20d8:	df 91       	pop	r29
    20da:	08 95       	ret

000020dc <ICU_voidInit>:

//ICU By HardWare Functions
void ICU_voidInit(void)
{
    20dc:	df 93       	push	r29
    20de:	cf 93       	push	r28
    20e0:	cd b7       	in	r28, 0x3d	; 61
    20e2:	de b7       	in	r29, 0x3e	; 62

	//Set Trigger Force to RisingEdge Initially
	SET_BIT(TCCR1B,TCCR1B_ICES1);
    20e4:	ae e4       	ldi	r26, 0x4E	; 78
    20e6:	b0 e0       	ldi	r27, 0x00	; 0
    20e8:	ee e4       	ldi	r30, 0x4E	; 78
    20ea:	f0 e0       	ldi	r31, 0x00	; 0
    20ec:	80 81       	ld	r24, Z
    20ee:	80 64       	ori	r24, 0x40	; 64
    20f0:	8c 93       	st	X, r24

	//Enable Input Capture Interrupt Enable
	SET_BIT(TIMSK,TIMSK_TICIE1);
    20f2:	a9 e5       	ldi	r26, 0x59	; 89
    20f4:	b0 e0       	ldi	r27, 0x00	; 0
    20f6:	e9 e5       	ldi	r30, 0x59	; 89
    20f8:	f0 e0       	ldi	r31, 0x00	; 0
    20fa:	80 81       	ld	r24, Z
    20fc:	80 62       	ori	r24, 0x20	; 32
    20fe:	8c 93       	st	X, r24
}
    2100:	cf 91       	pop	r28
    2102:	df 91       	pop	r29
    2104:	08 95       	ret

00002106 <ICU_voidSetTriggerEdge>:



u8 ICU_voidSetTriggerEdge(u8 Copy_u8Edge)
{
    2106:	df 93       	push	r29
    2108:	cf 93       	push	r28
    210a:	00 d0       	rcall	.+0      	; 0x210c <ICU_voidSetTriggerEdge+0x6>
    210c:	cd b7       	in	r28, 0x3d	; 61
    210e:	de b7       	in	r29, 0x3e	; 62
    2110:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorStatus=OK;
    2112:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Edge==ICU_RisingEdge)
    2114:	8a 81       	ldd	r24, Y+2	; 0x02
    2116:	88 23       	and	r24, r24
    2118:	41 f4       	brne	.+16     	; 0x212a <ICU_voidSetTriggerEdge+0x24>
	{
		SET_BIT(TCCR1B,TCCR1B_ICES1);
    211a:	ae e4       	ldi	r26, 0x4E	; 78
    211c:	b0 e0       	ldi	r27, 0x00	; 0
    211e:	ee e4       	ldi	r30, 0x4E	; 78
    2120:	f0 e0       	ldi	r31, 0x00	; 0
    2122:	80 81       	ld	r24, Z
    2124:	80 64       	ori	r24, 0x40	; 64
    2126:	8c 93       	st	X, r24
    2128:	0d c0       	rjmp	.+26     	; 0x2144 <ICU_voidSetTriggerEdge+0x3e>
	}
	else if(Copy_u8Edge==ICU_FallingEdge)
    212a:	8a 81       	ldd	r24, Y+2	; 0x02
    212c:	81 30       	cpi	r24, 0x01	; 1
    212e:	41 f4       	brne	.+16     	; 0x2140 <ICU_voidSetTriggerEdge+0x3a>
	{
		CLR_BIT(TCCR1B,TCCR1B_ICES1);
    2130:	ae e4       	ldi	r26, 0x4E	; 78
    2132:	b0 e0       	ldi	r27, 0x00	; 0
    2134:	ee e4       	ldi	r30, 0x4E	; 78
    2136:	f0 e0       	ldi	r31, 0x00	; 0
    2138:	80 81       	ld	r24, Z
    213a:	8f 7b       	andi	r24, 0xBF	; 191
    213c:	8c 93       	st	X, r24
    213e:	02 c0       	rjmp	.+4      	; 0x2144 <ICU_voidSetTriggerEdge+0x3e>
	}
	else
	{
		Local_u8ErrorStatus=NOK;
    2140:	81 e0       	ldi	r24, 0x01	; 1
    2142:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorStatus;
    2144:	89 81       	ldd	r24, Y+1	; 0x01
}
    2146:	0f 90       	pop	r0
    2148:	0f 90       	pop	r0
    214a:	cf 91       	pop	r28
    214c:	df 91       	pop	r29
    214e:	08 95       	ret

00002150 <ICU_voidEnableInterrupt>:



void ICU_voidEnableInterrupt(void)
{
    2150:	df 93       	push	r29
    2152:	cf 93       	push	r28
    2154:	cd b7       	in	r28, 0x3d	; 61
    2156:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,TIMSK_TICIE1);
    2158:	a9 e5       	ldi	r26, 0x59	; 89
    215a:	b0 e0       	ldi	r27, 0x00	; 0
    215c:	e9 e5       	ldi	r30, 0x59	; 89
    215e:	f0 e0       	ldi	r31, 0x00	; 0
    2160:	80 81       	ld	r24, Z
    2162:	80 62       	ori	r24, 0x20	; 32
    2164:	8c 93       	st	X, r24
}
    2166:	cf 91       	pop	r28
    2168:	df 91       	pop	r29
    216a:	08 95       	ret

0000216c <ICU_u16ReadInputCaptureREG>:




u16 ICU_u16ReadInputCaptureREG(void)
{
    216c:	df 93       	push	r29
    216e:	cf 93       	push	r28
    2170:	cd b7       	in	r28, 0x3d	; 61
    2172:	de b7       	in	r29, 0x3e	; 62
	return ICR1;
    2174:	e6 e4       	ldi	r30, 0x46	; 70
    2176:	f0 e0       	ldi	r31, 0x00	; 0
    2178:	80 81       	ld	r24, Z
    217a:	91 81       	ldd	r25, Z+1	; 0x01
}
    217c:	cf 91       	pop	r28
    217e:	df 91       	pop	r29
    2180:	08 95       	ret

00002182 <ICU_voidDisableInterrupt>:



void ICU_voidDisableInterrupt(void)
{
    2182:	df 93       	push	r29
    2184:	cf 93       	push	r28
    2186:	cd b7       	in	r28, 0x3d	; 61
    2188:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK,TIMSK_TICIE1);
    218a:	a9 e5       	ldi	r26, 0x59	; 89
    218c:	b0 e0       	ldi	r27, 0x00	; 0
    218e:	e9 e5       	ldi	r30, 0x59	; 89
    2190:	f0 e0       	ldi	r31, 0x00	; 0
    2192:	80 81       	ld	r24, Z
    2194:	8f 7d       	andi	r24, 0xDF	; 223
    2196:	8c 93       	st	X, r24
}
    2198:	cf 91       	pop	r28
    219a:	df 91       	pop	r29
    219c:	08 95       	ret

0000219e <ICU_u8SetCallBack>:



u8 ICU_u8SetCallBack(void(*Copy_pvCallBackFunc)(void))
{
    219e:	df 93       	push	r29
    21a0:	cf 93       	push	r28
    21a2:	00 d0       	rcall	.+0      	; 0x21a4 <ICU_u8SetCallBack+0x6>
    21a4:	0f 92       	push	r0
    21a6:	cd b7       	in	r28, 0x3d	; 61
    21a8:	de b7       	in	r29, 0x3e	; 62
    21aa:	9b 83       	std	Y+3, r25	; 0x03
    21ac:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorStatus=OK;
    21ae:	19 82       	std	Y+1, r1	; 0x01
	if (Copy_pvCallBackFunc != NULL)
    21b0:	8a 81       	ldd	r24, Y+2	; 0x02
    21b2:	9b 81       	ldd	r25, Y+3	; 0x03
    21b4:	00 97       	sbiw	r24, 0x00	; 0
    21b6:	39 f0       	breq	.+14     	; 0x21c6 <ICU_u8SetCallBack+0x28>
	{
		ICU_pvCallBackFunc=Copy_pvCallBackFunc;
    21b8:	8a 81       	ldd	r24, Y+2	; 0x02
    21ba:	9b 81       	ldd	r25, Y+3	; 0x03
    21bc:	90 93 87 00 	sts	0x0087, r25
    21c0:	80 93 86 00 	sts	0x0086, r24
    21c4:	02 c0       	rjmp	.+4      	; 0x21ca <ICU_u8SetCallBack+0x2c>
	}
	else
	{
		Local_u8ErrorStatus=NULL_POINTER;
    21c6:	82 e0       	ldi	r24, 0x02	; 2
    21c8:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorStatus;
    21ca:	89 81       	ldd	r24, Y+1	; 0x01
}
    21cc:	0f 90       	pop	r0
    21ce:	0f 90       	pop	r0
    21d0:	0f 90       	pop	r0
    21d2:	cf 91       	pop	r28
    21d4:	df 91       	pop	r29
    21d6:	08 95       	ret

000021d8 <__vector_10>:



void __vector_10 (void) __attribute__((signal));//Timer/Counter0 CompareMatch
void __vector_10 (void)
{
    21d8:	1f 92       	push	r1
    21da:	0f 92       	push	r0
    21dc:	0f b6       	in	r0, 0x3f	; 63
    21de:	0f 92       	push	r0
    21e0:	11 24       	eor	r1, r1
    21e2:	2f 93       	push	r18
    21e4:	3f 93       	push	r19
    21e6:	4f 93       	push	r20
    21e8:	5f 93       	push	r21
    21ea:	6f 93       	push	r22
    21ec:	7f 93       	push	r23
    21ee:	8f 93       	push	r24
    21f0:	9f 93       	push	r25
    21f2:	af 93       	push	r26
    21f4:	bf 93       	push	r27
    21f6:	ef 93       	push	r30
    21f8:	ff 93       	push	r31
    21fa:	df 93       	push	r29
    21fc:	cf 93       	push	r28
    21fe:	cd b7       	in	r28, 0x3d	; 61
    2200:	de b7       	in	r29, 0x3e	; 62

	if (TIMER0_pvCallBackFUNC_CompareMatch!=NULL)
    2202:	80 91 82 00 	lds	r24, 0x0082
    2206:	90 91 83 00 	lds	r25, 0x0083
    220a:	00 97       	sbiw	r24, 0x00	; 0
    220c:	29 f0       	breq	.+10     	; 0x2218 <__vector_10+0x40>
	{
		TIMER0_pvCallBackFUNC_CompareMatch();
    220e:	e0 91 82 00 	lds	r30, 0x0082
    2212:	f0 91 83 00 	lds	r31, 0x0083
    2216:	09 95       	icall
	}
	//DIO_u8SetPinValue(DIO_u8PORTC,DIO_u8PIN7,DIO_u8PIN_HIGH);

	if (ExcuteFnAfterDelay!=NULL)
    2218:	80 91 84 00 	lds	r24, 0x0084
    221c:	90 91 85 00 	lds	r25, 0x0085
    2220:	00 97       	sbiw	r24, 0x00	; 0
    2222:	89 f1       	breq	.+98     	; 0x2286 <__vector_10+0xae>
	{static u16 Counter=0;
	Counter++;
    2224:	80 91 88 00 	lds	r24, 0x0088
    2228:	90 91 89 00 	lds	r25, 0x0089
    222c:	01 96       	adiw	r24, 0x01	; 1
    222e:	90 93 89 00 	sts	0x0089, r25
    2232:	80 93 88 00 	sts	0x0088, r24
	if(Counter==Delay_ms)
    2236:	80 91 88 00 	lds	r24, 0x0088
    223a:	90 91 89 00 	lds	r25, 0x0089
    223e:	9c 01       	movw	r18, r24
    2240:	40 e0       	ldi	r20, 0x00	; 0
    2242:	50 e0       	ldi	r21, 0x00	; 0
    2244:	80 91 8a 00 	lds	r24, 0x008A
    2248:	90 91 8b 00 	lds	r25, 0x008B
    224c:	a0 91 8c 00 	lds	r26, 0x008C
    2250:	b0 91 8d 00 	lds	r27, 0x008D
    2254:	28 17       	cp	r18, r24
    2256:	39 07       	cpc	r19, r25
    2258:	4a 07       	cpc	r20, r26
    225a:	5b 07       	cpc	r21, r27
    225c:	a1 f4       	brne	.+40     	; 0x2286 <__vector_10+0xae>
	{
		ExcuteFnAfterDelay();
    225e:	e0 91 84 00 	lds	r30, 0x0084
    2262:	f0 91 85 00 	lds	r31, 0x0085
    2266:	09 95       	icall
		Counter=0;
    2268:	10 92 89 00 	sts	0x0089, r1
    226c:	10 92 88 00 	sts	0x0088, r1
		if (Checkperiodicity==Non_Periodic_delay)
    2270:	80 91 8e 00 	lds	r24, 0x008E
    2274:	81 30       	cpi	r24, 0x01	; 1
    2276:	39 f4       	brne	.+14     	; 0x2286 <__vector_10+0xae>
		{
			CLR_BIT(TIMSK,TIMSK_OCIE0);//compare match interrupt disable
    2278:	a9 e5       	ldi	r26, 0x59	; 89
    227a:	b0 e0       	ldi	r27, 0x00	; 0
    227c:	e9 e5       	ldi	r30, 0x59	; 89
    227e:	f0 e0       	ldi	r31, 0x00	; 0
    2280:	80 81       	ld	r24, Z
    2282:	8d 7f       	andi	r24, 0xFD	; 253
    2284:	8c 93       	st	X, r24

	else
	{
		//DoNothing
	}
}
    2286:	cf 91       	pop	r28
    2288:	df 91       	pop	r29
    228a:	ff 91       	pop	r31
    228c:	ef 91       	pop	r30
    228e:	bf 91       	pop	r27
    2290:	af 91       	pop	r26
    2292:	9f 91       	pop	r25
    2294:	8f 91       	pop	r24
    2296:	7f 91       	pop	r23
    2298:	6f 91       	pop	r22
    229a:	5f 91       	pop	r21
    229c:	4f 91       	pop	r20
    229e:	3f 91       	pop	r19
    22a0:	2f 91       	pop	r18
    22a2:	0f 90       	pop	r0
    22a4:	0f be       	out	0x3f, r0	; 63
    22a6:	0f 90       	pop	r0
    22a8:	1f 90       	pop	r1
    22aa:	18 95       	reti

000022ac <__vector_11>:



void __vector_11(void) __attribute__((signal));//Timer/Counter0 Overflow
void __vector_11(void)
{
    22ac:	1f 92       	push	r1
    22ae:	0f 92       	push	r0
    22b0:	0f b6       	in	r0, 0x3f	; 63
    22b2:	0f 92       	push	r0
    22b4:	11 24       	eor	r1, r1
    22b6:	2f 93       	push	r18
    22b8:	3f 93       	push	r19
    22ba:	4f 93       	push	r20
    22bc:	5f 93       	push	r21
    22be:	6f 93       	push	r22
    22c0:	7f 93       	push	r23
    22c2:	8f 93       	push	r24
    22c4:	9f 93       	push	r25
    22c6:	af 93       	push	r26
    22c8:	bf 93       	push	r27
    22ca:	ef 93       	push	r30
    22cc:	ff 93       	push	r31
    22ce:	df 93       	push	r29
    22d0:	cf 93       	push	r28
    22d2:	cd b7       	in	r28, 0x3d	; 61
    22d4:	de b7       	in	r29, 0x3e	; 62

	if (TIMER0_pvCallBackFUNC_OF!=NULL)
    22d6:	80 91 80 00 	lds	r24, 0x0080
    22da:	90 91 81 00 	lds	r25, 0x0081
    22de:	00 97       	sbiw	r24, 0x00	; 0
    22e0:	29 f0       	breq	.+10     	; 0x22ec <__vector_11+0x40>
	{
		TIMER0_pvCallBackFUNC_OF();
    22e2:	e0 91 80 00 	lds	r30, 0x0080
    22e6:	f0 91 81 00 	lds	r31, 0x0081
    22ea:	09 95       	icall
	}
}
    22ec:	cf 91       	pop	r28
    22ee:	df 91       	pop	r29
    22f0:	ff 91       	pop	r31
    22f2:	ef 91       	pop	r30
    22f4:	bf 91       	pop	r27
    22f6:	af 91       	pop	r26
    22f8:	9f 91       	pop	r25
    22fa:	8f 91       	pop	r24
    22fc:	7f 91       	pop	r23
    22fe:	6f 91       	pop	r22
    2300:	5f 91       	pop	r21
    2302:	4f 91       	pop	r20
    2304:	3f 91       	pop	r19
    2306:	2f 91       	pop	r18
    2308:	0f 90       	pop	r0
    230a:	0f be       	out	0x3f, r0	; 63
    230c:	0f 90       	pop	r0
    230e:	1f 90       	pop	r1
    2310:	18 95       	reti

00002312 <__vector_6>:


//ICU ISR
void __vector_6(void) __attribute__((signal));
void __vector_6(void)
{
    2312:	1f 92       	push	r1
    2314:	0f 92       	push	r0
    2316:	0f b6       	in	r0, 0x3f	; 63
    2318:	0f 92       	push	r0
    231a:	11 24       	eor	r1, r1
    231c:	2f 93       	push	r18
    231e:	3f 93       	push	r19
    2320:	4f 93       	push	r20
    2322:	5f 93       	push	r21
    2324:	6f 93       	push	r22
    2326:	7f 93       	push	r23
    2328:	8f 93       	push	r24
    232a:	9f 93       	push	r25
    232c:	af 93       	push	r26
    232e:	bf 93       	push	r27
    2330:	ef 93       	push	r30
    2332:	ff 93       	push	r31
    2334:	df 93       	push	r29
    2336:	cf 93       	push	r28
    2338:	cd b7       	in	r28, 0x3d	; 61
    233a:	de b7       	in	r29, 0x3e	; 62
	if (ICU_pvCallBackFunc!=NULL)
    233c:	80 91 86 00 	lds	r24, 0x0086
    2340:	90 91 87 00 	lds	r25, 0x0087
    2344:	00 97       	sbiw	r24, 0x00	; 0
    2346:	29 f0       	breq	.+10     	; 0x2352 <__vector_6+0x40>
	{
		ICU_pvCallBackFunc();
    2348:	e0 91 86 00 	lds	r30, 0x0086
    234c:	f0 91 87 00 	lds	r31, 0x0087
    2350:	09 95       	icall
	else
	{
		//Do nothing
	}

}
    2352:	cf 91       	pop	r28
    2354:	df 91       	pop	r29
    2356:	ff 91       	pop	r31
    2358:	ef 91       	pop	r30
    235a:	bf 91       	pop	r27
    235c:	af 91       	pop	r26
    235e:	9f 91       	pop	r25
    2360:	8f 91       	pop	r24
    2362:	7f 91       	pop	r23
    2364:	6f 91       	pop	r22
    2366:	5f 91       	pop	r21
    2368:	4f 91       	pop	r20
    236a:	3f 91       	pop	r19
    236c:	2f 91       	pop	r18
    236e:	0f 90       	pop	r0
    2370:	0f be       	out	0x3f, r0	; 63
    2372:	0f 90       	pop	r0
    2374:	1f 90       	pop	r1
    2376:	18 95       	reti

00002378 <main>:
static u16 period_Ticks=0;
static u16 ON_Ticks=0;


void main(void)
{
    2378:	df 93       	push	r29
    237a:	cf 93       	push	r28
    237c:	cd b7       	in	r28, 0x3d	; 61
    237e:	de b7       	in	r29, 0x3e	; 62
	PORT_voidInit();
    2380:	0e 94 a9 0e 	call	0x1d52	; 0x1d52 <PORT_voidInit>
	ICU_voidInit();
    2384:	0e 94 6e 10 	call	0x20dc	; 0x20dc <ICU_voidInit>
	ICU_u8SetCallBack(&ICU_HardWare);
    2388:	88 e0       	ldi	r24, 0x08	; 8
    238a:	92 e1       	ldi	r25, 0x12	; 18
    238c:	0e 94 cf 10 	call	0x219e	; 0x219e <ICU_u8SetCallBack>

	TIMER1_voidInit();
    2390:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <TIMER1_voidInit>

	CLCD_voidInit_BitMode();
    2394:	0e 94 9f 09 	call	0x133e	; 0x133e <CLCD_voidInit_BitMode>
	TIMER0_voidInit();
    2398:	0e 94 cb 0e 	call	0x1d96	; 0x1d96 <TIMER0_voidInit>
	Duty_CycleFastPWM_SOT_COC(25);
    239c:	89 e1       	ldi	r24, 0x19	; 25
    239e:	0e 94 fc 0e 	call	0x1df8	; 0x1df8 <Duty_CycleFastPWM_SOT_COC>
	PreScalar();
    23a2:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <PreScalar>
	GIE_voidEnable();
    23a6:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <GIE_voidEnable>


	while(1)
	{
		//Wait until period ticks and on ticks are measured
		while((period_Ticks == 0 )&&( ON_Ticks == 0 ));
    23aa:	80 91 8f 00 	lds	r24, 0x008F
    23ae:	90 91 90 00 	lds	r25, 0x0090
    23b2:	00 97       	sbiw	r24, 0x00	; 0
    23b4:	31 f4       	brne	.+12     	; 0x23c2 <main+0x4a>
    23b6:	80 91 91 00 	lds	r24, 0x0091
    23ba:	90 91 92 00 	lds	r25, 0x0092
    23be:	00 97       	sbiw	r24, 0x00	; 0
    23c0:	a1 f3       	breq	.-24     	; 0x23aa <main+0x32>

		CLCD_voidGoToXY(0,0);
    23c2:	80 e0       	ldi	r24, 0x00	; 0
    23c4:	60 e0       	ldi	r22, 0x00	; 0
    23c6:	0e 94 09 0b 	call	0x1612	; 0x1612 <CLCD_voidGoToXY>
		CLCD_voidsendstring("Period_Ticks=");
    23ca:	80 e6       	ldi	r24, 0x60	; 96
    23cc:	90 e0       	ldi	r25, 0x00	; 0
    23ce:	0e 94 6f 09 	call	0x12de	; 0x12de <CLCD_voidsendstring>
		CLCD_voidwriteNumber(period_Ticks);
    23d2:	80 91 8f 00 	lds	r24, 0x008F
    23d6:	90 91 90 00 	lds	r25, 0x0090
    23da:	cc 01       	movw	r24, r24
    23dc:	a0 e0       	ldi	r26, 0x00	; 0
    23de:	b0 e0       	ldi	r27, 0x00	; 0
    23e0:	bc 01       	movw	r22, r24
    23e2:	cd 01       	movw	r24, r26
    23e4:	0e 94 67 0b 	call	0x16ce	; 0x16ce <CLCD_voidwriteNumber>
		CLCD_voidGoToXY(1,0);
    23e8:	81 e0       	ldi	r24, 0x01	; 1
    23ea:	60 e0       	ldi	r22, 0x00	; 0
    23ec:	0e 94 09 0b 	call	0x1612	; 0x1612 <CLCD_voidGoToXY>
		CLCD_voidsendstring("ON_Ticks=");
    23f0:	8e e6       	ldi	r24, 0x6E	; 110
    23f2:	90 e0       	ldi	r25, 0x00	; 0
    23f4:	0e 94 6f 09 	call	0x12de	; 0x12de <CLCD_voidsendstring>
		CLCD_voidwriteNumber(ON_Ticks);
    23f8:	80 91 91 00 	lds	r24, 0x0091
    23fc:	90 91 92 00 	lds	r25, 0x0092
    2400:	cc 01       	movw	r24, r24
    2402:	a0 e0       	ldi	r26, 0x00	; 0
    2404:	b0 e0       	ldi	r27, 0x00	; 0
    2406:	bc 01       	movw	r22, r24
    2408:	cd 01       	movw	r24, r26
    240a:	0e 94 67 0b 	call	0x16ce	; 0x16ce <CLCD_voidwriteNumber>
    240e:	ff cf       	rjmp	.-2      	; 0x240e <main+0x96>

00002410 <ICU_HardWare>:
		while(1);
	}
}

void ICU_HardWare(void)
{
    2410:	df 93       	push	r29
    2412:	cf 93       	push	r28
    2414:	cd b7       	in	r28, 0x3d	; 61
    2416:	de b7       	in	r29, 0x3e	; 62

	static u16 Reading1,Reading2,Reading3;
	static u8 Local_u8Counter=0;
	Local_u8Counter++;
    2418:	80 91 93 00 	lds	r24, 0x0093
    241c:	8f 5f       	subi	r24, 0xFF	; 255
    241e:	80 93 93 00 	sts	0x0093, r24
	if(Local_u8Counter==1)
    2422:	80 91 93 00 	lds	r24, 0x0093
    2426:	81 30       	cpi	r24, 0x01	; 1
    2428:	39 f4       	brne	.+14     	; 0x2438 <ICU_HardWare+0x28>
	{
		Reading1=ICU_u16ReadInputCaptureREG();
    242a:	0e 94 b6 10 	call	0x216c	; 0x216c <ICU_u16ReadInputCaptureREG>
    242e:	90 93 99 00 	sts	0x0099, r25
    2432:	80 93 98 00 	sts	0x0098, r24
    2436:	3a c0       	rjmp	.+116    	; 0x24ac <ICU_HardWare+0x9c>
	}
	else if(Local_u8Counter==2)
    2438:	80 91 93 00 	lds	r24, 0x0093
    243c:	82 30       	cpi	r24, 0x02	; 2
    243e:	d1 f4       	brne	.+52     	; 0x2474 <ICU_HardWare+0x64>
	{
		Reading2=ICU_u16ReadInputCaptureREG();
    2440:	0e 94 b6 10 	call	0x216c	; 0x216c <ICU_u16ReadInputCaptureREG>
    2444:	90 93 97 00 	sts	0x0097, r25
    2448:	80 93 96 00 	sts	0x0096, r24
		period_Ticks=Reading2-Reading1;
    244c:	20 91 96 00 	lds	r18, 0x0096
    2450:	30 91 97 00 	lds	r19, 0x0097
    2454:	80 91 98 00 	lds	r24, 0x0098
    2458:	90 91 99 00 	lds	r25, 0x0099
    245c:	a9 01       	movw	r20, r18
    245e:	48 1b       	sub	r20, r24
    2460:	59 0b       	sbc	r21, r25
    2462:	ca 01       	movw	r24, r20
    2464:	90 93 90 00 	sts	0x0090, r25
    2468:	80 93 8f 00 	sts	0x008F, r24
		ICU_voidSetTriggerEdge(ICU_FallingEdge);
    246c:	81 e0       	ldi	r24, 0x01	; 1
    246e:	0e 94 83 10 	call	0x2106	; 0x2106 <ICU_voidSetTriggerEdge>
    2472:	1c c0       	rjmp	.+56     	; 0x24ac <ICU_HardWare+0x9c>
	}
	else if(Local_u8Counter==3)
    2474:	80 91 93 00 	lds	r24, 0x0093
    2478:	83 30       	cpi	r24, 0x03	; 3
    247a:	c1 f4       	brne	.+48     	; 0x24ac <ICU_HardWare+0x9c>
	{
		Reading3=ICU_u16ReadInputCaptureREG();
    247c:	0e 94 b6 10 	call	0x216c	; 0x216c <ICU_u16ReadInputCaptureREG>
    2480:	90 93 95 00 	sts	0x0095, r25
    2484:	80 93 94 00 	sts	0x0094, r24
		ON_Ticks=Reading3-Reading2;
    2488:	20 91 94 00 	lds	r18, 0x0094
    248c:	30 91 95 00 	lds	r19, 0x0095
    2490:	80 91 96 00 	lds	r24, 0x0096
    2494:	90 91 97 00 	lds	r25, 0x0097
    2498:	a9 01       	movw	r20, r18
    249a:	48 1b       	sub	r20, r24
    249c:	59 0b       	sbc	r21, r25
    249e:	ca 01       	movw	r24, r20
    24a0:	90 93 92 00 	sts	0x0092, r25
    24a4:	80 93 91 00 	sts	0x0091, r24
		ICU_voidDisableInterrupt();
    24a8:	0e 94 c1 10 	call	0x2182	; 0x2182 <ICU_voidDisableInterrupt>
	}
}
    24ac:	cf 91       	pop	r28
    24ae:	df 91       	pop	r29
    24b0:	08 95       	ret

000024b2 <__divmodhi4>:
    24b2:	97 fb       	bst	r25, 7
    24b4:	09 2e       	mov	r0, r25
    24b6:	07 26       	eor	r0, r23
    24b8:	0a d0       	rcall	.+20     	; 0x24ce <__divmodhi4_neg1>
    24ba:	77 fd       	sbrc	r23, 7
    24bc:	04 d0       	rcall	.+8      	; 0x24c6 <__divmodhi4_neg2>
    24be:	2e d0       	rcall	.+92     	; 0x251c <__udivmodhi4>
    24c0:	06 d0       	rcall	.+12     	; 0x24ce <__divmodhi4_neg1>
    24c2:	00 20       	and	r0, r0
    24c4:	1a f4       	brpl	.+6      	; 0x24cc <__divmodhi4_exit>

000024c6 <__divmodhi4_neg2>:
    24c6:	70 95       	com	r23
    24c8:	61 95       	neg	r22
    24ca:	7f 4f       	sbci	r23, 0xFF	; 255

000024cc <__divmodhi4_exit>:
    24cc:	08 95       	ret

000024ce <__divmodhi4_neg1>:
    24ce:	f6 f7       	brtc	.-4      	; 0x24cc <__divmodhi4_exit>
    24d0:	90 95       	com	r25
    24d2:	81 95       	neg	r24
    24d4:	9f 4f       	sbci	r25, 0xFF	; 255
    24d6:	08 95       	ret

000024d8 <__udivmodsi4>:
    24d8:	a1 e2       	ldi	r26, 0x21	; 33
    24da:	1a 2e       	mov	r1, r26
    24dc:	aa 1b       	sub	r26, r26
    24de:	bb 1b       	sub	r27, r27
    24e0:	fd 01       	movw	r30, r26
    24e2:	0d c0       	rjmp	.+26     	; 0x24fe <__udivmodsi4_ep>

000024e4 <__udivmodsi4_loop>:
    24e4:	aa 1f       	adc	r26, r26
    24e6:	bb 1f       	adc	r27, r27
    24e8:	ee 1f       	adc	r30, r30
    24ea:	ff 1f       	adc	r31, r31
    24ec:	a2 17       	cp	r26, r18
    24ee:	b3 07       	cpc	r27, r19
    24f0:	e4 07       	cpc	r30, r20
    24f2:	f5 07       	cpc	r31, r21
    24f4:	20 f0       	brcs	.+8      	; 0x24fe <__udivmodsi4_ep>
    24f6:	a2 1b       	sub	r26, r18
    24f8:	b3 0b       	sbc	r27, r19
    24fa:	e4 0b       	sbc	r30, r20
    24fc:	f5 0b       	sbc	r31, r21

000024fe <__udivmodsi4_ep>:
    24fe:	66 1f       	adc	r22, r22
    2500:	77 1f       	adc	r23, r23
    2502:	88 1f       	adc	r24, r24
    2504:	99 1f       	adc	r25, r25
    2506:	1a 94       	dec	r1
    2508:	69 f7       	brne	.-38     	; 0x24e4 <__udivmodsi4_loop>
    250a:	60 95       	com	r22
    250c:	70 95       	com	r23
    250e:	80 95       	com	r24
    2510:	90 95       	com	r25
    2512:	9b 01       	movw	r18, r22
    2514:	ac 01       	movw	r20, r24
    2516:	bd 01       	movw	r22, r26
    2518:	cf 01       	movw	r24, r30
    251a:	08 95       	ret

0000251c <__udivmodhi4>:
    251c:	aa 1b       	sub	r26, r26
    251e:	bb 1b       	sub	r27, r27
    2520:	51 e1       	ldi	r21, 0x11	; 17
    2522:	07 c0       	rjmp	.+14     	; 0x2532 <__udivmodhi4_ep>

00002524 <__udivmodhi4_loop>:
    2524:	aa 1f       	adc	r26, r26
    2526:	bb 1f       	adc	r27, r27
    2528:	a6 17       	cp	r26, r22
    252a:	b7 07       	cpc	r27, r23
    252c:	10 f0       	brcs	.+4      	; 0x2532 <__udivmodhi4_ep>
    252e:	a6 1b       	sub	r26, r22
    2530:	b7 0b       	sbc	r27, r23

00002532 <__udivmodhi4_ep>:
    2532:	88 1f       	adc	r24, r24
    2534:	99 1f       	adc	r25, r25
    2536:	5a 95       	dec	r21
    2538:	a9 f7       	brne	.-22     	; 0x2524 <__udivmodhi4_loop>
    253a:	80 95       	com	r24
    253c:	90 95       	com	r25
    253e:	bc 01       	movw	r22, r24
    2540:	cd 01       	movw	r24, r26
    2542:	08 95       	ret

00002544 <__prologue_saves__>:
    2544:	2f 92       	push	r2
    2546:	3f 92       	push	r3
    2548:	4f 92       	push	r4
    254a:	5f 92       	push	r5
    254c:	6f 92       	push	r6
    254e:	7f 92       	push	r7
    2550:	8f 92       	push	r8
    2552:	9f 92       	push	r9
    2554:	af 92       	push	r10
    2556:	bf 92       	push	r11
    2558:	cf 92       	push	r12
    255a:	df 92       	push	r13
    255c:	ef 92       	push	r14
    255e:	ff 92       	push	r15
    2560:	0f 93       	push	r16
    2562:	1f 93       	push	r17
    2564:	cf 93       	push	r28
    2566:	df 93       	push	r29
    2568:	cd b7       	in	r28, 0x3d	; 61
    256a:	de b7       	in	r29, 0x3e	; 62
    256c:	ca 1b       	sub	r28, r26
    256e:	db 0b       	sbc	r29, r27
    2570:	0f b6       	in	r0, 0x3f	; 63
    2572:	f8 94       	cli
    2574:	de bf       	out	0x3e, r29	; 62
    2576:	0f be       	out	0x3f, r0	; 63
    2578:	cd bf       	out	0x3d, r28	; 61
    257a:	09 94       	ijmp

0000257c <__epilogue_restores__>:
    257c:	2a 88       	ldd	r2, Y+18	; 0x12
    257e:	39 88       	ldd	r3, Y+17	; 0x11
    2580:	48 88       	ldd	r4, Y+16	; 0x10
    2582:	5f 84       	ldd	r5, Y+15	; 0x0f
    2584:	6e 84       	ldd	r6, Y+14	; 0x0e
    2586:	7d 84       	ldd	r7, Y+13	; 0x0d
    2588:	8c 84       	ldd	r8, Y+12	; 0x0c
    258a:	9b 84       	ldd	r9, Y+11	; 0x0b
    258c:	aa 84       	ldd	r10, Y+10	; 0x0a
    258e:	b9 84       	ldd	r11, Y+9	; 0x09
    2590:	c8 84       	ldd	r12, Y+8	; 0x08
    2592:	df 80       	ldd	r13, Y+7	; 0x07
    2594:	ee 80       	ldd	r14, Y+6	; 0x06
    2596:	fd 80       	ldd	r15, Y+5	; 0x05
    2598:	0c 81       	ldd	r16, Y+4	; 0x04
    259a:	1b 81       	ldd	r17, Y+3	; 0x03
    259c:	aa 81       	ldd	r26, Y+2	; 0x02
    259e:	b9 81       	ldd	r27, Y+1	; 0x01
    25a0:	ce 0f       	add	r28, r30
    25a2:	d1 1d       	adc	r29, r1
    25a4:	0f b6       	in	r0, 0x3f	; 63
    25a6:	f8 94       	cli
    25a8:	de bf       	out	0x3e, r29	; 62
    25aa:	0f be       	out	0x3f, r0	; 63
    25ac:	cd bf       	out	0x3d, r28	; 61
    25ae:	ed 01       	movw	r28, r26
    25b0:	08 95       	ret

000025b2 <_exit>:
    25b2:	f8 94       	cli

000025b4 <__stop_program>:
    25b4:	ff cf       	rjmp	.-2      	; 0x25b4 <__stop_program>
