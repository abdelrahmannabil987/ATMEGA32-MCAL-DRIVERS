
TIMER_ALL.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001cb4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  00001cb4  00001d48  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001a  0080006a  0080006a  00001d52  2**0
                  ALLOC
  3 .stab         00001aac  00000000  00000000  00001d54  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000fbf  00000000  00000000  00003800  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000047bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000048ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00004a6f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  000066b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  000075a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00008350  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  000084b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000873d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00008f0b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 01 0d 	jmp	0x1a02	; 0x1a02 <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 64 0c 	jmp	0x18c8	; 0x18c8 <__vector_10>
      2c:	0c 94 ce 0c 	jmp	0x199c	; 0x199c <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 eb       	ldi	r30, 0xB4	; 180
      68:	fc e1       	ldi	r31, 0x1C	; 28
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 36       	cpi	r26, 0x6A	; 106
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	aa e6       	ldi	r26, 0x6A	; 106
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a4 38       	cpi	r26, 0x84	; 132
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <main>
      8a:	0c 94 58 0e 	jmp	0x1cb0	; 0x1cb0 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 21 0e 	jmp	0x1c42	; 0x1c42 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 3d 0e 	jmp	0x1c7a	; 0x1c7a <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 2d 0e 	jmp	0x1c5a	; 0x1c5a <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 49 0e 	jmp	0x1c92	; 0x1c92 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 2d 0e 	jmp	0x1c5a	; 0x1c5a <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 49 0e 	jmp	0x1c92	; 0x1c92 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 21 0e 	jmp	0x1c42	; 0x1c42 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 3d 0e 	jmp	0x1c7a	; 0x1c7a <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 2d 0e 	jmp	0x1c5a	; 0x1c5a <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 49 0e 	jmp	0x1c92	; 0x1c92 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 2d 0e 	jmp	0x1c5a	; 0x1c5a <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 49 0e 	jmp	0x1c92	; 0x1c92 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 2d 0e 	jmp	0x1c5a	; 0x1c5a <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 49 0e 	jmp	0x1c92	; 0x1c92 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 31 0e 	jmp	0x1c62	; 0x1c62 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 4d 0e 	jmp	0x1c9a	; 0x1c9a <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <ADC_voidInit>:
static u8 ADC_u8ISRsource;

u8 ADC_u8Busy_State=IDLE;

void ADC_voidInit(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	/*AVCC as Reference voltage*/
#if AREF_VOLTAGE==AVCC

	SET_BIT(ADMUX,ADMUX_REFS0);
     b4e:	a7 e2       	ldi	r26, 0x27	; 39
     b50:	b0 e0       	ldi	r27, 0x00	; 0
     b52:	e7 e2       	ldi	r30, 0x27	; 39
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	80 81       	ld	r24, Z
     b58:	80 64       	ori	r24, 0x40	; 64
     b5a:	8c 93       	st	X, r24
	CLR_BIT(ADMUX,ADMUX_REFS1);
     b5c:	a7 e2       	ldi	r26, 0x27	; 39
     b5e:	b0 e0       	ldi	r27, 0x00	; 0
     b60:	e7 e2       	ldi	r30, 0x27	; 39
     b62:	f0 e0       	ldi	r31, 0x00	; 0
     b64:	80 81       	ld	r24, Z
     b66:	8f 77       	andi	r24, 0x7F	; 127
     b68:	8c 93       	st	X, r24

#endif

#if Data_Result==Left_Adj
	/*Activate Left Adjust Register*/
	SET_BIT(ADMUX,ADMUX_ADLAR);
     b6a:	a7 e2       	ldi	r26, 0x27	; 39
     b6c:	b0 e0       	ldi	r27, 0x00	; 0
     b6e:	e7 e2       	ldi	r30, 0x27	; 39
     b70:	f0 e0       	ldi	r31, 0x00	; 0
     b72:	80 81       	ld	r24, Z
     b74:	80 62       	ori	r24, 0x20	; 32
     b76:	8c 93       	st	X, r24
#elif Data_Result==Right_Adj
	CLR_BIT(ADMUX,ADMUX_ADLAR);
#endif
	/*Set Prescalar*/ //BIT MASKING
	ADCSRA &= PreScalar_Masking;
     b78:	a6 e2       	ldi	r26, 0x26	; 38
     b7a:	b0 e0       	ldi	r27, 0x00	; 0
     b7c:	e6 e2       	ldi	r30, 0x26	; 38
     b7e:	f0 e0       	ldi	r31, 0x00	; 0
     b80:	80 81       	ld	r24, Z
     b82:	88 7f       	andi	r24, 0xF8	; 248
     b84:	8c 93       	st	X, r24
	ADCSRA |= Prescalar_Factor;
     b86:	a6 e2       	ldi	r26, 0x26	; 38
     b88:	b0 e0       	ldi	r27, 0x00	; 0
     b8a:	e6 e2       	ldi	r30, 0x26	; 38
     b8c:	f0 e0       	ldi	r31, 0x00	; 0
     b8e:	80 81       	ld	r24, Z
     b90:	83 60       	ori	r24, 0x03	; 3
     b92:	8c 93       	st	X, r24

	/*Enable Peripheral*/
	SET_BIT(ADCSRA,ADCSRA_ADEN);
     b94:	a6 e2       	ldi	r26, 0x26	; 38
     b96:	b0 e0       	ldi	r27, 0x00	; 0
     b98:	e6 e2       	ldi	r30, 0x26	; 38
     b9a:	f0 e0       	ldi	r31, 0x00	; 0
     b9c:	80 81       	ld	r24, Z
     b9e:	80 68       	ori	r24, 0x80	; 128
     ba0:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADCSRA_ADIE);   //Interrupt enable
	SET_BIT(ADCSRA,ADCSRA_ADATE);  //Auto trigger enable
	SET_BIT(ADCSRA,ADCSRA_ADSC);   //Start Conversion For the First Time Only
#endif

}
     ba2:	cf 91       	pop	r28
     ba4:	df 91       	pop	r29
     ba6:	08 95       	ret

00000ba8 <ADC_u16StartConversionSynch>:


u16 ADC_u16StartConversionSynch(u8 Copy_u8Channel , u16* Copy_Ptru16Reading)
{
     ba8:	df 93       	push	r29
     baa:	cf 93       	push	r28
     bac:	cd b7       	in	r28, 0x3d	; 61
     bae:	de b7       	in	r29, 0x3e	; 62
     bb0:	29 97       	sbiw	r28, 0x09	; 9
     bb2:	0f b6       	in	r0, 0x3f	; 63
     bb4:	f8 94       	cli
     bb6:	de bf       	out	0x3e, r29	; 62
     bb8:	0f be       	out	0x3f, r0	; 63
     bba:	cd bf       	out	0x3d, r28	; 61
     bbc:	8f 83       	std	Y+7, r24	; 0x07
     bbe:	79 87       	std	Y+9, r23	; 0x09
     bc0:	68 87       	std	Y+8, r22	; 0x08
	u8 ReadingContainer = BITS_READ;
     bc2:	81 e0       	ldi	r24, 0x01	; 1
     bc4:	8e 83       	std	Y+6, r24	; 0x06
	u32 Local_u32Counter=0;
     bc6:	1a 82       	std	Y+2, r1	; 0x02
     bc8:	1b 82       	std	Y+3, r1	; 0x03
     bca:	1c 82       	std	Y+4, r1	; 0x04
     bcc:	1d 82       	std	Y+5, r1	; 0x05
	u8 Local_u8ErrorState=OK;
     bce:	19 82       	std	Y+1, r1	; 0x01
	if (ADC_u8Busy_State==IDLE)
     bd0:	80 91 68 00 	lds	r24, 0x0068
     bd4:	81 30       	cpi	r24, 0x01	; 1
     bd6:	09 f0       	breq	.+2      	; 0xbda <ADC_u16StartConversionSynch+0x32>
     bd8:	6e c0       	rjmp	.+220    	; 0xcb6 <ADC_u16StartConversionSynch+0x10e>
	{
		/*ADC is now BUSY*/
		ADC_u8Busy_State=BUSY;
     bda:	82 e0       	ldi	r24, 0x02	; 2
     bdc:	80 93 68 00 	sts	0x0068, r24
		/*Clear the MUX Bits in ADMUX REG*/
		ADMUX &= InputChannel_Masking;
     be0:	a7 e2       	ldi	r26, 0x27	; 39
     be2:	b0 e0       	ldi	r27, 0x00	; 0
     be4:	e7 e2       	ldi	r30, 0x27	; 39
     be6:	f0 e0       	ldi	r31, 0x00	; 0
     be8:	80 81       	ld	r24, Z
     bea:	80 76       	andi	r24, 0x60	; 96
     bec:	8c 93       	st	X, r24

		/*SET the required channel into the MUX Bits*/
		ADMUX |= Copy_u8Channel;//BIT MASKING
     bee:	a7 e2       	ldi	r26, 0x27	; 39
     bf0:	b0 e0       	ldi	r27, 0x00	; 0
     bf2:	e7 e2       	ldi	r30, 0x27	; 39
     bf4:	f0 e0       	ldi	r31, 0x00	; 0
     bf6:	90 81       	ld	r25, Z
     bf8:	8f 81       	ldd	r24, Y+7	; 0x07
     bfa:	89 2b       	or	r24, r25
     bfc:	8c 93       	st	X, r24
#if AUTO_Trigger == disabled //POLLING
		/*Start Conversion*/ //single conversion
		SET_BIT(ADCSRA,ADCSRA_ADSC);
     bfe:	a6 e2       	ldi	r26, 0x26	; 38
     c00:	b0 e0       	ldi	r27, 0x00	; 0
     c02:	e6 e2       	ldi	r30, 0x26	; 38
     c04:	f0 e0       	ldi	r31, 0x00	; 0
     c06:	80 81       	ld	r24, Z
     c08:	80 64       	ori	r24, 0x40	; 64
     c0a:	8c 93       	st	X, r24
     c0c:	0b c0       	rjmp	.+22     	; 0xc24 <ADC_u16StartConversionSynch+0x7c>

		/*Polling (busy waiting) until the conversion complete flag is set OR Counter reaching TimeOUT Value*/
		while(((GET_BIT(ADCSRA,ADCSRA_ADIF))==0) && (Local_u32Counter!= ADC_u32TimeOUT) )
		{
			Local_u32Counter++;
     c0e:	8a 81       	ldd	r24, Y+2	; 0x02
     c10:	9b 81       	ldd	r25, Y+3	; 0x03
     c12:	ac 81       	ldd	r26, Y+4	; 0x04
     c14:	bd 81       	ldd	r27, Y+5	; 0x05
     c16:	01 96       	adiw	r24, 0x01	; 1
     c18:	a1 1d       	adc	r26, r1
     c1a:	b1 1d       	adc	r27, r1
     c1c:	8a 83       	std	Y+2, r24	; 0x02
     c1e:	9b 83       	std	Y+3, r25	; 0x03
     c20:	ac 83       	std	Y+4, r26	; 0x04
     c22:	bd 83       	std	Y+5, r27	; 0x05
#if AUTO_Trigger == disabled //POLLING
		/*Start Conversion*/ //single conversion
		SET_BIT(ADCSRA,ADCSRA_ADSC);

		/*Polling (busy waiting) until the conversion complete flag is set OR Counter reaching TimeOUT Value*/
		while(((GET_BIT(ADCSRA,ADCSRA_ADIF))==0) && (Local_u32Counter!= ADC_u32TimeOUT) )
     c24:	e6 e2       	ldi	r30, 0x26	; 38
     c26:	f0 e0       	ldi	r31, 0x00	; 0
     c28:	80 81       	ld	r24, Z
     c2a:	82 95       	swap	r24
     c2c:	8f 70       	andi	r24, 0x0F	; 15
     c2e:	88 2f       	mov	r24, r24
     c30:	90 e0       	ldi	r25, 0x00	; 0
     c32:	81 70       	andi	r24, 0x01	; 1
     c34:	90 70       	andi	r25, 0x00	; 0
     c36:	00 97       	sbiw	r24, 0x00	; 0
     c38:	61 f4       	brne	.+24     	; 0xc52 <ADC_u16StartConversionSynch+0xaa>
     c3a:	8a 81       	ldd	r24, Y+2	; 0x02
     c3c:	9b 81       	ldd	r25, Y+3	; 0x03
     c3e:	ac 81       	ldd	r26, Y+4	; 0x04
     c40:	bd 81       	ldd	r27, Y+5	; 0x05
     c42:	80 35       	cpi	r24, 0x50	; 80
     c44:	23 ec       	ldi	r18, 0xC3	; 195
     c46:	92 07       	cpc	r25, r18
     c48:	20 e0       	ldi	r18, 0x00	; 0
     c4a:	a2 07       	cpc	r26, r18
     c4c:	20 e0       	ldi	r18, 0x00	; 0
     c4e:	b2 07       	cpc	r27, r18
     c50:	f1 f6       	brne	.-68     	; 0xc0e <ADC_u16StartConversionSynch+0x66>
		{
			Local_u32Counter++;
		}

		if (Local_u32Counter==ADC_u32TimeOUT)
     c52:	8a 81       	ldd	r24, Y+2	; 0x02
     c54:	9b 81       	ldd	r25, Y+3	; 0x03
     c56:	ac 81       	ldd	r26, Y+4	; 0x04
     c58:	bd 81       	ldd	r27, Y+5	; 0x05
     c5a:	80 35       	cpi	r24, 0x50	; 80
     c5c:	23 ec       	ldi	r18, 0xC3	; 195
     c5e:	92 07       	cpc	r25, r18
     c60:	20 e0       	ldi	r18, 0x00	; 0
     c62:	a2 07       	cpc	r26, r18
     c64:	20 e0       	ldi	r18, 0x00	; 0
     c66:	b2 07       	cpc	r27, r18
     c68:	19 f4       	brne	.+6      	; 0xc70 <ADC_u16StartConversionSynch+0xc8>
		{
			//loop is broken because the time out is reached
			Local_u8ErrorState=NOK;
     c6a:	81 e0       	ldi	r24, 0x01	; 1
     c6c:	89 83       	std	Y+1, r24	; 0x01
     c6e:	25 c0       	rjmp	.+74     	; 0xcba <ADC_u16StartConversionSynch+0x112>
		}
		else
		{
			//Loop is broken because flag is raised
			/*Clear the conversion complete flag*/
			SET_BIT(ADCSRA,ADCSRA_ADIF);
     c70:	a6 e2       	ldi	r26, 0x26	; 38
     c72:	b0 e0       	ldi	r27, 0x00	; 0
     c74:	e6 e2       	ldi	r30, 0x26	; 38
     c76:	f0 e0       	ldi	r31, 0x00	; 0
     c78:	80 81       	ld	r24, Z
     c7a:	80 61       	ori	r24, 0x10	; 16
     c7c:	8c 93       	st	X, r24

			if(ReadingContainer == 1) //_8_BITS
     c7e:	8e 81       	ldd	r24, Y+6	; 0x06
     c80:	81 30       	cpi	r24, 0x01	; 1
     c82:	51 f4       	brne	.+20     	; 0xc98 <ADC_u16StartConversionSynch+0xf0>
			{
				/*Return the reading*/
				*Copy_Ptru16Reading =  ADCH;
     c84:	e5 e2       	ldi	r30, 0x25	; 37
     c86:	f0 e0       	ldi	r31, 0x00	; 0
     c88:	80 81       	ld	r24, Z
     c8a:	88 2f       	mov	r24, r24
     c8c:	90 e0       	ldi	r25, 0x00	; 0
     c8e:	e8 85       	ldd	r30, Y+8	; 0x08
     c90:	f9 85       	ldd	r31, Y+9	; 0x09
     c92:	91 83       	std	Z+1, r25	; 0x01
     c94:	80 83       	st	Z, r24
     c96:	0b c0       	rjmp	.+22     	; 0xcae <ADC_u16StartConversionSynch+0x106>
			}
			else if(ReadingContainer == 2)//_10_BITS
     c98:	8e 81       	ldd	r24, Y+6	; 0x06
     c9a:	82 30       	cpi	r24, 0x02	; 2
     c9c:	41 f4       	brne	.+16     	; 0xcae <ADC_u16StartConversionSynch+0x106>
			{
				*Copy_Ptru16Reading = ADC_DATA;
     c9e:	e4 e2       	ldi	r30, 0x24	; 36
     ca0:	f0 e0       	ldi	r31, 0x00	; 0
     ca2:	80 81       	ld	r24, Z
     ca4:	91 81       	ldd	r25, Z+1	; 0x01
     ca6:	e8 85       	ldd	r30, Y+8	; 0x08
     ca8:	f9 85       	ldd	r31, Y+9	; 0x09
     caa:	91 83       	std	Z+1, r25	; 0x01
     cac:	80 83       	st	Z, r24
			}
			/*ADC is finished , return it to IDLE*/
			ADC_u8Busy_State=IDLE;
     cae:	81 e0       	ldi	r24, 0x01	; 1
     cb0:	80 93 68 00 	sts	0x0068, r24
     cb4:	02 c0       	rjmp	.+4      	; 0xcba <ADC_u16StartConversionSynch+0x112>

#endif
	}
	else
	{
		Local_u8ErrorState=BUSY_FUNC;
     cb6:	83 e0       	ldi	r24, 0x03	; 3
     cb8:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
     cba:	89 81       	ldd	r24, Y+1	; 0x01
     cbc:	88 2f       	mov	r24, r24
     cbe:	90 e0       	ldi	r25, 0x00	; 0

}
     cc0:	29 96       	adiw	r28, 0x09	; 9
     cc2:	0f b6       	in	r0, 0x3f	; 63
     cc4:	f8 94       	cli
     cc6:	de bf       	out	0x3e, r29	; 62
     cc8:	0f be       	out	0x3f, r0	; 63
     cca:	cd bf       	out	0x3d, r28	; 61
     ccc:	cf 91       	pop	r28
     cce:	df 91       	pop	r29
     cd0:	08 95       	ret

00000cd2 <ADC_u16StartConversionAsynch>:




u16 ADC_u16StartConversionAsynch(u8 Copy_u8Channel , u16* Copy_Ptru16Reading,void(*Copy_pvNotificationFUNC)(void))
{
     cd2:	df 93       	push	r29
     cd4:	cf 93       	push	r28
     cd6:	00 d0       	rcall	.+0      	; 0xcd8 <ADC_u16StartConversionAsynch+0x6>
     cd8:	00 d0       	rcall	.+0      	; 0xcda <ADC_u16StartConversionAsynch+0x8>
     cda:	00 d0       	rcall	.+0      	; 0xcdc <ADC_u16StartConversionAsynch+0xa>
     cdc:	cd b7       	in	r28, 0x3d	; 61
     cde:	de b7       	in	r29, 0x3e	; 62
     ce0:	8a 83       	std	Y+2, r24	; 0x02
     ce2:	7c 83       	std	Y+4, r23	; 0x04
     ce4:	6b 83       	std	Y+3, r22	; 0x03
     ce6:	5e 83       	std	Y+6, r21	; 0x06
     ce8:	4d 83       	std	Y+5, r20	; 0x05
	u8 Local_u8ErrorState;

	if(ADC_u8Busy_State==IDLE)
     cea:	80 91 68 00 	lds	r24, 0x0068
     cee:	81 30       	cpi	r24, 0x01	; 1
     cf0:	d1 f5       	brne	.+116    	; 0xd66 <ADC_u16StartConversionAsynch+0x94>
	{
		if((Copy_Ptru16Reading == NULL) ||( Copy_pvNotificationFUNC == NULL))
     cf2:	8b 81       	ldd	r24, Y+3	; 0x03
     cf4:	9c 81       	ldd	r25, Y+4	; 0x04
     cf6:	00 97       	sbiw	r24, 0x00	; 0
     cf8:	21 f0       	breq	.+8      	; 0xd02 <ADC_u16StartConversionAsynch+0x30>
     cfa:	8d 81       	ldd	r24, Y+5	; 0x05
     cfc:	9e 81       	ldd	r25, Y+6	; 0x06
     cfe:	00 97       	sbiw	r24, 0x00	; 0
     d00:	19 f4       	brne	.+6      	; 0xd08 <ADC_u16StartConversionAsynch+0x36>
		{
			Local_u8ErrorState= NULL_POINTER;
     d02:	82 e0       	ldi	r24, 0x02	; 2
     d04:	89 83       	std	Y+1, r24	; 0x01
     d06:	31 c0       	rjmp	.+98     	; 0xd6a <ADC_u16StartConversionAsynch+0x98>
		}
		else
		{
			/*Make ADC Busy in order not to work until be idle*/
			ADC_u8Busy_State=BUSY;
     d08:	82 e0       	ldi	r24, 0x02	; 2
     d0a:	80 93 68 00 	sts	0x0068, r24

			/*Make ISR source Single Channel Asynchronous*/
			ADC_u8ISRsource=SingleChannelAsynch;
     d0e:	10 92 74 00 	sts	0x0074, r1

			/*Initialize the reading variable globally*/
			ADC_pu16Reading = Copy_Ptru16Reading;
     d12:	8b 81       	ldd	r24, Y+3	; 0x03
     d14:	9c 81       	ldd	r25, Y+4	; 0x04
     d16:	90 93 6b 00 	sts	0x006B, r25
     d1a:	80 93 6a 00 	sts	0x006A, r24
			/*Initialize the call back notification function globally*/
			ADC_pvCallBackNotificationFUNC=Copy_pvNotificationFUNC;
     d1e:	8d 81       	ldd	r24, Y+5	; 0x05
     d20:	9e 81       	ldd	r25, Y+6	; 0x06
     d22:	90 93 6d 00 	sts	0x006D, r25
     d26:	80 93 6c 00 	sts	0x006C, r24
			/*Clear the MUX Bits in ADMUX REG*/
			ADMUX &= InputChannel_Masking;
     d2a:	a7 e2       	ldi	r26, 0x27	; 39
     d2c:	b0 e0       	ldi	r27, 0x00	; 0
     d2e:	e7 e2       	ldi	r30, 0x27	; 39
     d30:	f0 e0       	ldi	r31, 0x00	; 0
     d32:	80 81       	ld	r24, Z
     d34:	80 76       	andi	r24, 0x60	; 96
     d36:	8c 93       	st	X, r24

			/*SET the required channel into the MUX Bits*/
			ADMUX |= Copy_u8Channel;//BIT MASKING
     d38:	a7 e2       	ldi	r26, 0x27	; 39
     d3a:	b0 e0       	ldi	r27, 0x00	; 0
     d3c:	e7 e2       	ldi	r30, 0x27	; 39
     d3e:	f0 e0       	ldi	r31, 0x00	; 0
     d40:	90 81       	ld	r25, Z
     d42:	8a 81       	ldd	r24, Y+2	; 0x02
     d44:	89 2b       	or	r24, r25
     d46:	8c 93       	st	X, r24

			/*Start Conversion*/ //single conversion
			SET_BIT(ADCSRA,ADCSRA_ADSC);
     d48:	a6 e2       	ldi	r26, 0x26	; 38
     d4a:	b0 e0       	ldi	r27, 0x00	; 0
     d4c:	e6 e2       	ldi	r30, 0x26	; 38
     d4e:	f0 e0       	ldi	r31, 0x00	; 0
     d50:	80 81       	ld	r24, Z
     d52:	80 64       	ori	r24, 0x40	; 64
     d54:	8c 93       	st	X, r24


			/*ADC Interrupt Enable*/
			SET_BIT(ADCSRA,ADCSRA_ADIE);
     d56:	a6 e2       	ldi	r26, 0x26	; 38
     d58:	b0 e0       	ldi	r27, 0x00	; 0
     d5a:	e6 e2       	ldi	r30, 0x26	; 38
     d5c:	f0 e0       	ldi	r31, 0x00	; 0
     d5e:	80 81       	ld	r24, Z
     d60:	88 60       	ori	r24, 0x08	; 8
     d62:	8c 93       	st	X, r24
     d64:	02 c0       	rjmp	.+4      	; 0xd6a <ADC_u16StartConversionAsynch+0x98>

		}
	}
	else
	{
		Local_u8ErrorState=BUSY_FUNC;
     d66:	83 e0       	ldi	r24, 0x03	; 3
     d68:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
     d6a:	89 81       	ldd	r24, Y+1	; 0x01
     d6c:	88 2f       	mov	r24, r24
     d6e:	90 e0       	ldi	r25, 0x00	; 0
}
     d70:	26 96       	adiw	r28, 0x06	; 6
     d72:	0f b6       	in	r0, 0x3f	; 63
     d74:	f8 94       	cli
     d76:	de bf       	out	0x3e, r29	; 62
     d78:	0f be       	out	0x3f, r0	; 63
     d7a:	cd bf       	out	0x3d, r28	; 61
     d7c:	cf 91       	pop	r28
     d7e:	df 91       	pop	r29
     d80:	08 95       	ret

00000d82 <Mapping>:

s32 Mapping(s32 Input_MIN,s32 Input_MAX,s32 Output_MIN,s32 Output_MAX,s32 Input_Value)//A function of a straight line
{
     d82:	af 92       	push	r10
     d84:	bf 92       	push	r11
     d86:	cf 92       	push	r12
     d88:	df 92       	push	r13
     d8a:	ef 92       	push	r14
     d8c:	ff 92       	push	r15
     d8e:	0f 93       	push	r16
     d90:	1f 93       	push	r17
     d92:	df 93       	push	r29
     d94:	cf 93       	push	r28
     d96:	cd b7       	in	r28, 0x3d	; 61
     d98:	de b7       	in	r29, 0x3e	; 62
     d9a:	60 97       	sbiw	r28, 0x10	; 16
     d9c:	0f b6       	in	r0, 0x3f	; 63
     d9e:	f8 94       	cli
     da0:	de bf       	out	0x3e, r29	; 62
     da2:	0f be       	out	0x3f, r0	; 63
     da4:	cd bf       	out	0x3d, r28	; 61
     da6:	69 83       	std	Y+1, r22	; 0x01
     da8:	7a 83       	std	Y+2, r23	; 0x02
     daa:	8b 83       	std	Y+3, r24	; 0x03
     dac:	9c 83       	std	Y+4, r25	; 0x04
     dae:	2d 83       	std	Y+5, r18	; 0x05
     db0:	3e 83       	std	Y+6, r19	; 0x06
     db2:	4f 83       	std	Y+7, r20	; 0x07
     db4:	58 87       	std	Y+8, r21	; 0x08
     db6:	e9 86       	std	Y+9, r14	; 0x09
     db8:	fa 86       	std	Y+10, r15	; 0x0a
     dba:	0b 87       	std	Y+11, r16	; 0x0b
     dbc:	1c 87       	std	Y+12, r17	; 0x0c
     dbe:	ad 86       	std	Y+13, r10	; 0x0d
     dc0:	be 86       	std	Y+14, r11	; 0x0e
     dc2:	cf 86       	std	Y+15, r12	; 0x0f
     dc4:	d8 8a       	std	Y+16, r13	; 0x10
	return (((Output_MAX-Output_MIN)*(Input_Value-Input_MIN))/(Input_MAX-Input_MIN))+(Output_MIN);
     dc6:	2d 85       	ldd	r18, Y+13	; 0x0d
     dc8:	3e 85       	ldd	r19, Y+14	; 0x0e
     dca:	4f 85       	ldd	r20, Y+15	; 0x0f
     dcc:	58 89       	ldd	r21, Y+16	; 0x10
     dce:	89 85       	ldd	r24, Y+9	; 0x09
     dd0:	9a 85       	ldd	r25, Y+10	; 0x0a
     dd2:	ab 85       	ldd	r26, Y+11	; 0x0b
     dd4:	bc 85       	ldd	r27, Y+12	; 0x0c
     dd6:	79 01       	movw	r14, r18
     dd8:	8a 01       	movw	r16, r20
     dda:	e8 1a       	sub	r14, r24
     ddc:	f9 0a       	sbc	r15, r25
     dde:	0a 0b       	sbc	r16, r26
     de0:	1b 0b       	sbc	r17, r27
     de2:	2d 8d       	ldd	r18, Y+29	; 0x1d
     de4:	3e 8d       	ldd	r19, Y+30	; 0x1e
     de6:	4f 8d       	ldd	r20, Y+31	; 0x1f
     de8:	58 a1       	ldd	r21, Y+32	; 0x20
     dea:	89 81       	ldd	r24, Y+1	; 0x01
     dec:	9a 81       	ldd	r25, Y+2	; 0x02
     dee:	ab 81       	ldd	r26, Y+3	; 0x03
     df0:	bc 81       	ldd	r27, Y+4	; 0x04
     df2:	28 1b       	sub	r18, r24
     df4:	39 0b       	sbc	r19, r25
     df6:	4a 0b       	sbc	r20, r26
     df8:	5b 0b       	sbc	r21, r27
     dfa:	c8 01       	movw	r24, r16
     dfc:	b7 01       	movw	r22, r14
     dfe:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <__mulsi3>
     e02:	7b 01       	movw	r14, r22
     e04:	8c 01       	movw	r16, r24
     e06:	2d 81       	ldd	r18, Y+5	; 0x05
     e08:	3e 81       	ldd	r19, Y+6	; 0x06
     e0a:	4f 81       	ldd	r20, Y+7	; 0x07
     e0c:	58 85       	ldd	r21, Y+8	; 0x08
     e0e:	89 81       	ldd	r24, Y+1	; 0x01
     e10:	9a 81       	ldd	r25, Y+2	; 0x02
     e12:	ab 81       	ldd	r26, Y+3	; 0x03
     e14:	bc 81       	ldd	r27, Y+4	; 0x04
     e16:	28 1b       	sub	r18, r24
     e18:	39 0b       	sbc	r19, r25
     e1a:	4a 0b       	sbc	r20, r26
     e1c:	5b 0b       	sbc	r21, r27
     e1e:	c8 01       	movw	r24, r16
     e20:	b7 01       	movw	r22, r14
     e22:	0e 94 e4 0d 	call	0x1bc8	; 0x1bc8 <__divmodsi4>
     e26:	da 01       	movw	r26, r20
     e28:	c9 01       	movw	r24, r18
     e2a:	9c 01       	movw	r18, r24
     e2c:	ad 01       	movw	r20, r26
     e2e:	89 85       	ldd	r24, Y+9	; 0x09
     e30:	9a 85       	ldd	r25, Y+10	; 0x0a
     e32:	ab 85       	ldd	r26, Y+11	; 0x0b
     e34:	bc 85       	ldd	r27, Y+12	; 0x0c
     e36:	82 0f       	add	r24, r18
     e38:	93 1f       	adc	r25, r19
     e3a:	a4 1f       	adc	r26, r20
     e3c:	b5 1f       	adc	r27, r21
}
     e3e:	bc 01       	movw	r22, r24
     e40:	cd 01       	movw	r24, r26
     e42:	60 96       	adiw	r28, 0x10	; 16
     e44:	0f b6       	in	r0, 0x3f	; 63
     e46:	f8 94       	cli
     e48:	de bf       	out	0x3e, r29	; 62
     e4a:	0f be       	out	0x3f, r0	; 63
     e4c:	cd bf       	out	0x3d, r28	; 61
     e4e:	cf 91       	pop	r28
     e50:	df 91       	pop	r29
     e52:	1f 91       	pop	r17
     e54:	0f 91       	pop	r16
     e56:	ff 90       	pop	r15
     e58:	ef 90       	pop	r14
     e5a:	df 90       	pop	r13
     e5c:	cf 90       	pop	r12
     e5e:	bf 90       	pop	r11
     e60:	af 90       	pop	r10
     e62:	08 95       	ret

00000e64 <ADC_u8StartChainAsynchronous>:



u8 ADC_u8StartChainAsynchronous(Chain_t *Copy_Chain)
{
     e64:	df 93       	push	r29
     e66:	cf 93       	push	r28
     e68:	00 d0       	rcall	.+0      	; 0xe6a <ADC_u8StartChainAsynchronous+0x6>
     e6a:	0f 92       	push	r0
     e6c:	cd b7       	in	r28, 0x3d	; 61
     e6e:	de b7       	in	r29, 0x3e	; 62
     e70:	9b 83       	std	Y+3, r25	; 0x03
     e72:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState=OK;
     e74:	19 82       	std	Y+1, r1	; 0x01
	/*Check NULL pointer*/
	if(Copy_Chain==NULL)
     e76:	8a 81       	ldd	r24, Y+2	; 0x02
     e78:	9b 81       	ldd	r25, Y+3	; 0x03
     e7a:	00 97       	sbiw	r24, 0x00	; 0
     e7c:	19 f4       	brne	.+6      	; 0xe84 <ADC_u8StartChainAsynchronous+0x20>
	{
		Local_u8ErrorState=NULL_POINTER;
     e7e:	82 e0       	ldi	r24, 0x02	; 2
     e80:	89 83       	std	Y+1, r24	; 0x01
     e82:	55 c0       	rjmp	.+170    	; 0xf2e <ADC_u8StartChainAsynchronous+0xca>
	}
	else
	{
		if (ADC_u8Busy_State==IDLE)
     e84:	80 91 68 00 	lds	r24, 0x0068
     e88:	81 30       	cpi	r24, 0x01	; 1
     e8a:	09 f0       	breq	.+2      	; 0xe8e <ADC_u8StartChainAsynchronous+0x2a>
     e8c:	4e c0       	rjmp	.+156    	; 0xf2a <ADC_u8StartChainAsynchronous+0xc6>
		{
			/*Make ADC BUSY*/
			ADC_u8Busy_State=BUSY;
     e8e:	82 e0       	ldi	r24, 0x02	; 2
     e90:	80 93 68 00 	sts	0x0068, r24

			/*Make ISR source Chain Asynchronous*/
			ADC_u8ISRsource=ChainAsynch;
     e94:	81 e0       	ldi	r24, 0x01	; 1
     e96:	80 93 74 00 	sts	0x0074, r24

			/*Initialize Chain Channel Array*/
			ADC_pu8Chain_ChannelArr=Copy_Chain->Channel;
     e9a:	ea 81       	ldd	r30, Y+2	; 0x02
     e9c:	fb 81       	ldd	r31, Y+3	; 0x03
     e9e:	80 81       	ld	r24, Z
     ea0:	91 81       	ldd	r25, Z+1	; 0x01
     ea2:	90 93 6f 00 	sts	0x006F, r25
     ea6:	80 93 6e 00 	sts	0x006E, r24

			/*Initialize Result Array*/
			ADC_pu16Chain_ResultArray=Copy_Chain->Result;
     eaa:	ea 81       	ldd	r30, Y+2	; 0x02
     eac:	fb 81       	ldd	r31, Y+3	; 0x03
     eae:	82 81       	ldd	r24, Z+2	; 0x02
     eb0:	93 81       	ldd	r25, Z+3	; 0x03
     eb2:	90 93 71 00 	sts	0x0071, r25
     eb6:	80 93 70 00 	sts	0x0070, r24

			/*Initialize Chain Size*/
			ADC_pu8Chain_Size=Copy_Chain->Chain_Size;
     eba:	ea 81       	ldd	r30, Y+2	; 0x02
     ebc:	fb 81       	ldd	r31, Y+3	; 0x03
     ebe:	84 81       	ldd	r24, Z+4	; 0x04
     ec0:	80 93 73 00 	sts	0x0073, r24

			/*Initialize Notification Function*/
			ADC_pvCallBackNotificationFUNC=Copy_Chain->Notification_FUNC;
     ec4:	ea 81       	ldd	r30, Y+2	; 0x02
     ec6:	fb 81       	ldd	r31, Y+3	; 0x03
     ec8:	85 81       	ldd	r24, Z+5	; 0x05
     eca:	96 81       	ldd	r25, Z+6	; 0x06
     ecc:	90 93 6d 00 	sts	0x006D, r25
     ed0:	80 93 6c 00 	sts	0x006C, r24

			/*Initialize Current Conversion Index*/
			ADC_u8ChainConversionIndex=0;
     ed4:	10 92 72 00 	sts	0x0072, r1

			/*Set the Required Channel (first channel)*/
			ADMUX &= 0b11100000;
     ed8:	a7 e2       	ldi	r26, 0x27	; 39
     eda:	b0 e0       	ldi	r27, 0x00	; 0
     edc:	e7 e2       	ldi	r30, 0x27	; 39
     ede:	f0 e0       	ldi	r31, 0x00	; 0
     ee0:	80 81       	ld	r24, Z
     ee2:	80 7e       	andi	r24, 0xE0	; 224
     ee4:	8c 93       	st	X, r24
			ADMUX |= ADC_pu8Chain_ChannelArr[ADC_u8ChainConversionIndex]; // first channel index=0
     ee6:	a7 e2       	ldi	r26, 0x27	; 39
     ee8:	b0 e0       	ldi	r27, 0x00	; 0
     eea:	e7 e2       	ldi	r30, 0x27	; 39
     eec:	f0 e0       	ldi	r31, 0x00	; 0
     eee:	40 81       	ld	r20, Z
     ef0:	20 91 6e 00 	lds	r18, 0x006E
     ef4:	30 91 6f 00 	lds	r19, 0x006F
     ef8:	80 91 72 00 	lds	r24, 0x0072
     efc:	88 2f       	mov	r24, r24
     efe:	90 e0       	ldi	r25, 0x00	; 0
     f00:	f9 01       	movw	r30, r18
     f02:	e8 0f       	add	r30, r24
     f04:	f9 1f       	adc	r31, r25
     f06:	80 81       	ld	r24, Z
     f08:	84 2b       	or	r24, r20
     f0a:	8c 93       	st	X, r24
			/*Start Conversion*/
			SET_BIT(ADCSRA,ADCSRA_ADSC);
     f0c:	a6 e2       	ldi	r26, 0x26	; 38
     f0e:	b0 e0       	ldi	r27, 0x00	; 0
     f10:	e6 e2       	ldi	r30, 0x26	; 38
     f12:	f0 e0       	ldi	r31, 0x00	; 0
     f14:	80 81       	ld	r24, Z
     f16:	80 64       	ori	r24, 0x40	; 64
     f18:	8c 93       	st	X, r24

			/*Enable Conversion Complete Interrupt*/
			SET_BIT(ADCSRA,ADCSRA_ADIE);
     f1a:	a6 e2       	ldi	r26, 0x26	; 38
     f1c:	b0 e0       	ldi	r27, 0x00	; 0
     f1e:	e6 e2       	ldi	r30, 0x26	; 38
     f20:	f0 e0       	ldi	r31, 0x00	; 0
     f22:	80 81       	ld	r24, Z
     f24:	88 60       	ori	r24, 0x08	; 8
     f26:	8c 93       	st	X, r24
     f28:	02 c0       	rjmp	.+4      	; 0xf2e <ADC_u8StartChainAsynchronous+0xca>
		}
		else
		{
			Local_u8ErrorState=BUSY_FUNC;
     f2a:	83 e0       	ldi	r24, 0x03	; 3
     f2c:	89 83       	std	Y+1, r24	; 0x01
		}

	}

	return Local_u8ErrorState;
     f2e:	89 81       	ldd	r24, Y+1	; 0x01
}
     f30:	0f 90       	pop	r0
     f32:	0f 90       	pop	r0
     f34:	0f 90       	pop	r0
     f36:	cf 91       	pop	r28
     f38:	df 91       	pop	r29
     f3a:	08 95       	ret

00000f3c <__vector_16>:

void __vector_16 (void)   __attribute__((signal));
void __vector_16 (void)
{
     f3c:	1f 92       	push	r1
     f3e:	0f 92       	push	r0
     f40:	0f b6       	in	r0, 0x3f	; 63
     f42:	0f 92       	push	r0
     f44:	11 24       	eor	r1, r1
     f46:	2f 93       	push	r18
     f48:	3f 93       	push	r19
     f4a:	4f 93       	push	r20
     f4c:	5f 93       	push	r21
     f4e:	6f 93       	push	r22
     f50:	7f 93       	push	r23
     f52:	8f 93       	push	r24
     f54:	9f 93       	push	r25
     f56:	af 93       	push	r26
     f58:	bf 93       	push	r27
     f5a:	ef 93       	push	r30
     f5c:	ff 93       	push	r31
     f5e:	df 93       	push	r29
     f60:	cf 93       	push	r28
     f62:	0f 92       	push	r0
     f64:	cd b7       	in	r28, 0x3d	; 61
     f66:	de b7       	in	r29, 0x3e	; 62
	u8 ReadingContainer=BITS_READ;
     f68:	81 e0       	ldi	r24, 0x01	; 1
     f6a:	89 83       	std	Y+1, r24	; 0x01

	if(ADC_u8ISRsource==SingleChannelAsynch)
     f6c:	80 91 74 00 	lds	r24, 0x0074
     f70:	88 23       	and	r24, r24
     f72:	69 f5       	brne	.+90     	; 0xfce <__vector_16+0x92>
	{
		/*Read ADC Result*/
		if(ReadingContainer == 1) //_8_BITS
     f74:	89 81       	ldd	r24, Y+1	; 0x01
     f76:	81 30       	cpi	r24, 0x01	; 1
     f78:	69 f4       	brne	.+26     	; 0xf94 <__vector_16+0x58>
		{
			/*Return the reading*/
			*ADC_pu16Reading =  ADCH;
     f7a:	a0 91 6a 00 	lds	r26, 0x006A
     f7e:	b0 91 6b 00 	lds	r27, 0x006B
     f82:	e5 e2       	ldi	r30, 0x25	; 37
     f84:	f0 e0       	ldi	r31, 0x00	; 0
     f86:	80 81       	ld	r24, Z
     f88:	88 2f       	mov	r24, r24
     f8a:	90 e0       	ldi	r25, 0x00	; 0
     f8c:	11 96       	adiw	r26, 0x01	; 1
     f8e:	9c 93       	st	X, r25
     f90:	8e 93       	st	-X, r24
     f92:	0d c0       	rjmp	.+26     	; 0xfae <__vector_16+0x72>
		}
		else if(ReadingContainer == 2)//_10_BITS
     f94:	89 81       	ldd	r24, Y+1	; 0x01
     f96:	82 30       	cpi	r24, 0x02	; 2
     f98:	51 f4       	brne	.+20     	; 0xfae <__vector_16+0x72>
		{
			*ADC_pu16Reading = ADC_DATA;
     f9a:	e0 91 6a 00 	lds	r30, 0x006A
     f9e:	f0 91 6b 00 	lds	r31, 0x006B
     fa2:	a4 e2       	ldi	r26, 0x24	; 36
     fa4:	b0 e0       	ldi	r27, 0x00	; 0
     fa6:	8d 91       	ld	r24, X+
     fa8:	9c 91       	ld	r25, X
     faa:	91 83       	std	Z+1, r25	; 0x01
     fac:	80 83       	st	Z, r24
		}

		/*Make ADC_State be IDLE because it finished*/
		ADC_u8Busy_State=IDLE;
     fae:	81 e0       	ldi	r24, 0x01	; 1
     fb0:	80 93 68 00 	sts	0x0068, r24

		/*Invoke the call back notification function*/
		ADC_pvCallBackNotificationFUNC();
     fb4:	e0 91 6c 00 	lds	r30, 0x006C
     fb8:	f0 91 6d 00 	lds	r31, 0x006D
     fbc:	09 95       	icall

		/*Disable ADC conversion complete interrupt*/
		CLR_BIT(ADCSRA,ADCSRA_ADIE);
     fbe:	a6 e2       	ldi	r26, 0x26	; 38
     fc0:	b0 e0       	ldi	r27, 0x00	; 0
     fc2:	e6 e2       	ldi	r30, 0x26	; 38
     fc4:	f0 e0       	ldi	r31, 0x00	; 0
     fc6:	80 81       	ld	r24, Z
     fc8:	87 7f       	andi	r24, 0xF7	; 247
     fca:	8c 93       	st	X, r24
     fcc:	71 c0       	rjmp	.+226    	; 0x10b0 <__vector_16+0x174>
	}
	else if(ADC_u8ISRsource==ChainAsynch)/*ISR source is Chain*/
     fce:	80 91 74 00 	lds	r24, 0x0074
     fd2:	81 30       	cpi	r24, 0x01	; 1
     fd4:	09 f0       	breq	.+2      	; 0xfd8 <__vector_16+0x9c>
     fd6:	6c c0       	rjmp	.+216    	; 0x10b0 <__vector_16+0x174>
	{
		/*Read the current conversion*/
		if(ReadingContainer == 1) //_8_BITS
     fd8:	89 81       	ldd	r24, Y+1	; 0x01
     fda:	81 30       	cpi	r24, 0x01	; 1
     fdc:	b1 f4       	brne	.+44     	; 0x100a <__vector_16+0xce>
		{
			/*Return the reading*/
			ADC_pu16Chain_ResultArray[ADC_u8ChainConversionIndex] =  ADCH;
     fde:	20 91 70 00 	lds	r18, 0x0070
     fe2:	30 91 71 00 	lds	r19, 0x0071
     fe6:	80 91 72 00 	lds	r24, 0x0072
     fea:	88 2f       	mov	r24, r24
     fec:	90 e0       	ldi	r25, 0x00	; 0
     fee:	88 0f       	add	r24, r24
     ff0:	99 1f       	adc	r25, r25
     ff2:	d9 01       	movw	r26, r18
     ff4:	a8 0f       	add	r26, r24
     ff6:	b9 1f       	adc	r27, r25
     ff8:	e5 e2       	ldi	r30, 0x25	; 37
     ffa:	f0 e0       	ldi	r31, 0x00	; 0
     ffc:	80 81       	ld	r24, Z
     ffe:	88 2f       	mov	r24, r24
    1000:	90 e0       	ldi	r25, 0x00	; 0
    1002:	11 96       	adiw	r26, 0x01	; 1
    1004:	9c 93       	st	X, r25
    1006:	8e 93       	st	-X, r24
    1008:	17 c0       	rjmp	.+46     	; 0x1038 <__vector_16+0xfc>
		}
		else if(ReadingContainer == 2)//_10_BITS
    100a:	89 81       	ldd	r24, Y+1	; 0x01
    100c:	82 30       	cpi	r24, 0x02	; 2
    100e:	a1 f4       	brne	.+40     	; 0x1038 <__vector_16+0xfc>
		{
			ADC_pu16Chain_ResultArray[ADC_u8ChainConversionIndex] = ADC_DATA;
    1010:	20 91 70 00 	lds	r18, 0x0070
    1014:	30 91 71 00 	lds	r19, 0x0071
    1018:	80 91 72 00 	lds	r24, 0x0072
    101c:	88 2f       	mov	r24, r24
    101e:	90 e0       	ldi	r25, 0x00	; 0
    1020:	88 0f       	add	r24, r24
    1022:	99 1f       	adc	r25, r25
    1024:	d9 01       	movw	r26, r18
    1026:	a8 0f       	add	r26, r24
    1028:	b9 1f       	adc	r27, r25
    102a:	e4 e2       	ldi	r30, 0x24	; 36
    102c:	f0 e0       	ldi	r31, 0x00	; 0
    102e:	80 81       	ld	r24, Z
    1030:	91 81       	ldd	r25, Z+1	; 0x01
    1032:	11 96       	adiw	r26, 0x01	; 1
    1034:	9c 93       	st	X, r25
    1036:	8e 93       	st	-X, r24
		}

		/*Increment chain index*/
		ADC_u8ChainConversionIndex++;
    1038:	80 91 72 00 	lds	r24, 0x0072
    103c:	8f 5f       	subi	r24, 0xFF	; 255
    103e:	80 93 72 00 	sts	0x0072, r24

		/*Check chain is finished or not*/
		if (ADC_u8ChainConversionIndex==ADC_pu8Chain_Size)
    1042:	90 91 72 00 	lds	r25, 0x0072
    1046:	80 91 73 00 	lds	r24, 0x0073
    104a:	98 17       	cp	r25, r24
    104c:	81 f4       	brne	.+32     	; 0x106e <__vector_16+0x132>
		{
			/*chain is finished*/
			/*Make ADC IDLE*/
			ADC_u8Busy_State=IDLE;
    104e:	81 e0       	ldi	r24, 0x01	; 1
    1050:	80 93 68 00 	sts	0x0068, r24

			/*Invoke the call back notification function*/
			ADC_pvCallBackNotificationFUNC();
    1054:	e0 91 6c 00 	lds	r30, 0x006C
    1058:	f0 91 6d 00 	lds	r31, 0x006D
    105c:	09 95       	icall

			/*Disable ADC conversion complete interrupt*/
			CLR_BIT(ADCSRA,ADCSRA_ADIE);
    105e:	a6 e2       	ldi	r26, 0x26	; 38
    1060:	b0 e0       	ldi	r27, 0x00	; 0
    1062:	e6 e2       	ldi	r30, 0x26	; 38
    1064:	f0 e0       	ldi	r31, 0x00	; 0
    1066:	80 81       	ld	r24, Z
    1068:	87 7f       	andi	r24, 0xF7	; 247
    106a:	8c 93       	st	X, r24
    106c:	21 c0       	rjmp	.+66     	; 0x10b0 <__vector_16+0x174>
		}
		else
		{
			/*chain is not finished*/
			/*Set the new required channel*/
			ADMUX &= 0b11100000;
    106e:	a7 e2       	ldi	r26, 0x27	; 39
    1070:	b0 e0       	ldi	r27, 0x00	; 0
    1072:	e7 e2       	ldi	r30, 0x27	; 39
    1074:	f0 e0       	ldi	r31, 0x00	; 0
    1076:	80 81       	ld	r24, Z
    1078:	80 7e       	andi	r24, 0xE0	; 224
    107a:	8c 93       	st	X, r24
			ADMUX |= ADC_pu8Chain_ChannelArr[ADC_u8ChainConversionIndex];
    107c:	a7 e2       	ldi	r26, 0x27	; 39
    107e:	b0 e0       	ldi	r27, 0x00	; 0
    1080:	e7 e2       	ldi	r30, 0x27	; 39
    1082:	f0 e0       	ldi	r31, 0x00	; 0
    1084:	40 81       	ld	r20, Z
    1086:	20 91 6e 00 	lds	r18, 0x006E
    108a:	30 91 6f 00 	lds	r19, 0x006F
    108e:	80 91 72 00 	lds	r24, 0x0072
    1092:	88 2f       	mov	r24, r24
    1094:	90 e0       	ldi	r25, 0x00	; 0
    1096:	f9 01       	movw	r30, r18
    1098:	e8 0f       	add	r30, r24
    109a:	f9 1f       	adc	r31, r25
    109c:	80 81       	ld	r24, Z
    109e:	84 2b       	or	r24, r20
    10a0:	8c 93       	st	X, r24

			/*Start new Conversion*/
			SET_BIT(ADCSRA,ADCSRA_ADSC);
    10a2:	a6 e2       	ldi	r26, 0x26	; 38
    10a4:	b0 e0       	ldi	r27, 0x00	; 0
    10a6:	e6 e2       	ldi	r30, 0x26	; 38
    10a8:	f0 e0       	ldi	r31, 0x00	; 0
    10aa:	80 81       	ld	r24, Z
    10ac:	80 64       	ori	r24, 0x40	; 64
    10ae:	8c 93       	st	X, r24
		}
	}
}
    10b0:	0f 90       	pop	r0
    10b2:	cf 91       	pop	r28
    10b4:	df 91       	pop	r29
    10b6:	ff 91       	pop	r31
    10b8:	ef 91       	pop	r30
    10ba:	bf 91       	pop	r27
    10bc:	af 91       	pop	r26
    10be:	9f 91       	pop	r25
    10c0:	8f 91       	pop	r24
    10c2:	7f 91       	pop	r23
    10c4:	6f 91       	pop	r22
    10c6:	5f 91       	pop	r21
    10c8:	4f 91       	pop	r20
    10ca:	3f 91       	pop	r19
    10cc:	2f 91       	pop	r18
    10ce:	0f 90       	pop	r0
    10d0:	0f be       	out	0x3f, r0	; 63
    10d2:	0f 90       	pop	r0
    10d4:	1f 90       	pop	r1
    10d6:	18 95       	reti

000010d8 <DIO_u8SetPinValue>:

*/
/***********************************************************************/

u8 DIO_u8SetPinValue(u8 Copy_u8Port,u8 Copy_u8Pin,u8 Copy_u8Value)
{
    10d8:	df 93       	push	r29
    10da:	cf 93       	push	r28
    10dc:	cd b7       	in	r28, 0x3d	; 61
    10de:	de b7       	in	r29, 0x3e	; 62
    10e0:	28 97       	sbiw	r28, 0x08	; 8
    10e2:	0f b6       	in	r0, 0x3f	; 63
    10e4:	f8 94       	cli
    10e6:	de bf       	out	0x3e, r29	; 62
    10e8:	0f be       	out	0x3f, r0	; 63
    10ea:	cd bf       	out	0x3d, r28	; 61
    10ec:	8a 83       	std	Y+2, r24	; 0x02
    10ee:	6b 83       	std	Y+3, r22	; 0x03
    10f0:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;
    10f2:	19 82       	std	Y+1, r1	; 0x01
	if (Copy_u8Pin<=DIO_u8PIN7)
    10f4:	8b 81       	ldd	r24, Y+3	; 0x03
    10f6:	88 30       	cpi	r24, 0x08	; 8
    10f8:	08 f0       	brcs	.+2      	; 0x10fc <DIO_u8SetPinValue+0x24>
    10fa:	f4 c0       	rjmp	.+488    	; 0x12e4 <DIO_u8SetPinValue+0x20c>
	{
		if (Copy_u8Value==DIO_u8PIN_LOW)
    10fc:	8c 81       	ldd	r24, Y+4	; 0x04
    10fe:	88 23       	and	r24, r24
    1100:	09 f0       	breq	.+2      	; 0x1104 <DIO_u8SetPinValue+0x2c>
    1102:	77 c0       	rjmp	.+238    	; 0x11f2 <DIO_u8SetPinValue+0x11a>
		{
			switch(Copy_u8Port)
    1104:	8a 81       	ldd	r24, Y+2	; 0x02
    1106:	28 2f       	mov	r18, r24
    1108:	30 e0       	ldi	r19, 0x00	; 0
    110a:	38 87       	std	Y+8, r19	; 0x08
    110c:	2f 83       	std	Y+7, r18	; 0x07
    110e:	8f 81       	ldd	r24, Y+7	; 0x07
    1110:	98 85       	ldd	r25, Y+8	; 0x08
    1112:	81 30       	cpi	r24, 0x01	; 1
    1114:	91 05       	cpc	r25, r1
    1116:	59 f1       	breq	.+86     	; 0x116e <DIO_u8SetPinValue+0x96>
    1118:	2f 81       	ldd	r18, Y+7	; 0x07
    111a:	38 85       	ldd	r19, Y+8	; 0x08
    111c:	22 30       	cpi	r18, 0x02	; 2
    111e:	31 05       	cpc	r19, r1
    1120:	2c f4       	brge	.+10     	; 0x112c <DIO_u8SetPinValue+0x54>
    1122:	8f 81       	ldd	r24, Y+7	; 0x07
    1124:	98 85       	ldd	r25, Y+8	; 0x08
    1126:	00 97       	sbiw	r24, 0x00	; 0
    1128:	69 f0       	breq	.+26     	; 0x1144 <DIO_u8SetPinValue+0x6c>
    112a:	60 c0       	rjmp	.+192    	; 0x11ec <DIO_u8SetPinValue+0x114>
    112c:	2f 81       	ldd	r18, Y+7	; 0x07
    112e:	38 85       	ldd	r19, Y+8	; 0x08
    1130:	22 30       	cpi	r18, 0x02	; 2
    1132:	31 05       	cpc	r19, r1
    1134:	89 f1       	breq	.+98     	; 0x1198 <DIO_u8SetPinValue+0xc0>
    1136:	8f 81       	ldd	r24, Y+7	; 0x07
    1138:	98 85       	ldd	r25, Y+8	; 0x08
    113a:	83 30       	cpi	r24, 0x03	; 3
    113c:	91 05       	cpc	r25, r1
    113e:	09 f4       	brne	.+2      	; 0x1142 <DIO_u8SetPinValue+0x6a>
    1140:	40 c0       	rjmp	.+128    	; 0x11c2 <DIO_u8SetPinValue+0xea>
    1142:	54 c0       	rjmp	.+168    	; 0x11ec <DIO_u8SetPinValue+0x114>
			{
			case DIO_u8PORTA : CLR_BIT(PORTA,Copy_u8Pin); break;
    1144:	ab e3       	ldi	r26, 0x3B	; 59
    1146:	b0 e0       	ldi	r27, 0x00	; 0
    1148:	eb e3       	ldi	r30, 0x3B	; 59
    114a:	f0 e0       	ldi	r31, 0x00	; 0
    114c:	80 81       	ld	r24, Z
    114e:	48 2f       	mov	r20, r24
    1150:	8b 81       	ldd	r24, Y+3	; 0x03
    1152:	28 2f       	mov	r18, r24
    1154:	30 e0       	ldi	r19, 0x00	; 0
    1156:	81 e0       	ldi	r24, 0x01	; 1
    1158:	90 e0       	ldi	r25, 0x00	; 0
    115a:	02 2e       	mov	r0, r18
    115c:	02 c0       	rjmp	.+4      	; 0x1162 <DIO_u8SetPinValue+0x8a>
    115e:	88 0f       	add	r24, r24
    1160:	99 1f       	adc	r25, r25
    1162:	0a 94       	dec	r0
    1164:	e2 f7       	brpl	.-8      	; 0x115e <DIO_u8SetPinValue+0x86>
    1166:	80 95       	com	r24
    1168:	84 23       	and	r24, r20
    116a:	8c 93       	st	X, r24
    116c:	bd c0       	rjmp	.+378    	; 0x12e8 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTB : CLR_BIT(PORTB,Copy_u8Pin); break;
    116e:	a8 e3       	ldi	r26, 0x38	; 56
    1170:	b0 e0       	ldi	r27, 0x00	; 0
    1172:	e8 e3       	ldi	r30, 0x38	; 56
    1174:	f0 e0       	ldi	r31, 0x00	; 0
    1176:	80 81       	ld	r24, Z
    1178:	48 2f       	mov	r20, r24
    117a:	8b 81       	ldd	r24, Y+3	; 0x03
    117c:	28 2f       	mov	r18, r24
    117e:	30 e0       	ldi	r19, 0x00	; 0
    1180:	81 e0       	ldi	r24, 0x01	; 1
    1182:	90 e0       	ldi	r25, 0x00	; 0
    1184:	02 2e       	mov	r0, r18
    1186:	02 c0       	rjmp	.+4      	; 0x118c <DIO_u8SetPinValue+0xb4>
    1188:	88 0f       	add	r24, r24
    118a:	99 1f       	adc	r25, r25
    118c:	0a 94       	dec	r0
    118e:	e2 f7       	brpl	.-8      	; 0x1188 <DIO_u8SetPinValue+0xb0>
    1190:	80 95       	com	r24
    1192:	84 23       	and	r24, r20
    1194:	8c 93       	st	X, r24
    1196:	a8 c0       	rjmp	.+336    	; 0x12e8 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTC : CLR_BIT(PORTC,Copy_u8Pin); break;
    1198:	a5 e3       	ldi	r26, 0x35	; 53
    119a:	b0 e0       	ldi	r27, 0x00	; 0
    119c:	e5 e3       	ldi	r30, 0x35	; 53
    119e:	f0 e0       	ldi	r31, 0x00	; 0
    11a0:	80 81       	ld	r24, Z
    11a2:	48 2f       	mov	r20, r24
    11a4:	8b 81       	ldd	r24, Y+3	; 0x03
    11a6:	28 2f       	mov	r18, r24
    11a8:	30 e0       	ldi	r19, 0x00	; 0
    11aa:	81 e0       	ldi	r24, 0x01	; 1
    11ac:	90 e0       	ldi	r25, 0x00	; 0
    11ae:	02 2e       	mov	r0, r18
    11b0:	02 c0       	rjmp	.+4      	; 0x11b6 <DIO_u8SetPinValue+0xde>
    11b2:	88 0f       	add	r24, r24
    11b4:	99 1f       	adc	r25, r25
    11b6:	0a 94       	dec	r0
    11b8:	e2 f7       	brpl	.-8      	; 0x11b2 <DIO_u8SetPinValue+0xda>
    11ba:	80 95       	com	r24
    11bc:	84 23       	and	r24, r20
    11be:	8c 93       	st	X, r24
    11c0:	93 c0       	rjmp	.+294    	; 0x12e8 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTD : CLR_BIT(PORTD,Copy_u8Pin); break;
    11c2:	a2 e3       	ldi	r26, 0x32	; 50
    11c4:	b0 e0       	ldi	r27, 0x00	; 0
    11c6:	e2 e3       	ldi	r30, 0x32	; 50
    11c8:	f0 e0       	ldi	r31, 0x00	; 0
    11ca:	80 81       	ld	r24, Z
    11cc:	48 2f       	mov	r20, r24
    11ce:	8b 81       	ldd	r24, Y+3	; 0x03
    11d0:	28 2f       	mov	r18, r24
    11d2:	30 e0       	ldi	r19, 0x00	; 0
    11d4:	81 e0       	ldi	r24, 0x01	; 1
    11d6:	90 e0       	ldi	r25, 0x00	; 0
    11d8:	02 2e       	mov	r0, r18
    11da:	02 c0       	rjmp	.+4      	; 0x11e0 <DIO_u8SetPinValue+0x108>
    11dc:	88 0f       	add	r24, r24
    11de:	99 1f       	adc	r25, r25
    11e0:	0a 94       	dec	r0
    11e2:	e2 f7       	brpl	.-8      	; 0x11dc <DIO_u8SetPinValue+0x104>
    11e4:	80 95       	com	r24
    11e6:	84 23       	and	r24, r20
    11e8:	8c 93       	st	X, r24
    11ea:	7e c0       	rjmp	.+252    	; 0x12e8 <DIO_u8SetPinValue+0x210>
			default : Local_u8ErrorState=1;break;
    11ec:	81 e0       	ldi	r24, 0x01	; 1
    11ee:	89 83       	std	Y+1, r24	; 0x01
    11f0:	7b c0       	rjmp	.+246    	; 0x12e8 <DIO_u8SetPinValue+0x210>
			}
		}
		else if (Copy_u8Value==DIO_u8PIN_HIGH)
    11f2:	8c 81       	ldd	r24, Y+4	; 0x04
    11f4:	81 30       	cpi	r24, 0x01	; 1
    11f6:	09 f0       	breq	.+2      	; 0x11fa <DIO_u8SetPinValue+0x122>
    11f8:	72 c0       	rjmp	.+228    	; 0x12de <DIO_u8SetPinValue+0x206>
		{
			switch(Copy_u8Port)
    11fa:	8a 81       	ldd	r24, Y+2	; 0x02
    11fc:	28 2f       	mov	r18, r24
    11fe:	30 e0       	ldi	r19, 0x00	; 0
    1200:	3e 83       	std	Y+6, r19	; 0x06
    1202:	2d 83       	std	Y+5, r18	; 0x05
    1204:	8d 81       	ldd	r24, Y+5	; 0x05
    1206:	9e 81       	ldd	r25, Y+6	; 0x06
    1208:	81 30       	cpi	r24, 0x01	; 1
    120a:	91 05       	cpc	r25, r1
    120c:	49 f1       	breq	.+82     	; 0x1260 <DIO_u8SetPinValue+0x188>
    120e:	2d 81       	ldd	r18, Y+5	; 0x05
    1210:	3e 81       	ldd	r19, Y+6	; 0x06
    1212:	22 30       	cpi	r18, 0x02	; 2
    1214:	31 05       	cpc	r19, r1
    1216:	2c f4       	brge	.+10     	; 0x1222 <DIO_u8SetPinValue+0x14a>
    1218:	8d 81       	ldd	r24, Y+5	; 0x05
    121a:	9e 81       	ldd	r25, Y+6	; 0x06
    121c:	00 97       	sbiw	r24, 0x00	; 0
    121e:	61 f0       	breq	.+24     	; 0x1238 <DIO_u8SetPinValue+0x160>
    1220:	5b c0       	rjmp	.+182    	; 0x12d8 <DIO_u8SetPinValue+0x200>
    1222:	2d 81       	ldd	r18, Y+5	; 0x05
    1224:	3e 81       	ldd	r19, Y+6	; 0x06
    1226:	22 30       	cpi	r18, 0x02	; 2
    1228:	31 05       	cpc	r19, r1
    122a:	71 f1       	breq	.+92     	; 0x1288 <DIO_u8SetPinValue+0x1b0>
    122c:	8d 81       	ldd	r24, Y+5	; 0x05
    122e:	9e 81       	ldd	r25, Y+6	; 0x06
    1230:	83 30       	cpi	r24, 0x03	; 3
    1232:	91 05       	cpc	r25, r1
    1234:	e9 f1       	breq	.+122    	; 0x12b0 <DIO_u8SetPinValue+0x1d8>
    1236:	50 c0       	rjmp	.+160    	; 0x12d8 <DIO_u8SetPinValue+0x200>
			{
			case DIO_u8PORTA : SET_BIT(PORTA,Copy_u8Pin); break;
    1238:	ab e3       	ldi	r26, 0x3B	; 59
    123a:	b0 e0       	ldi	r27, 0x00	; 0
    123c:	eb e3       	ldi	r30, 0x3B	; 59
    123e:	f0 e0       	ldi	r31, 0x00	; 0
    1240:	80 81       	ld	r24, Z
    1242:	48 2f       	mov	r20, r24
    1244:	8b 81       	ldd	r24, Y+3	; 0x03
    1246:	28 2f       	mov	r18, r24
    1248:	30 e0       	ldi	r19, 0x00	; 0
    124a:	81 e0       	ldi	r24, 0x01	; 1
    124c:	90 e0       	ldi	r25, 0x00	; 0
    124e:	02 2e       	mov	r0, r18
    1250:	02 c0       	rjmp	.+4      	; 0x1256 <DIO_u8SetPinValue+0x17e>
    1252:	88 0f       	add	r24, r24
    1254:	99 1f       	adc	r25, r25
    1256:	0a 94       	dec	r0
    1258:	e2 f7       	brpl	.-8      	; 0x1252 <DIO_u8SetPinValue+0x17a>
    125a:	84 2b       	or	r24, r20
    125c:	8c 93       	st	X, r24
    125e:	44 c0       	rjmp	.+136    	; 0x12e8 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTB : SET_BIT(PORTB,Copy_u8Pin); break;
    1260:	a8 e3       	ldi	r26, 0x38	; 56
    1262:	b0 e0       	ldi	r27, 0x00	; 0
    1264:	e8 e3       	ldi	r30, 0x38	; 56
    1266:	f0 e0       	ldi	r31, 0x00	; 0
    1268:	80 81       	ld	r24, Z
    126a:	48 2f       	mov	r20, r24
    126c:	8b 81       	ldd	r24, Y+3	; 0x03
    126e:	28 2f       	mov	r18, r24
    1270:	30 e0       	ldi	r19, 0x00	; 0
    1272:	81 e0       	ldi	r24, 0x01	; 1
    1274:	90 e0       	ldi	r25, 0x00	; 0
    1276:	02 2e       	mov	r0, r18
    1278:	02 c0       	rjmp	.+4      	; 0x127e <DIO_u8SetPinValue+0x1a6>
    127a:	88 0f       	add	r24, r24
    127c:	99 1f       	adc	r25, r25
    127e:	0a 94       	dec	r0
    1280:	e2 f7       	brpl	.-8      	; 0x127a <DIO_u8SetPinValue+0x1a2>
    1282:	84 2b       	or	r24, r20
    1284:	8c 93       	st	X, r24
    1286:	30 c0       	rjmp	.+96     	; 0x12e8 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTC : SET_BIT(PORTC,Copy_u8Pin); break;
    1288:	a5 e3       	ldi	r26, 0x35	; 53
    128a:	b0 e0       	ldi	r27, 0x00	; 0
    128c:	e5 e3       	ldi	r30, 0x35	; 53
    128e:	f0 e0       	ldi	r31, 0x00	; 0
    1290:	80 81       	ld	r24, Z
    1292:	48 2f       	mov	r20, r24
    1294:	8b 81       	ldd	r24, Y+3	; 0x03
    1296:	28 2f       	mov	r18, r24
    1298:	30 e0       	ldi	r19, 0x00	; 0
    129a:	81 e0       	ldi	r24, 0x01	; 1
    129c:	90 e0       	ldi	r25, 0x00	; 0
    129e:	02 2e       	mov	r0, r18
    12a0:	02 c0       	rjmp	.+4      	; 0x12a6 <DIO_u8SetPinValue+0x1ce>
    12a2:	88 0f       	add	r24, r24
    12a4:	99 1f       	adc	r25, r25
    12a6:	0a 94       	dec	r0
    12a8:	e2 f7       	brpl	.-8      	; 0x12a2 <DIO_u8SetPinValue+0x1ca>
    12aa:	84 2b       	or	r24, r20
    12ac:	8c 93       	st	X, r24
    12ae:	1c c0       	rjmp	.+56     	; 0x12e8 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTD : SET_BIT(PORTD,Copy_u8Pin); break;
    12b0:	a2 e3       	ldi	r26, 0x32	; 50
    12b2:	b0 e0       	ldi	r27, 0x00	; 0
    12b4:	e2 e3       	ldi	r30, 0x32	; 50
    12b6:	f0 e0       	ldi	r31, 0x00	; 0
    12b8:	80 81       	ld	r24, Z
    12ba:	48 2f       	mov	r20, r24
    12bc:	8b 81       	ldd	r24, Y+3	; 0x03
    12be:	28 2f       	mov	r18, r24
    12c0:	30 e0       	ldi	r19, 0x00	; 0
    12c2:	81 e0       	ldi	r24, 0x01	; 1
    12c4:	90 e0       	ldi	r25, 0x00	; 0
    12c6:	02 2e       	mov	r0, r18
    12c8:	02 c0       	rjmp	.+4      	; 0x12ce <DIO_u8SetPinValue+0x1f6>
    12ca:	88 0f       	add	r24, r24
    12cc:	99 1f       	adc	r25, r25
    12ce:	0a 94       	dec	r0
    12d0:	e2 f7       	brpl	.-8      	; 0x12ca <DIO_u8SetPinValue+0x1f2>
    12d2:	84 2b       	or	r24, r20
    12d4:	8c 93       	st	X, r24
    12d6:	08 c0       	rjmp	.+16     	; 0x12e8 <DIO_u8SetPinValue+0x210>
			default : Local_u8ErrorState=1;break;
    12d8:	81 e0       	ldi	r24, 0x01	; 1
    12da:	89 83       	std	Y+1, r24	; 0x01
    12dc:	05 c0       	rjmp	.+10     	; 0x12e8 <DIO_u8SetPinValue+0x210>
			}
		}
		else
		{
			Local_u8ErrorState=1;
    12de:	81 e0       	ldi	r24, 0x01	; 1
    12e0:	89 83       	std	Y+1, r24	; 0x01
    12e2:	02 c0       	rjmp	.+4      	; 0x12e8 <DIO_u8SetPinValue+0x210>
		}
	}
	else
	{
		Local_u8ErrorState=1;
    12e4:	81 e0       	ldi	r24, 0x01	; 1
    12e6:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    12e8:	89 81       	ldd	r24, Y+1	; 0x01
}
    12ea:	28 96       	adiw	r28, 0x08	; 8
    12ec:	0f b6       	in	r0, 0x3f	; 63
    12ee:	f8 94       	cli
    12f0:	de bf       	out	0x3e, r29	; 62
    12f2:	0f be       	out	0x3f, r0	; 63
    12f4:	cd bf       	out	0x3d, r28	; 61
    12f6:	cf 91       	pop	r28
    12f8:	df 91       	pop	r29
    12fa:	08 95       	ret

000012fc <DIO_u8SetPortValue>:

/***********************************************************************/

u8 DIO_u8SetPortValue(u8 Copy_u8Port,u8 Copy_u8Value)
{
    12fc:	df 93       	push	r29
    12fe:	cf 93       	push	r28
    1300:	00 d0       	rcall	.+0      	; 0x1302 <DIO_u8SetPortValue+0x6>
    1302:	00 d0       	rcall	.+0      	; 0x1304 <DIO_u8SetPortValue+0x8>
    1304:	0f 92       	push	r0
    1306:	cd b7       	in	r28, 0x3d	; 61
    1308:	de b7       	in	r29, 0x3e	; 62
    130a:	8a 83       	std	Y+2, r24	; 0x02
    130c:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=0;
    130e:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8Port)
    1310:	8a 81       	ldd	r24, Y+2	; 0x02
    1312:	28 2f       	mov	r18, r24
    1314:	30 e0       	ldi	r19, 0x00	; 0
    1316:	3d 83       	std	Y+5, r19	; 0x05
    1318:	2c 83       	std	Y+4, r18	; 0x04
    131a:	8c 81       	ldd	r24, Y+4	; 0x04
    131c:	9d 81       	ldd	r25, Y+5	; 0x05
    131e:	81 30       	cpi	r24, 0x01	; 1
    1320:	91 05       	cpc	r25, r1
    1322:	d1 f0       	breq	.+52     	; 0x1358 <DIO_u8SetPortValue+0x5c>
    1324:	2c 81       	ldd	r18, Y+4	; 0x04
    1326:	3d 81       	ldd	r19, Y+5	; 0x05
    1328:	22 30       	cpi	r18, 0x02	; 2
    132a:	31 05       	cpc	r19, r1
    132c:	2c f4       	brge	.+10     	; 0x1338 <DIO_u8SetPortValue+0x3c>
    132e:	8c 81       	ldd	r24, Y+4	; 0x04
    1330:	9d 81       	ldd	r25, Y+5	; 0x05
    1332:	00 97       	sbiw	r24, 0x00	; 0
    1334:	61 f0       	breq	.+24     	; 0x134e <DIO_u8SetPortValue+0x52>
    1336:	1f c0       	rjmp	.+62     	; 0x1376 <DIO_u8SetPortValue+0x7a>
    1338:	2c 81       	ldd	r18, Y+4	; 0x04
    133a:	3d 81       	ldd	r19, Y+5	; 0x05
    133c:	22 30       	cpi	r18, 0x02	; 2
    133e:	31 05       	cpc	r19, r1
    1340:	81 f0       	breq	.+32     	; 0x1362 <DIO_u8SetPortValue+0x66>
    1342:	8c 81       	ldd	r24, Y+4	; 0x04
    1344:	9d 81       	ldd	r25, Y+5	; 0x05
    1346:	83 30       	cpi	r24, 0x03	; 3
    1348:	91 05       	cpc	r25, r1
    134a:	81 f0       	breq	.+32     	; 0x136c <DIO_u8SetPortValue+0x70>
    134c:	14 c0       	rjmp	.+40     	; 0x1376 <DIO_u8SetPortValue+0x7a>
	{
	case DIO_u8PORTA : PORTA=Copy_u8Value; break;
    134e:	eb e3       	ldi	r30, 0x3B	; 59
    1350:	f0 e0       	ldi	r31, 0x00	; 0
    1352:	8b 81       	ldd	r24, Y+3	; 0x03
    1354:	80 83       	st	Z, r24
    1356:	11 c0       	rjmp	.+34     	; 0x137a <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTB : PORTB=Copy_u8Value; break;
    1358:	e8 e3       	ldi	r30, 0x38	; 56
    135a:	f0 e0       	ldi	r31, 0x00	; 0
    135c:	8b 81       	ldd	r24, Y+3	; 0x03
    135e:	80 83       	st	Z, r24
    1360:	0c c0       	rjmp	.+24     	; 0x137a <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTC : PORTC=Copy_u8Value; break;
    1362:	e5 e3       	ldi	r30, 0x35	; 53
    1364:	f0 e0       	ldi	r31, 0x00	; 0
    1366:	8b 81       	ldd	r24, Y+3	; 0x03
    1368:	80 83       	st	Z, r24
    136a:	07 c0       	rjmp	.+14     	; 0x137a <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTD : PORTD=Copy_u8Value; break;
    136c:	e2 e3       	ldi	r30, 0x32	; 50
    136e:	f0 e0       	ldi	r31, 0x00	; 0
    1370:	8b 81       	ldd	r24, Y+3	; 0x03
    1372:	80 83       	st	Z, r24
    1374:	02 c0       	rjmp	.+4      	; 0x137a <DIO_u8SetPortValue+0x7e>
	default : Local_u8ErrorState=1;break;
    1376:	81 e0       	ldi	r24, 0x01	; 1
    1378:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    137a:	89 81       	ldd	r24, Y+1	; 0x01
}
    137c:	0f 90       	pop	r0
    137e:	0f 90       	pop	r0
    1380:	0f 90       	pop	r0
    1382:	0f 90       	pop	r0
    1384:	0f 90       	pop	r0
    1386:	cf 91       	pop	r28
    1388:	df 91       	pop	r29
    138a:	08 95       	ret

0000138c <DIO_u8GetPinValue>:
/***********************************************************************/

u8 DIO_u8GetPinValue(u8 Copy_u8Port,u8 Copy_u8Pin,u8 * Copy_Pu8Value)
{
    138c:	df 93       	push	r29
    138e:	cf 93       	push	r28
    1390:	cd b7       	in	r28, 0x3d	; 61
    1392:	de b7       	in	r29, 0x3e	; 62
    1394:	27 97       	sbiw	r28, 0x07	; 7
    1396:	0f b6       	in	r0, 0x3f	; 63
    1398:	f8 94       	cli
    139a:	de bf       	out	0x3e, r29	; 62
    139c:	0f be       	out	0x3f, r0	; 63
    139e:	cd bf       	out	0x3d, r28	; 61
    13a0:	8a 83       	std	Y+2, r24	; 0x02
    13a2:	6b 83       	std	Y+3, r22	; 0x03
    13a4:	5d 83       	std	Y+5, r21	; 0x05
    13a6:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;
    13a8:	19 82       	std	Y+1, r1	; 0x01
	if((Copy_Pu8Value!=NULL)&&(Copy_u8Pin<=DIO_u8PIN7))
    13aa:	8c 81       	ldd	r24, Y+4	; 0x04
    13ac:	9d 81       	ldd	r25, Y+5	; 0x05
    13ae:	00 97       	sbiw	r24, 0x00	; 0
    13b0:	09 f4       	brne	.+2      	; 0x13b4 <DIO_u8GetPinValue+0x28>
    13b2:	78 c0       	rjmp	.+240    	; 0x14a4 <DIO_u8GetPinValue+0x118>
    13b4:	8b 81       	ldd	r24, Y+3	; 0x03
    13b6:	88 30       	cpi	r24, 0x08	; 8
    13b8:	08 f0       	brcs	.+2      	; 0x13bc <DIO_u8GetPinValue+0x30>
    13ba:	74 c0       	rjmp	.+232    	; 0x14a4 <DIO_u8GetPinValue+0x118>
	{
		switch(Copy_u8Port)
    13bc:	8a 81       	ldd	r24, Y+2	; 0x02
    13be:	28 2f       	mov	r18, r24
    13c0:	30 e0       	ldi	r19, 0x00	; 0
    13c2:	3f 83       	std	Y+7, r19	; 0x07
    13c4:	2e 83       	std	Y+6, r18	; 0x06
    13c6:	4e 81       	ldd	r20, Y+6	; 0x06
    13c8:	5f 81       	ldd	r21, Y+7	; 0x07
    13ca:	41 30       	cpi	r20, 0x01	; 1
    13cc:	51 05       	cpc	r21, r1
    13ce:	59 f1       	breq	.+86     	; 0x1426 <DIO_u8GetPinValue+0x9a>
    13d0:	8e 81       	ldd	r24, Y+6	; 0x06
    13d2:	9f 81       	ldd	r25, Y+7	; 0x07
    13d4:	82 30       	cpi	r24, 0x02	; 2
    13d6:	91 05       	cpc	r25, r1
    13d8:	34 f4       	brge	.+12     	; 0x13e6 <DIO_u8GetPinValue+0x5a>
    13da:	2e 81       	ldd	r18, Y+6	; 0x06
    13dc:	3f 81       	ldd	r19, Y+7	; 0x07
    13de:	21 15       	cp	r18, r1
    13e0:	31 05       	cpc	r19, r1
    13e2:	69 f0       	breq	.+26     	; 0x13fe <DIO_u8GetPinValue+0x72>
    13e4:	5c c0       	rjmp	.+184    	; 0x149e <DIO_u8GetPinValue+0x112>
    13e6:	4e 81       	ldd	r20, Y+6	; 0x06
    13e8:	5f 81       	ldd	r21, Y+7	; 0x07
    13ea:	42 30       	cpi	r20, 0x02	; 2
    13ec:	51 05       	cpc	r21, r1
    13ee:	79 f1       	breq	.+94     	; 0x144e <DIO_u8GetPinValue+0xc2>
    13f0:	8e 81       	ldd	r24, Y+6	; 0x06
    13f2:	9f 81       	ldd	r25, Y+7	; 0x07
    13f4:	83 30       	cpi	r24, 0x03	; 3
    13f6:	91 05       	cpc	r25, r1
    13f8:	09 f4       	brne	.+2      	; 0x13fc <DIO_u8GetPinValue+0x70>
    13fa:	3d c0       	rjmp	.+122    	; 0x1476 <DIO_u8GetPinValue+0xea>
    13fc:	50 c0       	rjmp	.+160    	; 0x149e <DIO_u8GetPinValue+0x112>
		{
		case DIO_u8PORTA:* Copy_Pu8Value=GET_BIT(PINA,Copy_u8Pin);break;
    13fe:	e9 e3       	ldi	r30, 0x39	; 57
    1400:	f0 e0       	ldi	r31, 0x00	; 0
    1402:	80 81       	ld	r24, Z
    1404:	28 2f       	mov	r18, r24
    1406:	30 e0       	ldi	r19, 0x00	; 0
    1408:	8b 81       	ldd	r24, Y+3	; 0x03
    140a:	88 2f       	mov	r24, r24
    140c:	90 e0       	ldi	r25, 0x00	; 0
    140e:	a9 01       	movw	r20, r18
    1410:	02 c0       	rjmp	.+4      	; 0x1416 <DIO_u8GetPinValue+0x8a>
    1412:	55 95       	asr	r21
    1414:	47 95       	ror	r20
    1416:	8a 95       	dec	r24
    1418:	e2 f7       	brpl	.-8      	; 0x1412 <DIO_u8GetPinValue+0x86>
    141a:	ca 01       	movw	r24, r20
    141c:	81 70       	andi	r24, 0x01	; 1
    141e:	ec 81       	ldd	r30, Y+4	; 0x04
    1420:	fd 81       	ldd	r31, Y+5	; 0x05
    1422:	80 83       	st	Z, r24
    1424:	41 c0       	rjmp	.+130    	; 0x14a8 <DIO_u8GetPinValue+0x11c>
		case DIO_u8PORTB:* Copy_Pu8Value=GET_BIT(PINB,Copy_u8Pin);break;
    1426:	e6 e3       	ldi	r30, 0x36	; 54
    1428:	f0 e0       	ldi	r31, 0x00	; 0
    142a:	80 81       	ld	r24, Z
    142c:	28 2f       	mov	r18, r24
    142e:	30 e0       	ldi	r19, 0x00	; 0
    1430:	8b 81       	ldd	r24, Y+3	; 0x03
    1432:	88 2f       	mov	r24, r24
    1434:	90 e0       	ldi	r25, 0x00	; 0
    1436:	a9 01       	movw	r20, r18
    1438:	02 c0       	rjmp	.+4      	; 0x143e <DIO_u8GetPinValue+0xb2>
    143a:	55 95       	asr	r21
    143c:	47 95       	ror	r20
    143e:	8a 95       	dec	r24
    1440:	e2 f7       	brpl	.-8      	; 0x143a <DIO_u8GetPinValue+0xae>
    1442:	ca 01       	movw	r24, r20
    1444:	81 70       	andi	r24, 0x01	; 1
    1446:	ec 81       	ldd	r30, Y+4	; 0x04
    1448:	fd 81       	ldd	r31, Y+5	; 0x05
    144a:	80 83       	st	Z, r24
    144c:	2d c0       	rjmp	.+90     	; 0x14a8 <DIO_u8GetPinValue+0x11c>
		case DIO_u8PORTC:* Copy_Pu8Value=GET_BIT(PINC,Copy_u8Pin);break;
    144e:	e3 e3       	ldi	r30, 0x33	; 51
    1450:	f0 e0       	ldi	r31, 0x00	; 0
    1452:	80 81       	ld	r24, Z
    1454:	28 2f       	mov	r18, r24
    1456:	30 e0       	ldi	r19, 0x00	; 0
    1458:	8b 81       	ldd	r24, Y+3	; 0x03
    145a:	88 2f       	mov	r24, r24
    145c:	90 e0       	ldi	r25, 0x00	; 0
    145e:	a9 01       	movw	r20, r18
    1460:	02 c0       	rjmp	.+4      	; 0x1466 <DIO_u8GetPinValue+0xda>
    1462:	55 95       	asr	r21
    1464:	47 95       	ror	r20
    1466:	8a 95       	dec	r24
    1468:	e2 f7       	brpl	.-8      	; 0x1462 <DIO_u8GetPinValue+0xd6>
    146a:	ca 01       	movw	r24, r20
    146c:	81 70       	andi	r24, 0x01	; 1
    146e:	ec 81       	ldd	r30, Y+4	; 0x04
    1470:	fd 81       	ldd	r31, Y+5	; 0x05
    1472:	80 83       	st	Z, r24
    1474:	19 c0       	rjmp	.+50     	; 0x14a8 <DIO_u8GetPinValue+0x11c>
		case DIO_u8PORTD:* Copy_Pu8Value=GET_BIT(PIND,Copy_u8Pin);break;
    1476:	e0 e3       	ldi	r30, 0x30	; 48
    1478:	f0 e0       	ldi	r31, 0x00	; 0
    147a:	80 81       	ld	r24, Z
    147c:	28 2f       	mov	r18, r24
    147e:	30 e0       	ldi	r19, 0x00	; 0
    1480:	8b 81       	ldd	r24, Y+3	; 0x03
    1482:	88 2f       	mov	r24, r24
    1484:	90 e0       	ldi	r25, 0x00	; 0
    1486:	a9 01       	movw	r20, r18
    1488:	02 c0       	rjmp	.+4      	; 0x148e <DIO_u8GetPinValue+0x102>
    148a:	55 95       	asr	r21
    148c:	47 95       	ror	r20
    148e:	8a 95       	dec	r24
    1490:	e2 f7       	brpl	.-8      	; 0x148a <DIO_u8GetPinValue+0xfe>
    1492:	ca 01       	movw	r24, r20
    1494:	81 70       	andi	r24, 0x01	; 1
    1496:	ec 81       	ldd	r30, Y+4	; 0x04
    1498:	fd 81       	ldd	r31, Y+5	; 0x05
    149a:	80 83       	st	Z, r24
    149c:	05 c0       	rjmp	.+10     	; 0x14a8 <DIO_u8GetPinValue+0x11c>
		default : Local_u8ErrorState=1;
    149e:	81 e0       	ldi	r24, 0x01	; 1
    14a0:	89 83       	std	Y+1, r24	; 0x01
    14a2:	02 c0       	rjmp	.+4      	; 0x14a8 <DIO_u8GetPinValue+0x11c>
		}
	}
	else
	{
		Local_u8ErrorState=1;
    14a4:	81 e0       	ldi	r24, 0x01	; 1
    14a6:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    14a8:	89 81       	ldd	r24, Y+1	; 0x01
}
    14aa:	27 96       	adiw	r28, 0x07	; 7
    14ac:	0f b6       	in	r0, 0x3f	; 63
    14ae:	f8 94       	cli
    14b0:	de bf       	out	0x3e, r29	; 62
    14b2:	0f be       	out	0x3f, r0	; 63
    14b4:	cd bf       	out	0x3d, r28	; 61
    14b6:	cf 91       	pop	r28
    14b8:	df 91       	pop	r29
    14ba:	08 95       	ret

000014bc <GIE_voidEnable>:
#include "GIE_interface.h"
#include "GIE_register.h"


void GIE_voidEnable(void)
{
    14bc:	df 93       	push	r29
    14be:	cf 93       	push	r28
    14c0:	cd b7       	in	r28, 0x3d	; 61
    14c2:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,SREG_I);
    14c4:	af e5       	ldi	r26, 0x5F	; 95
    14c6:	b0 e0       	ldi	r27, 0x00	; 0
    14c8:	ef e5       	ldi	r30, 0x5F	; 95
    14ca:	f0 e0       	ldi	r31, 0x00	; 0
    14cc:	80 81       	ld	r24, Z
    14ce:	80 68       	ori	r24, 0x80	; 128
    14d0:	8c 93       	st	X, r24
}
    14d2:	cf 91       	pop	r28
    14d4:	df 91       	pop	r29
    14d6:	08 95       	ret

000014d8 <GIE_voidDisable>:
void GIE_voidDisable(void)
{
    14d8:	df 93       	push	r29
    14da:	cf 93       	push	r28
    14dc:	cd b7       	in	r28, 0x3d	; 61
    14de:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,SREG_I);
    14e0:	af e5       	ldi	r26, 0x5F	; 95
    14e2:	b0 e0       	ldi	r27, 0x00	; 0
    14e4:	ef e5       	ldi	r30, 0x5F	; 95
    14e6:	f0 e0       	ldi	r31, 0x00	; 0
    14e8:	80 81       	ld	r24, Z
    14ea:	8f 77       	andi	r24, 0x7F	; 127
    14ec:	8c 93       	st	X, r24
}
    14ee:	cf 91       	pop	r28
    14f0:	df 91       	pop	r29
    14f2:	08 95       	ret

000014f4 <PORT_voidInit>:
#include "PORT_register.h"
#include "PORT_config.h"
#include "PORT_private.h"

void  PORT_voidInit(void)
{
    14f4:	df 93       	push	r29
    14f6:	cf 93       	push	r28
    14f8:	cd b7       	in	r28, 0x3d	; 61
    14fa:	de b7       	in	r29, 0x3e	; 62
	DDRA=PORTA_DIR;
    14fc:	ea e3       	ldi	r30, 0x3A	; 58
    14fe:	f0 e0       	ldi	r31, 0x00	; 0
    1500:	10 82       	st	Z, r1
	DDRB=PORTB_DIR;
    1502:	e7 e3       	ldi	r30, 0x37	; 55
    1504:	f0 e0       	ldi	r31, 0x00	; 0
    1506:	88 e0       	ldi	r24, 0x08	; 8
    1508:	80 83       	st	Z, r24
	DDRC=PORTC_DIR;
    150a:	e4 e3       	ldi	r30, 0x34	; 52
    150c:	f0 e0       	ldi	r31, 0x00	; 0
    150e:	10 82       	st	Z, r1
	DDRD=PORTD_DIR;
    1510:	e1 e3       	ldi	r30, 0x31	; 49
    1512:	f0 e0       	ldi	r31, 0x00	; 0
    1514:	10 82       	st	Z, r1
	
	PORTA=PORTA_InitialValue;
    1516:	eb e3       	ldi	r30, 0x3B	; 59
    1518:	f0 e0       	ldi	r31, 0x00	; 0
    151a:	10 82       	st	Z, r1
	PORTB=PORTB_InitialValue;
    151c:	e8 e3       	ldi	r30, 0x38	; 56
    151e:	f0 e0       	ldi	r31, 0x00	; 0
    1520:	10 82       	st	Z, r1
	PORTC=PORTC_InitialValue;
    1522:	e5 e3       	ldi	r30, 0x35	; 53
    1524:	f0 e0       	ldi	r31, 0x00	; 0
    1526:	10 82       	st	Z, r1
	PORTD=PORTD_InitialValue;
    1528:	e2 e3       	ldi	r30, 0x32	; 50
    152a:	f0 e0       	ldi	r31, 0x00	; 0
    152c:	10 82       	st	Z, r1
}
    152e:	cf 91       	pop	r28
    1530:	df 91       	pop	r29
    1532:	08 95       	ret

00001534 <TIMER0_voidInit>:
static u8 Checkperiodicity;

static void(*ICU_pvCallBackFunc)(void)=NULL;

void TIMER0_voidInit(void)
{
    1534:	df 93       	push	r29
    1536:	cf 93       	push	r28
    1538:	cd b7       	in	r28, 0x3d	; 61
    153a:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TCCR0,TCCR0_WGM00);//CTC mode
	SET_BIT(TCCR0,TCCR0_WGM01);
	SET_BIT(TIMSK,TIMSK_OCIE0);//compare match interrupt enable
#elif Operation_Mode == Fast_PWM
	/*choose Fast PWM mode */
	SET_BIT(TCCR0,TCCR0_WGM00);
    153c:	a3 e5       	ldi	r26, 0x53	; 83
    153e:	b0 e0       	ldi	r27, 0x00	; 0
    1540:	e3 e5       	ldi	r30, 0x53	; 83
    1542:	f0 e0       	ldi	r31, 0x00	; 0
    1544:	80 81       	ld	r24, Z
    1546:	80 64       	ori	r24, 0x40	; 64
    1548:	8c 93       	st	X, r24
	SET_BIT(TCCR0,TCCR0_WGM01);
    154a:	a3 e5       	ldi	r26, 0x53	; 83
    154c:	b0 e0       	ldi	r27, 0x00	; 0
    154e:	e3 e5       	ldi	r30, 0x53	; 83
    1550:	f0 e0       	ldi	r31, 0x00	; 0
    1552:	80 81       	ld	r24, Z
    1554:	88 60       	ori	r24, 0x08	; 8
    1556:	8c 93       	st	X, r24
	// no interrupt in PWM
#if Fast_PWM_MODE == SOT_COC
	/*Set on top  clear  on compare*/
	CLR_BIT(TCCR0,4);
    1558:	a3 e5       	ldi	r26, 0x53	; 83
    155a:	b0 e0       	ldi	r27, 0x00	; 0
    155c:	e3 e5       	ldi	r30, 0x53	; 83
    155e:	f0 e0       	ldi	r31, 0x00	; 0
    1560:	80 81       	ld	r24, Z
    1562:	8f 7e       	andi	r24, 0xEF	; 239
    1564:	8c 93       	st	X, r24
	SET_BIT(TCCR0,5);
    1566:	a3 e5       	ldi	r26, 0x53	; 83
    1568:	b0 e0       	ldi	r27, 0x00	; 0
    156a:	e3 e5       	ldi	r30, 0x53	; 83
    156c:	f0 e0       	ldi	r31, 0x00	; 0
    156e:	80 81       	ld	r24, Z
    1570:	80 62       	ori	r24, 0x20	; 32
    1572:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,TCCR0_WGM01);
	// no interrupt in phase correct

#endif

}
    1574:	cf 91       	pop	r28
    1576:	df 91       	pop	r29
    1578:	08 95       	ret

0000157a <TIMER0_voidSetPreLoadValue>:

void TIMER0_voidSetPreLoadValue(u8 Copy_u8Preload)
{
    157a:	df 93       	push	r29
    157c:	cf 93       	push	r28
    157e:	0f 92       	push	r0
    1580:	cd b7       	in	r28, 0x3d	; 61
    1582:	de b7       	in	r29, 0x3e	; 62
    1584:	89 83       	std	Y+1, r24	; 0x01
	TCNT0=Copy_u8Preload;
    1586:	e2 e5       	ldi	r30, 0x52	; 82
    1588:	f0 e0       	ldi	r31, 0x00	; 0
    158a:	89 81       	ldd	r24, Y+1	; 0x01
    158c:	80 83       	st	Z, r24
}
    158e:	0f 90       	pop	r0
    1590:	cf 91       	pop	r28
    1592:	df 91       	pop	r29
    1594:	08 95       	ret

00001596 <TIMER0_voidSetCompareMatchValue>:


void TIMER0_voidSetCompareMatchValue(u8 Copy_u8Value)
{
    1596:	df 93       	push	r29
    1598:	cf 93       	push	r28
    159a:	0f 92       	push	r0
    159c:	cd b7       	in	r28, 0x3d	; 61
    159e:	de b7       	in	r29, 0x3e	; 62
    15a0:	89 83       	std	Y+1, r24	; 0x01
	OCR0=Copy_u8Value;
    15a2:	ec e5       	ldi	r30, 0x5C	; 92
    15a4:	f0 e0       	ldi	r31, 0x00	; 0
    15a6:	89 81       	ldd	r24, Y+1	; 0x01
    15a8:	80 83       	st	Z, r24
}
    15aa:	0f 90       	pop	r0
    15ac:	cf 91       	pop	r28
    15ae:	df 91       	pop	r29
    15b0:	08 95       	ret

000015b2 <PreScalar>:



void PreScalar(void)
{
    15b2:	df 93       	push	r29
    15b4:	cf 93       	push	r28
    15b6:	cd b7       	in	r28, 0x3d	; 61
    15b8:	de b7       	in	r29, 0x3e	; 62
	/*Choose thePreScalar*/
	TCCR0&=0b11111000;
    15ba:	a3 e5       	ldi	r26, 0x53	; 83
    15bc:	b0 e0       	ldi	r27, 0x00	; 0
    15be:	e3 e5       	ldi	r30, 0x53	; 83
    15c0:	f0 e0       	ldi	r31, 0x00	; 0
    15c2:	80 81       	ld	r24, Z
    15c4:	88 7f       	andi	r24, 0xF8	; 248
    15c6:	8c 93       	st	X, r24
	TCCR0|=PreScalar_Value;
    15c8:	a3 e5       	ldi	r26, 0x53	; 83
    15ca:	b0 e0       	ldi	r27, 0x00	; 0
    15cc:	e3 e5       	ldi	r30, 0x53	; 83
    15ce:	f0 e0       	ldi	r31, 0x00	; 0
    15d0:	80 81       	ld	r24, Z
    15d2:	82 60       	ori	r24, 0x02	; 2
    15d4:	8c 93       	st	X, r24
}
    15d6:	cf 91       	pop	r28
    15d8:	df 91       	pop	r29
    15da:	08 95       	ret

000015dc <TIMER0_u8SetCallBack_CTC>:


u8 TIMER0_u8SetCallBack_CTC(void(*Copy_pvCallBackFUNC)(void))//Timer/Counter0 CompareMatch
{
    15dc:	df 93       	push	r29
    15de:	cf 93       	push	r28
    15e0:	00 d0       	rcall	.+0      	; 0x15e2 <TIMER0_u8SetCallBack_CTC+0x6>
    15e2:	0f 92       	push	r0
    15e4:	cd b7       	in	r28, 0x3d	; 61
    15e6:	de b7       	in	r29, 0x3e	; 62
    15e8:	9b 83       	std	Y+3, r25	; 0x03
    15ea:	8a 83       	std	Y+2, r24	; 0x02

	u8 Local_u8ErrorStatus=OK;
    15ec:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pvCallBackFUNC!=NULL)
    15ee:	8a 81       	ldd	r24, Y+2	; 0x02
    15f0:	9b 81       	ldd	r25, Y+3	; 0x03
    15f2:	00 97       	sbiw	r24, 0x00	; 0
    15f4:	39 f0       	breq	.+14     	; 0x1604 <TIMER0_u8SetCallBack_CTC+0x28>
	{
		TIMER0_pvCallBackFUNC_CompareMatch=Copy_pvCallBackFUNC;
    15f6:	8a 81       	ldd	r24, Y+2	; 0x02
    15f8:	9b 81       	ldd	r25, Y+3	; 0x03
    15fa:	90 93 78 00 	sts	0x0078, r25
    15fe:	80 93 77 00 	sts	0x0077, r24
    1602:	02 c0       	rjmp	.+4      	; 0x1608 <TIMER0_u8SetCallBack_CTC+0x2c>
	}
	else
	{
		Local_u8ErrorStatus=NULL_POINTER;
    1604:	82 e0       	ldi	r24, 0x02	; 2
    1606:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorStatus;
    1608:	89 81       	ldd	r24, Y+1	; 0x01
}
    160a:	0f 90       	pop	r0
    160c:	0f 90       	pop	r0
    160e:	0f 90       	pop	r0
    1610:	cf 91       	pop	r28
    1612:	df 91       	pop	r29
    1614:	08 95       	ret

00001616 <TIMER0_u8SetCallBack_OF>:

u8 TIMER0_u8SetCallBack_OF(void(*Copy_pvCallBackFUNC)(void))//Timer/Counter0 Overflow
{
    1616:	df 93       	push	r29
    1618:	cf 93       	push	r28
    161a:	00 d0       	rcall	.+0      	; 0x161c <TIMER0_u8SetCallBack_OF+0x6>
    161c:	0f 92       	push	r0
    161e:	cd b7       	in	r28, 0x3d	; 61
    1620:	de b7       	in	r29, 0x3e	; 62
    1622:	9b 83       	std	Y+3, r25	; 0x03
    1624:	8a 83       	std	Y+2, r24	; 0x02

	u8 Local_u8ErrorStatus=OK;
    1626:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pvCallBackFUNC!=NULL)
    1628:	8a 81       	ldd	r24, Y+2	; 0x02
    162a:	9b 81       	ldd	r25, Y+3	; 0x03
    162c:	00 97       	sbiw	r24, 0x00	; 0
    162e:	39 f0       	breq	.+14     	; 0x163e <TIMER0_u8SetCallBack_OF+0x28>
	{
		TIMER0_pvCallBackFUNC_OF=Copy_pvCallBackFUNC;
    1630:	8a 81       	ldd	r24, Y+2	; 0x02
    1632:	9b 81       	ldd	r25, Y+3	; 0x03
    1634:	90 93 76 00 	sts	0x0076, r25
    1638:	80 93 75 00 	sts	0x0075, r24
    163c:	02 c0       	rjmp	.+4      	; 0x1642 <TIMER0_u8SetCallBack_OF+0x2c>
	}
	else
	{
		Local_u8ErrorStatus=NULL_POINTER;
    163e:	82 e0       	ldi	r24, 0x02	; 2
    1640:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorStatus;
    1642:	89 81       	ldd	r24, Y+1	; 0x01
}
    1644:	0f 90       	pop	r0
    1646:	0f 90       	pop	r0
    1648:	0f 90       	pop	r0
    164a:	cf 91       	pop	r28
    164c:	df 91       	pop	r29
    164e:	08 95       	ret

00001650 <TIMER0_Delay_ms>:

u8 TIMER0_Delay_ms(u32 Copy_u16Delay_ms,void(*fnafterdelay)(void),u8 periodicity)
{
    1650:	df 93       	push	r29
    1652:	cf 93       	push	r28
    1654:	cd b7       	in	r28, 0x3d	; 61
    1656:	de b7       	in	r29, 0x3e	; 62
    1658:	28 97       	sbiw	r28, 0x08	; 8
    165a:	0f b6       	in	r0, 0x3f	; 63
    165c:	f8 94       	cli
    165e:	de bf       	out	0x3e, r29	; 62
    1660:	0f be       	out	0x3f, r0	; 63
    1662:	cd bf       	out	0x3d, r28	; 61
    1664:	6a 83       	std	Y+2, r22	; 0x02
    1666:	7b 83       	std	Y+3, r23	; 0x03
    1668:	8c 83       	std	Y+4, r24	; 0x04
    166a:	9d 83       	std	Y+5, r25	; 0x05
    166c:	5f 83       	std	Y+7, r21	; 0x07
    166e:	4e 83       	std	Y+6, r20	; 0x06
    1670:	28 87       	std	Y+8, r18	; 0x08

	u8 Local_u8ErrorStatus=OK;
    1672:	19 82       	std	Y+1, r1	; 0x01
	if(fnafterdelay!=NULL)
    1674:	8e 81       	ldd	r24, Y+6	; 0x06
    1676:	9f 81       	ldd	r25, Y+7	; 0x07
    1678:	00 97       	sbiw	r24, 0x00	; 0
    167a:	09 f4       	brne	.+2      	; 0x167e <TIMER0_Delay_ms+0x2e>
    167c:	45 c0       	rjmp	.+138    	; 0x1708 <TIMER0_Delay_ms+0xb8>
	{

		CLR_BIT(TCCR0,TCCR0_WGM00);//CTC mode
    167e:	a3 e5       	ldi	r26, 0x53	; 83
    1680:	b0 e0       	ldi	r27, 0x00	; 0
    1682:	e3 e5       	ldi	r30, 0x53	; 83
    1684:	f0 e0       	ldi	r31, 0x00	; 0
    1686:	80 81       	ld	r24, Z
    1688:	8f 7b       	andi	r24, 0xBF	; 191
    168a:	8c 93       	st	X, r24
		SET_BIT(TCCR0,TCCR0_WGM01);
    168c:	a3 e5       	ldi	r26, 0x53	; 83
    168e:	b0 e0       	ldi	r27, 0x00	; 0
    1690:	e3 e5       	ldi	r30, 0x53	; 83
    1692:	f0 e0       	ldi	r31, 0x00	; 0
    1694:	80 81       	ld	r24, Z
    1696:	88 60       	ori	r24, 0x08	; 8
    1698:	8c 93       	st	X, r24
		SET_BIT(TIMSK,TIMSK_OCIE0);//compare match interrupt enable
    169a:	a9 e5       	ldi	r26, 0x59	; 89
    169c:	b0 e0       	ldi	r27, 0x00	; 0
    169e:	e9 e5       	ldi	r30, 0x59	; 89
    16a0:	f0 e0       	ldi	r31, 0x00	; 0
    16a2:	80 81       	ld	r24, Z
    16a4:	82 60       	ori	r24, 0x02	; 2
    16a6:	8c 93       	st	X, r24
		OCR0=250;
    16a8:	ec e5       	ldi	r30, 0x5C	; 92
    16aa:	f0 e0       	ldi	r31, 0x00	; 0
    16ac:	8a ef       	ldi	r24, 0xFA	; 250
    16ae:	80 83       	st	Z, r24
		TCCR0&=0b11111000;
    16b0:	a3 e5       	ldi	r26, 0x53	; 83
    16b2:	b0 e0       	ldi	r27, 0x00	; 0
    16b4:	e3 e5       	ldi	r30, 0x53	; 83
    16b6:	f0 e0       	ldi	r31, 0x00	; 0
    16b8:	80 81       	ld	r24, Z
    16ba:	88 7f       	andi	r24, 0xF8	; 248
    16bc:	8c 93       	st	X, r24
		TCCR0|=2;
    16be:	a3 e5       	ldi	r26, 0x53	; 83
    16c0:	b0 e0       	ldi	r27, 0x00	; 0
    16c2:	e3 e5       	ldi	r30, 0x53	; 83
    16c4:	f0 e0       	ldi	r31, 0x00	; 0
    16c6:	80 81       	ld	r24, Z
    16c8:	82 60       	ori	r24, 0x02	; 2
    16ca:	8c 93       	st	X, r24
		ExcuteFnAfterDelay=fnafterdelay;
    16cc:	8e 81       	ldd	r24, Y+6	; 0x06
    16ce:	9f 81       	ldd	r25, Y+7	; 0x07
    16d0:	90 93 7a 00 	sts	0x007A, r25
    16d4:	80 93 79 00 	sts	0x0079, r24
		Delay_ms=Copy_u16Delay_ms*4;
    16d8:	8a 81       	ldd	r24, Y+2	; 0x02
    16da:	9b 81       	ldd	r25, Y+3	; 0x03
    16dc:	ac 81       	ldd	r26, Y+4	; 0x04
    16de:	bd 81       	ldd	r27, Y+5	; 0x05
    16e0:	88 0f       	add	r24, r24
    16e2:	99 1f       	adc	r25, r25
    16e4:	aa 1f       	adc	r26, r26
    16e6:	bb 1f       	adc	r27, r27
    16e8:	88 0f       	add	r24, r24
    16ea:	99 1f       	adc	r25, r25
    16ec:	aa 1f       	adc	r26, r26
    16ee:	bb 1f       	adc	r27, r27
    16f0:	80 93 7f 00 	sts	0x007F, r24
    16f4:	90 93 80 00 	sts	0x0080, r25
    16f8:	a0 93 81 00 	sts	0x0081, r26
    16fc:	b0 93 82 00 	sts	0x0082, r27
		Checkperiodicity=periodicity;
    1700:	88 85       	ldd	r24, Y+8	; 0x08
    1702:	80 93 83 00 	sts	0x0083, r24
    1706:	02 c0       	rjmp	.+4      	; 0x170c <TIMER0_Delay_ms+0xbc>
	}
	else
	{
		Local_u8ErrorStatus=NULL_POINTER;
    1708:	82 e0       	ldi	r24, 0x02	; 2
    170a:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorStatus;
    170c:	89 81       	ldd	r24, Y+1	; 0x01
}
    170e:	28 96       	adiw	r28, 0x08	; 8
    1710:	0f b6       	in	r0, 0x3f	; 63
    1712:	f8 94       	cli
    1714:	de bf       	out	0x3e, r29	; 62
    1716:	0f be       	out	0x3f, r0	; 63
    1718:	cd bf       	out	0x3d, r28	; 61
    171a:	cf 91       	pop	r28
    171c:	df 91       	pop	r29
    171e:	08 95       	ret

00001720 <TIMER1_voidInit>:
	TCCR1B&=0b11111000;
	TCCR1B|=2;
}
 */
void TIMER1_voidInit(void)
{
    1720:	df 93       	push	r29
    1722:	cf 93       	push	r28
    1724:	cd b7       	in	r28, 0x3d	; 61
    1726:	de b7       	in	r29, 0x3e	; 62
	//Setting the preScalar to be 8
	TCCR1B&=0b11111000;
    1728:	ae e4       	ldi	r26, 0x4E	; 78
    172a:	b0 e0       	ldi	r27, 0x00	; 0
    172c:	ee e4       	ldi	r30, 0x4E	; 78
    172e:	f0 e0       	ldi	r31, 0x00	; 0
    1730:	80 81       	ld	r24, Z
    1732:	88 7f       	andi	r24, 0xF8	; 248
    1734:	8c 93       	st	X, r24
	TCCR1B|=2;
    1736:	ae e4       	ldi	r26, 0x4E	; 78
    1738:	b0 e0       	ldi	r27, 0x00	; 0
    173a:	ee e4       	ldi	r30, 0x4E	; 78
    173c:	f0 e0       	ldi	r31, 0x00	; 0
    173e:	80 81       	ld	r24, Z
    1740:	82 60       	ori	r24, 0x02	; 2
    1742:	8c 93       	st	X, r24
}
    1744:	cf 91       	pop	r28
    1746:	df 91       	pop	r29
    1748:	08 95       	ret

0000174a <TIMER1_voidSetTimerValue>:
void TIMER1_voidSetTimerValue(u16 Copy_u16value)
{
    174a:	df 93       	push	r29
    174c:	cf 93       	push	r28
    174e:	00 d0       	rcall	.+0      	; 0x1750 <TIMER1_voidSetTimerValue+0x6>
    1750:	cd b7       	in	r28, 0x3d	; 61
    1752:	de b7       	in	r29, 0x3e	; 62
    1754:	9a 83       	std	Y+2, r25	; 0x02
    1756:	89 83       	std	Y+1, r24	; 0x01
	TCNT1=Copy_u16value;
    1758:	ec e4       	ldi	r30, 0x4C	; 76
    175a:	f0 e0       	ldi	r31, 0x00	; 0
    175c:	89 81       	ldd	r24, Y+1	; 0x01
    175e:	9a 81       	ldd	r25, Y+2	; 0x02
    1760:	91 83       	std	Z+1, r25	; 0x01
    1762:	80 83       	st	Z, r24
}
    1764:	0f 90       	pop	r0
    1766:	0f 90       	pop	r0
    1768:	cf 91       	pop	r28
    176a:	df 91       	pop	r29
    176c:	08 95       	ret

0000176e <Timer1_u16ReadTimerValue>:

u16 Timer1_u16ReadTimerValue(void)
{
    176e:	df 93       	push	r29
    1770:	cf 93       	push	r28
    1772:	cd b7       	in	r28, 0x3d	; 61
    1774:	de b7       	in	r29, 0x3e	; 62
	return TCNT1;
    1776:	ec e4       	ldi	r30, 0x4C	; 76
    1778:	f0 e0       	ldi	r31, 0x00	; 0
    177a:	80 81       	ld	r24, Z
    177c:	91 81       	ldd	r25, Z+1	; 0x01
}
    177e:	cf 91       	pop	r28
    1780:	df 91       	pop	r29
    1782:	08 95       	ret

00001784 <Timer1_voidSetICR_TopValue>:

void Timer1_voidSetICR_TopValue(u16 Copy_u16TOP)
{
    1784:	df 93       	push	r29
    1786:	cf 93       	push	r28
    1788:	00 d0       	rcall	.+0      	; 0x178a <Timer1_voidSetICR_TopValue+0x6>
    178a:	cd b7       	in	r28, 0x3d	; 61
    178c:	de b7       	in	r29, 0x3e	; 62
    178e:	9a 83       	std	Y+2, r25	; 0x02
    1790:	89 83       	std	Y+1, r24	; 0x01
	ICR1=Copy_u16TOP;
    1792:	e6 e4       	ldi	r30, 0x46	; 70
    1794:	f0 e0       	ldi	r31, 0x00	; 0
    1796:	89 81       	ldd	r24, Y+1	; 0x01
    1798:	9a 81       	ldd	r25, Y+2	; 0x02
    179a:	91 83       	std	Z+1, r25	; 0x01
    179c:	80 83       	st	Z, r24
}
    179e:	0f 90       	pop	r0
    17a0:	0f 90       	pop	r0
    17a2:	cf 91       	pop	r28
    17a4:	df 91       	pop	r29
    17a6:	08 95       	ret

000017a8 <Timer1_voidSetChannelA_Compare_Match>:
void Timer1_voidSetChannelA_Compare_Match(u16 Copy_u16Compare_Match)
{
    17a8:	df 93       	push	r29
    17aa:	cf 93       	push	r28
    17ac:	00 d0       	rcall	.+0      	; 0x17ae <Timer1_voidSetChannelA_Compare_Match+0x6>
    17ae:	cd b7       	in	r28, 0x3d	; 61
    17b0:	de b7       	in	r29, 0x3e	; 62
    17b2:	9a 83       	std	Y+2, r25	; 0x02
    17b4:	89 83       	std	Y+1, r24	; 0x01
	OCR1A=Copy_u16Compare_Match;
    17b6:	ea e4       	ldi	r30, 0x4A	; 74
    17b8:	f0 e0       	ldi	r31, 0x00	; 0
    17ba:	89 81       	ldd	r24, Y+1	; 0x01
    17bc:	9a 81       	ldd	r25, Y+2	; 0x02
    17be:	91 83       	std	Z+1, r25	; 0x01
    17c0:	80 83       	st	Z, r24
}
    17c2:	0f 90       	pop	r0
    17c4:	0f 90       	pop	r0
    17c6:	cf 91       	pop	r28
    17c8:	df 91       	pop	r29
    17ca:	08 95       	ret

000017cc <ICU_voidInit>:

/*ICU By HardWare Functions*/
void ICU_voidInit(void)
{
    17cc:	df 93       	push	r29
    17ce:	cf 93       	push	r28
    17d0:	cd b7       	in	r28, 0x3d	; 61
    17d2:	de b7       	in	r29, 0x3e	; 62

	/*Set Trigger Force to RisingEdge Initially*/
	SET_BIT(TCCR1B,TCCR1B_ICES1);
    17d4:	ae e4       	ldi	r26, 0x4E	; 78
    17d6:	b0 e0       	ldi	r27, 0x00	; 0
    17d8:	ee e4       	ldi	r30, 0x4E	; 78
    17da:	f0 e0       	ldi	r31, 0x00	; 0
    17dc:	80 81       	ld	r24, Z
    17de:	80 64       	ori	r24, 0x40	; 64
    17e0:	8c 93       	st	X, r24

	/*Enable Input Capture Interrupt Enable*/
	SET_BIT(TIMSK,TIMSK_TICIE1);
    17e2:	a9 e5       	ldi	r26, 0x59	; 89
    17e4:	b0 e0       	ldi	r27, 0x00	; 0
    17e6:	e9 e5       	ldi	r30, 0x59	; 89
    17e8:	f0 e0       	ldi	r31, 0x00	; 0
    17ea:	80 81       	ld	r24, Z
    17ec:	80 62       	ori	r24, 0x20	; 32
    17ee:	8c 93       	st	X, r24
}
    17f0:	cf 91       	pop	r28
    17f2:	df 91       	pop	r29
    17f4:	08 95       	ret

000017f6 <ICU_voidSetTriggerEdge>:



u8 ICU_voidSetTriggerEdge(u8 Copy_u8Edge)
{
    17f6:	df 93       	push	r29
    17f8:	cf 93       	push	r28
    17fa:	00 d0       	rcall	.+0      	; 0x17fc <ICU_voidSetTriggerEdge+0x6>
    17fc:	cd b7       	in	r28, 0x3d	; 61
    17fe:	de b7       	in	r29, 0x3e	; 62
    1800:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorStatus=OK;
    1802:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Edge==ICU_RisingEdge)
    1804:	8a 81       	ldd	r24, Y+2	; 0x02
    1806:	88 23       	and	r24, r24
    1808:	41 f4       	brne	.+16     	; 0x181a <ICU_voidSetTriggerEdge+0x24>
	{
		SET_BIT(TCCR1B,TCCR1B_ICES1);
    180a:	ae e4       	ldi	r26, 0x4E	; 78
    180c:	b0 e0       	ldi	r27, 0x00	; 0
    180e:	ee e4       	ldi	r30, 0x4E	; 78
    1810:	f0 e0       	ldi	r31, 0x00	; 0
    1812:	80 81       	ld	r24, Z
    1814:	80 64       	ori	r24, 0x40	; 64
    1816:	8c 93       	st	X, r24
    1818:	0d c0       	rjmp	.+26     	; 0x1834 <ICU_voidSetTriggerEdge+0x3e>
	}
	else if(Copy_u8Edge==ICU_FallingEdge)
    181a:	8a 81       	ldd	r24, Y+2	; 0x02
    181c:	81 30       	cpi	r24, 0x01	; 1
    181e:	41 f4       	brne	.+16     	; 0x1830 <ICU_voidSetTriggerEdge+0x3a>
	{
		CLR_BIT(TCCR1B,TCCR1B_ICES1);
    1820:	ae e4       	ldi	r26, 0x4E	; 78
    1822:	b0 e0       	ldi	r27, 0x00	; 0
    1824:	ee e4       	ldi	r30, 0x4E	; 78
    1826:	f0 e0       	ldi	r31, 0x00	; 0
    1828:	80 81       	ld	r24, Z
    182a:	8f 7b       	andi	r24, 0xBF	; 191
    182c:	8c 93       	st	X, r24
    182e:	02 c0       	rjmp	.+4      	; 0x1834 <ICU_voidSetTriggerEdge+0x3e>
	}
	else
	{
		Local_u8ErrorStatus=NOK;
    1830:	81 e0       	ldi	r24, 0x01	; 1
    1832:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorStatus;
    1834:	89 81       	ldd	r24, Y+1	; 0x01
}
    1836:	0f 90       	pop	r0
    1838:	0f 90       	pop	r0
    183a:	cf 91       	pop	r28
    183c:	df 91       	pop	r29
    183e:	08 95       	ret

00001840 <ICU_voidEnableInterrupt>:



void ICU_voidEnableInterrupt(void)
{
    1840:	df 93       	push	r29
    1842:	cf 93       	push	r28
    1844:	cd b7       	in	r28, 0x3d	; 61
    1846:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,TIMSK_TICIE1);
    1848:	a9 e5       	ldi	r26, 0x59	; 89
    184a:	b0 e0       	ldi	r27, 0x00	; 0
    184c:	e9 e5       	ldi	r30, 0x59	; 89
    184e:	f0 e0       	ldi	r31, 0x00	; 0
    1850:	80 81       	ld	r24, Z
    1852:	80 62       	ori	r24, 0x20	; 32
    1854:	8c 93       	st	X, r24
}
    1856:	cf 91       	pop	r28
    1858:	df 91       	pop	r29
    185a:	08 95       	ret

0000185c <ICU_u16ReadInputCaptureREG>:




u16 ICU_u16ReadInputCaptureREG(void)
{
    185c:	df 93       	push	r29
    185e:	cf 93       	push	r28
    1860:	cd b7       	in	r28, 0x3d	; 61
    1862:	de b7       	in	r29, 0x3e	; 62
	return ICR1;
    1864:	e6 e4       	ldi	r30, 0x46	; 70
    1866:	f0 e0       	ldi	r31, 0x00	; 0
    1868:	80 81       	ld	r24, Z
    186a:	91 81       	ldd	r25, Z+1	; 0x01
}
    186c:	cf 91       	pop	r28
    186e:	df 91       	pop	r29
    1870:	08 95       	ret

00001872 <ICU_voidDisableInterrupt>:



void ICU_voidDisableInterrupt(void)
{
    1872:	df 93       	push	r29
    1874:	cf 93       	push	r28
    1876:	cd b7       	in	r28, 0x3d	; 61
    1878:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK,TIMSK_TICIE1);
    187a:	a9 e5       	ldi	r26, 0x59	; 89
    187c:	b0 e0       	ldi	r27, 0x00	; 0
    187e:	e9 e5       	ldi	r30, 0x59	; 89
    1880:	f0 e0       	ldi	r31, 0x00	; 0
    1882:	80 81       	ld	r24, Z
    1884:	8f 7d       	andi	r24, 0xDF	; 223
    1886:	8c 93       	st	X, r24
}
    1888:	cf 91       	pop	r28
    188a:	df 91       	pop	r29
    188c:	08 95       	ret

0000188e <ICU_u8SetCallBack>:



u8 ICU_u8SetCallBack(void(*Copy_pvCallBackFunc)(void))
{
    188e:	df 93       	push	r29
    1890:	cf 93       	push	r28
    1892:	00 d0       	rcall	.+0      	; 0x1894 <ICU_u8SetCallBack+0x6>
    1894:	0f 92       	push	r0
    1896:	cd b7       	in	r28, 0x3d	; 61
    1898:	de b7       	in	r29, 0x3e	; 62
    189a:	9b 83       	std	Y+3, r25	; 0x03
    189c:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorStatus=OK;
    189e:	19 82       	std	Y+1, r1	; 0x01
	if (Copy_pvCallBackFunc != NULL)
    18a0:	8a 81       	ldd	r24, Y+2	; 0x02
    18a2:	9b 81       	ldd	r25, Y+3	; 0x03
    18a4:	00 97       	sbiw	r24, 0x00	; 0
    18a6:	39 f0       	breq	.+14     	; 0x18b6 <ICU_u8SetCallBack+0x28>
	{
		ICU_pvCallBackFunc=Copy_pvCallBackFunc;
    18a8:	8a 81       	ldd	r24, Y+2	; 0x02
    18aa:	9b 81       	ldd	r25, Y+3	; 0x03
    18ac:	90 93 7c 00 	sts	0x007C, r25
    18b0:	80 93 7b 00 	sts	0x007B, r24
    18b4:	02 c0       	rjmp	.+4      	; 0x18ba <ICU_u8SetCallBack+0x2c>
	}
	else
	{
		Local_u8ErrorStatus=NULL_POINTER;
    18b6:	82 e0       	ldi	r24, 0x02	; 2
    18b8:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorStatus;
    18ba:	89 81       	ldd	r24, Y+1	; 0x01
}
    18bc:	0f 90       	pop	r0
    18be:	0f 90       	pop	r0
    18c0:	0f 90       	pop	r0
    18c2:	cf 91       	pop	r28
    18c4:	df 91       	pop	r29
    18c6:	08 95       	ret

000018c8 <__vector_10>:



void __vector_10 (void) __attribute__((signal));//Timer/Counter0 CompareMatch
void __vector_10 (void)
{
    18c8:	1f 92       	push	r1
    18ca:	0f 92       	push	r0
    18cc:	0f b6       	in	r0, 0x3f	; 63
    18ce:	0f 92       	push	r0
    18d0:	11 24       	eor	r1, r1
    18d2:	2f 93       	push	r18
    18d4:	3f 93       	push	r19
    18d6:	4f 93       	push	r20
    18d8:	5f 93       	push	r21
    18da:	6f 93       	push	r22
    18dc:	7f 93       	push	r23
    18de:	8f 93       	push	r24
    18e0:	9f 93       	push	r25
    18e2:	af 93       	push	r26
    18e4:	bf 93       	push	r27
    18e6:	ef 93       	push	r30
    18e8:	ff 93       	push	r31
    18ea:	df 93       	push	r29
    18ec:	cf 93       	push	r28
    18ee:	cd b7       	in	r28, 0x3d	; 61
    18f0:	de b7       	in	r29, 0x3e	; 62

	if (TIMER0_pvCallBackFUNC_CompareMatch!=NULL)
    18f2:	80 91 77 00 	lds	r24, 0x0077
    18f6:	90 91 78 00 	lds	r25, 0x0078
    18fa:	00 97       	sbiw	r24, 0x00	; 0
    18fc:	29 f0       	breq	.+10     	; 0x1908 <__vector_10+0x40>
	{
		TIMER0_pvCallBackFUNC_CompareMatch();
    18fe:	e0 91 77 00 	lds	r30, 0x0077
    1902:	f0 91 78 00 	lds	r31, 0x0078
    1906:	09 95       	icall
	}
	//DIO_u8SetPinValue(DIO_u8PORTC,DIO_u8PIN7,DIO_u8PIN_HIGH);

	if (ExcuteFnAfterDelay!=NULL)
    1908:	80 91 79 00 	lds	r24, 0x0079
    190c:	90 91 7a 00 	lds	r25, 0x007A
    1910:	00 97       	sbiw	r24, 0x00	; 0
    1912:	89 f1       	breq	.+98     	; 0x1976 <__vector_10+0xae>
	{static u16 Counter=0;
	Counter++;
    1914:	80 91 7d 00 	lds	r24, 0x007D
    1918:	90 91 7e 00 	lds	r25, 0x007E
    191c:	01 96       	adiw	r24, 0x01	; 1
    191e:	90 93 7e 00 	sts	0x007E, r25
    1922:	80 93 7d 00 	sts	0x007D, r24
	if(Counter==Delay_ms)
    1926:	80 91 7d 00 	lds	r24, 0x007D
    192a:	90 91 7e 00 	lds	r25, 0x007E
    192e:	9c 01       	movw	r18, r24
    1930:	40 e0       	ldi	r20, 0x00	; 0
    1932:	50 e0       	ldi	r21, 0x00	; 0
    1934:	80 91 7f 00 	lds	r24, 0x007F
    1938:	90 91 80 00 	lds	r25, 0x0080
    193c:	a0 91 81 00 	lds	r26, 0x0081
    1940:	b0 91 82 00 	lds	r27, 0x0082
    1944:	28 17       	cp	r18, r24
    1946:	39 07       	cpc	r19, r25
    1948:	4a 07       	cpc	r20, r26
    194a:	5b 07       	cpc	r21, r27
    194c:	a1 f4       	brne	.+40     	; 0x1976 <__vector_10+0xae>
	{
		ExcuteFnAfterDelay();
    194e:	e0 91 79 00 	lds	r30, 0x0079
    1952:	f0 91 7a 00 	lds	r31, 0x007A
    1956:	09 95       	icall
		Counter=0;
    1958:	10 92 7e 00 	sts	0x007E, r1
    195c:	10 92 7d 00 	sts	0x007D, r1
		if (Checkperiodicity==Non_Periodic_delay)
    1960:	80 91 83 00 	lds	r24, 0x0083
    1964:	81 30       	cpi	r24, 0x01	; 1
    1966:	39 f4       	brne	.+14     	; 0x1976 <__vector_10+0xae>
		{
			CLR_BIT(TIMSK,TIMSK_OCIE0);//compare match interrupt disable
    1968:	a9 e5       	ldi	r26, 0x59	; 89
    196a:	b0 e0       	ldi	r27, 0x00	; 0
    196c:	e9 e5       	ldi	r30, 0x59	; 89
    196e:	f0 e0       	ldi	r31, 0x00	; 0
    1970:	80 81       	ld	r24, Z
    1972:	8d 7f       	andi	r24, 0xFD	; 253
    1974:	8c 93       	st	X, r24

	else
	{
		//DoNothing
	}
}
    1976:	cf 91       	pop	r28
    1978:	df 91       	pop	r29
    197a:	ff 91       	pop	r31
    197c:	ef 91       	pop	r30
    197e:	bf 91       	pop	r27
    1980:	af 91       	pop	r26
    1982:	9f 91       	pop	r25
    1984:	8f 91       	pop	r24
    1986:	7f 91       	pop	r23
    1988:	6f 91       	pop	r22
    198a:	5f 91       	pop	r21
    198c:	4f 91       	pop	r20
    198e:	3f 91       	pop	r19
    1990:	2f 91       	pop	r18
    1992:	0f 90       	pop	r0
    1994:	0f be       	out	0x3f, r0	; 63
    1996:	0f 90       	pop	r0
    1998:	1f 90       	pop	r1
    199a:	18 95       	reti

0000199c <__vector_11>:



void __vector_11(void) __attribute__((signal));//Timer/Counter0 Overflow
void __vector_11(void)
{
    199c:	1f 92       	push	r1
    199e:	0f 92       	push	r0
    19a0:	0f b6       	in	r0, 0x3f	; 63
    19a2:	0f 92       	push	r0
    19a4:	11 24       	eor	r1, r1
    19a6:	2f 93       	push	r18
    19a8:	3f 93       	push	r19
    19aa:	4f 93       	push	r20
    19ac:	5f 93       	push	r21
    19ae:	6f 93       	push	r22
    19b0:	7f 93       	push	r23
    19b2:	8f 93       	push	r24
    19b4:	9f 93       	push	r25
    19b6:	af 93       	push	r26
    19b8:	bf 93       	push	r27
    19ba:	ef 93       	push	r30
    19bc:	ff 93       	push	r31
    19be:	df 93       	push	r29
    19c0:	cf 93       	push	r28
    19c2:	cd b7       	in	r28, 0x3d	; 61
    19c4:	de b7       	in	r29, 0x3e	; 62

	if (TIMER0_pvCallBackFUNC_OF!=NULL)
    19c6:	80 91 75 00 	lds	r24, 0x0075
    19ca:	90 91 76 00 	lds	r25, 0x0076
    19ce:	00 97       	sbiw	r24, 0x00	; 0
    19d0:	29 f0       	breq	.+10     	; 0x19dc <__vector_11+0x40>
	{
		TIMER0_pvCallBackFUNC_OF();
    19d2:	e0 91 75 00 	lds	r30, 0x0075
    19d6:	f0 91 76 00 	lds	r31, 0x0076
    19da:	09 95       	icall
	}
}
    19dc:	cf 91       	pop	r28
    19de:	df 91       	pop	r29
    19e0:	ff 91       	pop	r31
    19e2:	ef 91       	pop	r30
    19e4:	bf 91       	pop	r27
    19e6:	af 91       	pop	r26
    19e8:	9f 91       	pop	r25
    19ea:	8f 91       	pop	r24
    19ec:	7f 91       	pop	r23
    19ee:	6f 91       	pop	r22
    19f0:	5f 91       	pop	r21
    19f2:	4f 91       	pop	r20
    19f4:	3f 91       	pop	r19
    19f6:	2f 91       	pop	r18
    19f8:	0f 90       	pop	r0
    19fa:	0f be       	out	0x3f, r0	; 63
    19fc:	0f 90       	pop	r0
    19fe:	1f 90       	pop	r1
    1a00:	18 95       	reti

00001a02 <__vector_6>:


/*ICU ISR*/
void __vector_6(void) __attribute__((signal));
void __vector_6(void)
{
    1a02:	1f 92       	push	r1
    1a04:	0f 92       	push	r0
    1a06:	0f b6       	in	r0, 0x3f	; 63
    1a08:	0f 92       	push	r0
    1a0a:	11 24       	eor	r1, r1
    1a0c:	2f 93       	push	r18
    1a0e:	3f 93       	push	r19
    1a10:	4f 93       	push	r20
    1a12:	5f 93       	push	r21
    1a14:	6f 93       	push	r22
    1a16:	7f 93       	push	r23
    1a18:	8f 93       	push	r24
    1a1a:	9f 93       	push	r25
    1a1c:	af 93       	push	r26
    1a1e:	bf 93       	push	r27
    1a20:	ef 93       	push	r30
    1a22:	ff 93       	push	r31
    1a24:	df 93       	push	r29
    1a26:	cf 93       	push	r28
    1a28:	cd b7       	in	r28, 0x3d	; 61
    1a2a:	de b7       	in	r29, 0x3e	; 62
	if (ICU_pvCallBackFunc!=NULL)
    1a2c:	80 91 7b 00 	lds	r24, 0x007B
    1a30:	90 91 7c 00 	lds	r25, 0x007C
    1a34:	00 97       	sbiw	r24, 0x00	; 0
    1a36:	29 f0       	breq	.+10     	; 0x1a42 <__vector_6+0x40>
	{
		ICU_pvCallBackFunc();
    1a38:	e0 91 7b 00 	lds	r30, 0x007B
    1a3c:	f0 91 7c 00 	lds	r31, 0x007C
    1a40:	09 95       	icall
	else
	{
		/*Do nothing*/
	}

}
    1a42:	cf 91       	pop	r28
    1a44:	df 91       	pop	r29
    1a46:	ff 91       	pop	r31
    1a48:	ef 91       	pop	r30
    1a4a:	bf 91       	pop	r27
    1a4c:	af 91       	pop	r26
    1a4e:	9f 91       	pop	r25
    1a50:	8f 91       	pop	r24
    1a52:	7f 91       	pop	r23
    1a54:	6f 91       	pop	r22
    1a56:	5f 91       	pop	r21
    1a58:	4f 91       	pop	r20
    1a5a:	3f 91       	pop	r19
    1a5c:	2f 91       	pop	r18
    1a5e:	0f 90       	pop	r0
    1a60:	0f be       	out	0x3f, r0	; 63
    1a62:	0f 90       	pop	r0
    1a64:	1f 90       	pop	r1
    1a66:	18 95       	reti

00001a68 <main>:
#include "PORT_interface.h"
#include "TIMER_interface.h"
#include "GIE_interface.h"
#include "util/delay.h"
void main(void)
{
    1a68:	df 93       	push	r29
    1a6a:	cf 93       	push	r28
    1a6c:	cd b7       	in	r28, 0x3d	; 61
    1a6e:	de b7       	in	r29, 0x3e	; 62
    1a70:	2f 97       	sbiw	r28, 0x0f	; 15
    1a72:	0f b6       	in	r0, 0x3f	; 63
    1a74:	f8 94       	cli
    1a76:	de bf       	out	0x3e, r29	; 62
    1a78:	0f be       	out	0x3f, r0	; 63
    1a7a:	cd bf       	out	0x3d, r28	; 61
	u8 Local_u8Iterator;
	PORT_voidInit();
    1a7c:	0e 94 7a 0a 	call	0x14f4	; 0x14f4 <PORT_voidInit>
	TIMER0_voidInit();
    1a80:	0e 94 9a 0a 	call	0x1534	; 0x1534 <TIMER0_voidInit>
	PreScalar();
    1a84:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <PreScalar>
	GIE_voidEnable();
    1a88:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <GIE_voidEnable>
	while(1)
	{
		for(Local_u8Iterator=0;Local_u8Iterator<255;Local_u8Iterator++)
    1a8c:	1f 86       	std	Y+15, r1	; 0x0f
    1a8e:	78 c0       	rjmp	.+240    	; 0x1b80 <main+0x118>
		{
		TIMER0_voidSetCompareMatchValue(Local_u8Iterator);
    1a90:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a92:	0e 94 cb 0a 	call	0x1596	; 0x1596 <TIMER0_voidSetCompareMatchValue>
    1a96:	80 e0       	ldi	r24, 0x00	; 0
    1a98:	90 e0       	ldi	r25, 0x00	; 0
    1a9a:	a0 e2       	ldi	r26, 0x20	; 32
    1a9c:	b1 e4       	ldi	r27, 0x41	; 65
    1a9e:	8b 87       	std	Y+11, r24	; 0x0b
    1aa0:	9c 87       	std	Y+12, r25	; 0x0c
    1aa2:	ad 87       	std	Y+13, r26	; 0x0d
    1aa4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1aa6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1aa8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1aaa:	8d 85       	ldd	r24, Y+13	; 0x0d
    1aac:	9e 85       	ldd	r25, Y+14	; 0x0e
    1aae:	20 e0       	ldi	r18, 0x00	; 0
    1ab0:	30 e0       	ldi	r19, 0x00	; 0
    1ab2:	4a ef       	ldi	r20, 0xFA	; 250
    1ab4:	54 e4       	ldi	r21, 0x44	; 68
    1ab6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1aba:	dc 01       	movw	r26, r24
    1abc:	cb 01       	movw	r24, r22
    1abe:	8f 83       	std	Y+7, r24	; 0x07
    1ac0:	98 87       	std	Y+8, r25	; 0x08
    1ac2:	a9 87       	std	Y+9, r26	; 0x09
    1ac4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ac6:	6f 81       	ldd	r22, Y+7	; 0x07
    1ac8:	78 85       	ldd	r23, Y+8	; 0x08
    1aca:	89 85       	ldd	r24, Y+9	; 0x09
    1acc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ace:	20 e0       	ldi	r18, 0x00	; 0
    1ad0:	30 e0       	ldi	r19, 0x00	; 0
    1ad2:	40 e8       	ldi	r20, 0x80	; 128
    1ad4:	5f e3       	ldi	r21, 0x3F	; 63
    1ad6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ada:	88 23       	and	r24, r24
    1adc:	2c f4       	brge	.+10     	; 0x1ae8 <main+0x80>
		__ticks = 1;
    1ade:	81 e0       	ldi	r24, 0x01	; 1
    1ae0:	90 e0       	ldi	r25, 0x00	; 0
    1ae2:	9e 83       	std	Y+6, r25	; 0x06
    1ae4:	8d 83       	std	Y+5, r24	; 0x05
    1ae6:	3f c0       	rjmp	.+126    	; 0x1b66 <main+0xfe>
	else if (__tmp > 65535)
    1ae8:	6f 81       	ldd	r22, Y+7	; 0x07
    1aea:	78 85       	ldd	r23, Y+8	; 0x08
    1aec:	89 85       	ldd	r24, Y+9	; 0x09
    1aee:	9a 85       	ldd	r25, Y+10	; 0x0a
    1af0:	20 e0       	ldi	r18, 0x00	; 0
    1af2:	3f ef       	ldi	r19, 0xFF	; 255
    1af4:	4f e7       	ldi	r20, 0x7F	; 127
    1af6:	57 e4       	ldi	r21, 0x47	; 71
    1af8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1afc:	18 16       	cp	r1, r24
    1afe:	4c f5       	brge	.+82     	; 0x1b52 <main+0xea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b00:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b02:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b04:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b06:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b08:	20 e0       	ldi	r18, 0x00	; 0
    1b0a:	30 e0       	ldi	r19, 0x00	; 0
    1b0c:	40 e2       	ldi	r20, 0x20	; 32
    1b0e:	51 e4       	ldi	r21, 0x41	; 65
    1b10:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b14:	dc 01       	movw	r26, r24
    1b16:	cb 01       	movw	r24, r22
    1b18:	bc 01       	movw	r22, r24
    1b1a:	cd 01       	movw	r24, r26
    1b1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b20:	dc 01       	movw	r26, r24
    1b22:	cb 01       	movw	r24, r22
    1b24:	9e 83       	std	Y+6, r25	; 0x06
    1b26:	8d 83       	std	Y+5, r24	; 0x05
    1b28:	0f c0       	rjmp	.+30     	; 0x1b48 <main+0xe0>
    1b2a:	88 ec       	ldi	r24, 0xC8	; 200
    1b2c:	90 e0       	ldi	r25, 0x00	; 0
    1b2e:	9c 83       	std	Y+4, r25	; 0x04
    1b30:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1b32:	8b 81       	ldd	r24, Y+3	; 0x03
    1b34:	9c 81       	ldd	r25, Y+4	; 0x04
    1b36:	01 97       	sbiw	r24, 0x01	; 1
    1b38:	f1 f7       	brne	.-4      	; 0x1b36 <main+0xce>
    1b3a:	9c 83       	std	Y+4, r25	; 0x04
    1b3c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b3e:	8d 81       	ldd	r24, Y+5	; 0x05
    1b40:	9e 81       	ldd	r25, Y+6	; 0x06
    1b42:	01 97       	sbiw	r24, 0x01	; 1
    1b44:	9e 83       	std	Y+6, r25	; 0x06
    1b46:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b48:	8d 81       	ldd	r24, Y+5	; 0x05
    1b4a:	9e 81       	ldd	r25, Y+6	; 0x06
    1b4c:	00 97       	sbiw	r24, 0x00	; 0
    1b4e:	69 f7       	brne	.-38     	; 0x1b2a <main+0xc2>
    1b50:	14 c0       	rjmp	.+40     	; 0x1b7a <main+0x112>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b52:	6f 81       	ldd	r22, Y+7	; 0x07
    1b54:	78 85       	ldd	r23, Y+8	; 0x08
    1b56:	89 85       	ldd	r24, Y+9	; 0x09
    1b58:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b5e:	dc 01       	movw	r26, r24
    1b60:	cb 01       	movw	r24, r22
    1b62:	9e 83       	std	Y+6, r25	; 0x06
    1b64:	8d 83       	std	Y+5, r24	; 0x05
    1b66:	8d 81       	ldd	r24, Y+5	; 0x05
    1b68:	9e 81       	ldd	r25, Y+6	; 0x06
    1b6a:	9a 83       	std	Y+2, r25	; 0x02
    1b6c:	89 83       	std	Y+1, r24	; 0x01
    1b6e:	89 81       	ldd	r24, Y+1	; 0x01
    1b70:	9a 81       	ldd	r25, Y+2	; 0x02
    1b72:	01 97       	sbiw	r24, 0x01	; 1
    1b74:	f1 f7       	brne	.-4      	; 0x1b72 <main+0x10a>
    1b76:	9a 83       	std	Y+2, r25	; 0x02
    1b78:	89 83       	std	Y+1, r24	; 0x01
	TIMER0_voidInit();
	PreScalar();
	GIE_voidEnable();
	while(1)
	{
		for(Local_u8Iterator=0;Local_u8Iterator<255;Local_u8Iterator++)
    1b7a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b7c:	8f 5f       	subi	r24, 0xFF	; 255
    1b7e:	8f 87       	std	Y+15, r24	; 0x0f
    1b80:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b82:	8f 3f       	cpi	r24, 0xFF	; 255
    1b84:	09 f0       	breq	.+2      	; 0x1b88 <main+0x120>
    1b86:	84 cf       	rjmp	.-248    	; 0x1a90 <main+0x28>
    1b88:	81 cf       	rjmp	.-254    	; 0x1a8c <main+0x24>

00001b8a <__mulsi3>:
    1b8a:	62 9f       	mul	r22, r18
    1b8c:	d0 01       	movw	r26, r0
    1b8e:	73 9f       	mul	r23, r19
    1b90:	f0 01       	movw	r30, r0
    1b92:	82 9f       	mul	r24, r18
    1b94:	e0 0d       	add	r30, r0
    1b96:	f1 1d       	adc	r31, r1
    1b98:	64 9f       	mul	r22, r20
    1b9a:	e0 0d       	add	r30, r0
    1b9c:	f1 1d       	adc	r31, r1
    1b9e:	92 9f       	mul	r25, r18
    1ba0:	f0 0d       	add	r31, r0
    1ba2:	83 9f       	mul	r24, r19
    1ba4:	f0 0d       	add	r31, r0
    1ba6:	74 9f       	mul	r23, r20
    1ba8:	f0 0d       	add	r31, r0
    1baa:	65 9f       	mul	r22, r21
    1bac:	f0 0d       	add	r31, r0
    1bae:	99 27       	eor	r25, r25
    1bb0:	72 9f       	mul	r23, r18
    1bb2:	b0 0d       	add	r27, r0
    1bb4:	e1 1d       	adc	r30, r1
    1bb6:	f9 1f       	adc	r31, r25
    1bb8:	63 9f       	mul	r22, r19
    1bba:	b0 0d       	add	r27, r0
    1bbc:	e1 1d       	adc	r30, r1
    1bbe:	f9 1f       	adc	r31, r25
    1bc0:	bd 01       	movw	r22, r26
    1bc2:	cf 01       	movw	r24, r30
    1bc4:	11 24       	eor	r1, r1
    1bc6:	08 95       	ret

00001bc8 <__divmodsi4>:
    1bc8:	97 fb       	bst	r25, 7
    1bca:	09 2e       	mov	r0, r25
    1bcc:	05 26       	eor	r0, r21
    1bce:	0e d0       	rcall	.+28     	; 0x1bec <__divmodsi4_neg1>
    1bd0:	57 fd       	sbrc	r21, 7
    1bd2:	04 d0       	rcall	.+8      	; 0x1bdc <__divmodsi4_neg2>
    1bd4:	14 d0       	rcall	.+40     	; 0x1bfe <__udivmodsi4>
    1bd6:	0a d0       	rcall	.+20     	; 0x1bec <__divmodsi4_neg1>
    1bd8:	00 1c       	adc	r0, r0
    1bda:	38 f4       	brcc	.+14     	; 0x1bea <__divmodsi4_exit>

00001bdc <__divmodsi4_neg2>:
    1bdc:	50 95       	com	r21
    1bde:	40 95       	com	r20
    1be0:	30 95       	com	r19
    1be2:	21 95       	neg	r18
    1be4:	3f 4f       	sbci	r19, 0xFF	; 255
    1be6:	4f 4f       	sbci	r20, 0xFF	; 255
    1be8:	5f 4f       	sbci	r21, 0xFF	; 255

00001bea <__divmodsi4_exit>:
    1bea:	08 95       	ret

00001bec <__divmodsi4_neg1>:
    1bec:	f6 f7       	brtc	.-4      	; 0x1bea <__divmodsi4_exit>
    1bee:	90 95       	com	r25
    1bf0:	80 95       	com	r24
    1bf2:	70 95       	com	r23
    1bf4:	61 95       	neg	r22
    1bf6:	7f 4f       	sbci	r23, 0xFF	; 255
    1bf8:	8f 4f       	sbci	r24, 0xFF	; 255
    1bfa:	9f 4f       	sbci	r25, 0xFF	; 255
    1bfc:	08 95       	ret

00001bfe <__udivmodsi4>:
    1bfe:	a1 e2       	ldi	r26, 0x21	; 33
    1c00:	1a 2e       	mov	r1, r26
    1c02:	aa 1b       	sub	r26, r26
    1c04:	bb 1b       	sub	r27, r27
    1c06:	fd 01       	movw	r30, r26
    1c08:	0d c0       	rjmp	.+26     	; 0x1c24 <__udivmodsi4_ep>

00001c0a <__udivmodsi4_loop>:
    1c0a:	aa 1f       	adc	r26, r26
    1c0c:	bb 1f       	adc	r27, r27
    1c0e:	ee 1f       	adc	r30, r30
    1c10:	ff 1f       	adc	r31, r31
    1c12:	a2 17       	cp	r26, r18
    1c14:	b3 07       	cpc	r27, r19
    1c16:	e4 07       	cpc	r30, r20
    1c18:	f5 07       	cpc	r31, r21
    1c1a:	20 f0       	brcs	.+8      	; 0x1c24 <__udivmodsi4_ep>
    1c1c:	a2 1b       	sub	r26, r18
    1c1e:	b3 0b       	sbc	r27, r19
    1c20:	e4 0b       	sbc	r30, r20
    1c22:	f5 0b       	sbc	r31, r21

00001c24 <__udivmodsi4_ep>:
    1c24:	66 1f       	adc	r22, r22
    1c26:	77 1f       	adc	r23, r23
    1c28:	88 1f       	adc	r24, r24
    1c2a:	99 1f       	adc	r25, r25
    1c2c:	1a 94       	dec	r1
    1c2e:	69 f7       	brne	.-38     	; 0x1c0a <__udivmodsi4_loop>
    1c30:	60 95       	com	r22
    1c32:	70 95       	com	r23
    1c34:	80 95       	com	r24
    1c36:	90 95       	com	r25
    1c38:	9b 01       	movw	r18, r22
    1c3a:	ac 01       	movw	r20, r24
    1c3c:	bd 01       	movw	r22, r26
    1c3e:	cf 01       	movw	r24, r30
    1c40:	08 95       	ret

00001c42 <__prologue_saves__>:
    1c42:	2f 92       	push	r2
    1c44:	3f 92       	push	r3
    1c46:	4f 92       	push	r4
    1c48:	5f 92       	push	r5
    1c4a:	6f 92       	push	r6
    1c4c:	7f 92       	push	r7
    1c4e:	8f 92       	push	r8
    1c50:	9f 92       	push	r9
    1c52:	af 92       	push	r10
    1c54:	bf 92       	push	r11
    1c56:	cf 92       	push	r12
    1c58:	df 92       	push	r13
    1c5a:	ef 92       	push	r14
    1c5c:	ff 92       	push	r15
    1c5e:	0f 93       	push	r16
    1c60:	1f 93       	push	r17
    1c62:	cf 93       	push	r28
    1c64:	df 93       	push	r29
    1c66:	cd b7       	in	r28, 0x3d	; 61
    1c68:	de b7       	in	r29, 0x3e	; 62
    1c6a:	ca 1b       	sub	r28, r26
    1c6c:	db 0b       	sbc	r29, r27
    1c6e:	0f b6       	in	r0, 0x3f	; 63
    1c70:	f8 94       	cli
    1c72:	de bf       	out	0x3e, r29	; 62
    1c74:	0f be       	out	0x3f, r0	; 63
    1c76:	cd bf       	out	0x3d, r28	; 61
    1c78:	09 94       	ijmp

00001c7a <__epilogue_restores__>:
    1c7a:	2a 88       	ldd	r2, Y+18	; 0x12
    1c7c:	39 88       	ldd	r3, Y+17	; 0x11
    1c7e:	48 88       	ldd	r4, Y+16	; 0x10
    1c80:	5f 84       	ldd	r5, Y+15	; 0x0f
    1c82:	6e 84       	ldd	r6, Y+14	; 0x0e
    1c84:	7d 84       	ldd	r7, Y+13	; 0x0d
    1c86:	8c 84       	ldd	r8, Y+12	; 0x0c
    1c88:	9b 84       	ldd	r9, Y+11	; 0x0b
    1c8a:	aa 84       	ldd	r10, Y+10	; 0x0a
    1c8c:	b9 84       	ldd	r11, Y+9	; 0x09
    1c8e:	c8 84       	ldd	r12, Y+8	; 0x08
    1c90:	df 80       	ldd	r13, Y+7	; 0x07
    1c92:	ee 80       	ldd	r14, Y+6	; 0x06
    1c94:	fd 80       	ldd	r15, Y+5	; 0x05
    1c96:	0c 81       	ldd	r16, Y+4	; 0x04
    1c98:	1b 81       	ldd	r17, Y+3	; 0x03
    1c9a:	aa 81       	ldd	r26, Y+2	; 0x02
    1c9c:	b9 81       	ldd	r27, Y+1	; 0x01
    1c9e:	ce 0f       	add	r28, r30
    1ca0:	d1 1d       	adc	r29, r1
    1ca2:	0f b6       	in	r0, 0x3f	; 63
    1ca4:	f8 94       	cli
    1ca6:	de bf       	out	0x3e, r29	; 62
    1ca8:	0f be       	out	0x3f, r0	; 63
    1caa:	cd bf       	out	0x3d, r28	; 61
    1cac:	ed 01       	movw	r28, r26
    1cae:	08 95       	ret

00001cb0 <_exit>:
    1cb0:	f8 94       	cli

00001cb2 <__stop_program>:
    1cb2:	ff cf       	rjmp	.-2      	; 0x1cb2 <__stop_program>
